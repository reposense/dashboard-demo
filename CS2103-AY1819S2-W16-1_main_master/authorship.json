[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d UniLA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W16-1/main[image:https://travis-ci.org/CS2103-AY1819S2-W16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "https://ci.appveyor.com/project/jwl1997/main/branch/master[image:https://ci.appveyor.com/api/projects/status/mst7mdtn3neg0lxf/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W16-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W16-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* UniLA is a desktop utility application designed for\tNUS students who are typing oriented."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 5,
      "jwl1997": 3,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"githubId\": \"yinya998\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"displayName\": \"CHE...NYA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"authorNames\": [\"yinya998\",\"Yinya^^\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"githubId\": \"yonggqiii\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"displayName\": \"FOO... QI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"authorNames\": [\"yonggqiii\",\"Yong Qi\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"githubId\": \"jwl1997\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"displayName\": \"JIA...LIN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"authorNames\": [\"jwl1997\",\"Wulin Jiang\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"githubId\": \"daDangminh\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"displayName\": \"TRU...ANG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"authorNames\": [\"daDangminh\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"githubId\": \"JillWangJill\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"displayName\": \"WAN...RUI\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "      \"authorNames\": [\"JillWangJill\",\"Jill Wang\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u0027site-name\u0027: \u0027UniLA\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w16-1/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 2,
      "-": 235
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Jiang Wulin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::jwl1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "{empty}[http://github.com/jwl1997[github]] [\u003c\u003cjwl1997#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Responsibilities: Event list component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Truong Cong Minh Dang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::dadangminh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{empty}[http://github.com/daDangminh[github]] [\u003c\u003cdadangminh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Responsibilities: Storage component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Chen Yinya"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::yinya998.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "{empty}[http://github.com/yinya998[github]] [\u003c\u003cyinya998#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Responsibilities: Contact list optimization"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Wang Jiarui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::jillwangjill.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "{empty}[http://github.com/JillWangJill[github]] [\u003c\u003cjillWangJill#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Responsibilities: In-app reminder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Foo Yong Qi"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::yonggqiii.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "{empty}[http://github.com/yonggqiii[github]] [\u003c\u003cyonggqiii#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Responsibilities: Meeting planner, UI"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yinya998": 1,
      "daDangminh": 14,
      "jwl1997": 5,
      "yonggqiii": 1,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Email us* : You can also reach us at `dadangminh15@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d UniLA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "By: `CS2103-W16-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* stores the UniLA data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* can save the UniLA data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Import Contacts"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "The ImportCommand uses `JsonAddressBookStorage` to create a temporary `AddressBook` instance from a given path. It takes in a Path `path` as argument. The command will add the contacts, events and reminders found in this temporary AddressBook but not present in the AddressBook storage into storage. The constructor for ImportCommand is as follows:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " public ImportCommand(Path importPath) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(importPath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.filePath \u003d importPath;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "The execution flow of ImportCommand is shown in the diagram below."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::ImportSequenceDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    Figure: Import command flow chart"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Import Command"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* **Alternative 1 (current choice):** Users import contacts, events and reminders from one .json file."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Pros: This approach minimizes the effort needed from users to import data."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Cons: Users might want to separate contacts, events and reminders so that importing one component will not affect the other"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* **Alternative 2:** Users import contacts, events and reminders from separate files."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Pros: Data can be imported independently."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Cons: It takes unnecessary extra effort to import data separately."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Export"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "The `ExportCommand` uses `JsonAddressBookStorage` class to generate a .json file storing contacts, events and reminders by specified tags to store at a specified path. It takes in a String `name`, Path `path` and an optional Tag `tag`. Omitting the tag will simply save all data into the json file. Below is the main idea ExportCommand constructor:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public ExportCommand(String fileName, Path exportPath, Tag tagExport) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(exportPath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.filePath \u003d exportPath;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.tag \u003d tagExport;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.addressBookExported \u003d new AddressBook();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "----"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "The execution flow of the Export command is shown below."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "image::ExportSequenceDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    Figure: Export command flow chart"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Either zero or one tag can be specified. Therefore below are the possible scenarios:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* Without a tag"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** The app exports all contacts, events and reminders in the UniLA by default."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* With a Tag"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** The app exports all contacts bearing the specified tag in their tagset, along with all events and reminders."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "The final step is to create the xml/excel file from the `teachConnectBook`. This is done with the help of the method `tryStorage()`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Export Command"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* **Alternative 1:** Users can export contacts, events, reminders into separate files."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Pros: This implementation removes the dependency between contacts, events and reminders. Users can change one component without affecting the other."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Cons: It might take more effort from users to import and export data in general because they need to handle each component separately."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* **Alternative 2 (current choice):** Users export all data into the same file."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Pros: This implementation helps remove the need for importing contacts, events and reminders separately. Instead everything can be imported at once."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Cons: Contacts, events and reminders are exported together, and thus there is codependency between these components."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the UniLA. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// tag::findCommand-yinya998[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yinya998"
        },
        "content": "The mechanism is facilitated by `findCommand`, `findCommandParser` and different Predicate classes. It allows users to search with 3 different search patterns. During the execution of find command, 3 search patterns will be executed one by one."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Given below is the process of executing find command:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 1. The exact search: This is a base method of matching string. It\u0027s implemented by String.equals()."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 2. The fuzzy search: This is based on similarity comparison. First edit distance between input keywords and the string in people\u0027s fields is calculated based on Levenshtein Distance algorithm. Subsequently, similarity is calculated by s \u003d 1 - Levenshtein_Distance/Max_Length_Of_Two_Strings. The similarity threshold is set to 0.7. If a person’s fields contain keyword which have more than 0.7 similarity to the input keywords, he or she will be returned in fuzzy search result."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 3. The wildcard search: This is based on regular expression. It recognizes character *. The character * matches any number of alphanumeric characters consisting of 0-9, a-z and A-Z."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The following code snippet is from `TagsContainsKeywordPredicate` class. It shows an example of how predicate class works:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yinya998"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yinya998"
        },
        "content": "----"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String tags \u003d person.getTagsAsStringNoBracket();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(tags, keyword)) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(tags, keyword)) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                       }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(tags, keyword)) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yinya998"
        },
        "content": "----"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How fuzzy search is executed"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* **Alternative 1 (current choice):** Use similarity to compare the keywords"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Pros: The accuracy is higher because the differences and the total length of the strings are proportional."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Cons: Less easy to implement."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* **Alternative 2:** Use edit distance to compare the keywords"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Cons: Lower accuracy especially when the string is short."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yinya998"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Different search patterns optimize the \u0027find\u0027 command for different kinds of users. They help with users when they cannot remember the exact spelling or users who are prone to typos."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// end::findCommand-yinya998[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// tag::photoCommand-yinya998[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d Photo feature"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yinya998"
        },
        "content": "The mechanism is facilitated by `Photo`, `PhotoCommand` class. A `Photo` class is added to `Model`. It allows users to add a photo to the person in the contact list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Given below is the process of executing photo command:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 1. The command will be checked whether it contains sub command `clear`. If it is a photo clear command, the photo of the contact list will reset to default photo. The photo command execution is finished. Else, following steps will be executed."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 2. The input file path will be checked for whether the file exists."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 3. The input file path will be checked for whether it can be opened as an image."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 4. The size the of photo will be checked for whether it is within the range (smaller than 20MB)."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Step 5. The photo will be copied to the program and it is saved to the target person."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The following code snippet is from PhotoCommand class. It shows an example of how photo command executes:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yinya998"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yinya998"
        },
        "content": "----"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yinya998"
        },
        "content": "if (photo.getPath().equals(COMMAND_SUB)) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    photo.setPath(DEFAULT_PHOTOPATH);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    String path \u003d personToEdit.getPhoto().getPath();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    File file \u003d new File(path);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    file.delete();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    if (!isValidPhotoPath(photo.getPath())) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         return new CommandResult(MESSAGE_INVALID_PHOTOPATH);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    if (!isImage(photo.getPath())) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         return new CommandResult(MESSAGE_FILE_NOT_IMAGE);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    if (!isPhotoSizeWithinRange(photo.getPath())) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         return new CommandResult(MESSAGE_SIZE_EXCEED);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    String user \u003d System.getProperty(\"user.name\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    String dir \u003d \"data/\";"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    String copyPath \u003d FileUtil.copyFile(photo.getPath(), String.format(dir, user));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    photo.setPath(copyPath);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yinya998"
        },
        "content": "----"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How photo is stored in UniLA"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* **Alternative 1 (current choice):** Copy the photo to the program."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Pros: The address book will not be affected if the photo in the original path is moved, renamed or deleted. Stability of the program is ensured."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Cons: Consumes more memory because the photo is copied to the program."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* **Alternative 2:** Save the path and load the photo from the path every time when user opens the app."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Pros: Use less memory. Easy to implement."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Cons: The photo will be not be displayed if the photo in the original path is moved, renamed or deleted."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// end::photoCommand-yinya998[]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// tag::eventlistcomponent-jwl1997[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Event list component"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The Event list component complements Person list(the original addressbook4) to provide user with better manage events and their participants. To achieve this, a new Event model is created to according to the below class diagram."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "image::EventClassDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "All the Events object will be stored inside `UniqueEventList`, which becomes another data collection inside `AddressBook` class. When `ModelManager` create `VersionedAddressBook`(implements `AddressBook`), there will be two data collections, one for event and the other for contact."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "From the below Model class diagram, it will be easier to see the illustrate how this Event model integrate the original data structures"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "image::BeforeAfterClassDiagram.png[width\u003d\"800]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Several use cases are implemented for this event components, the use case diagram is shown below:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "image::EventListUseCases.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Event list component"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* **Alternative 1 (current choice):** Add `UniqueEventList` into `AddressBook`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Pros: Easy to implement and current redo, undo, clear command can work for this Event model commands"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Cons: `AddressBook` need to manage both contacts and events, thus have to implement more functions, like add, delete, set for both event and person."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* **Alternative 2:** Build another class outside `AddressBook` to maintain `UniqueEventList`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Pros: Functionality will be separated to different classes."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Cons: This will need much more implementation to build the event list component, including `VersionedAddressBook`, `redo`,`undo`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// end::eventlistcomponent-jwl1997[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// tag::contacteventconnection-jwl1997[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Connect feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The connect feature will provide two commands, `Connect` and `Disconnect`, which is used to add/remove a person to an event as participants."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The connect/disconnect mechanism is facilitated by the `persons` list attribute defined in `Event` class. All the participants for an event is stored inside the `persons` list."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "The connect/disconnect functions are achieved by adding/removing person from the list in a specific event."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "To achieve this function and other person-event related functions, a unidirectional reference is maintained from `Event` to `Person`, as shown below."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "image::EventContactReference.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Connection between contact and event"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* **Alternative 1 (current choice):** Maintain unidirectional relationship between events and contacts."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Pros: Easier to implement, sufficient for all the operations provided in the current product and less memory/storage required"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Cons: `meet` function need to loop through all events to plan a meeting"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* **Alternative 2:** Maintain bidirectional relationship between events and contacts."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Pros: Still easy to implement, easier to get the events that each person has."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Cons: This bidirectional relationship is relatively harder to manage than unidirectional, because delete person/event and connect/disconnect need to change both two referencing lists. Also, more storage will be used in this implementation because Person class also maintain all the Events it is participating, although when the number of events and persons is small, the difference in storage is not significant."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// end::contacteventconnection-jwl1997[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// tag::meet[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d Meeting Planner"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The mechanism is supported by the MeetCommand class. This command allows users to automatically create a meeting event among certain people, removing the need to siphon through all the events just to find a common available timeslot among contacts to meet. The command will:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* search for the earliest available timeslot among the requested people to meet"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* create the meeting event in the event list"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* connect the requested people to the event and"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* set the details of the event (such as name, description etc.) as requested."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`meet INDEX TAGS n/NAME d/DESCRIPTION v/VENUE l/LABEL duration/DURATION s/STARTDATETIME e/ENDDATETIME block/BLOCK`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`meet 1 2 t/friends t/colleagues n/Snooker competition d/Playing snooker again v/SAFRA Toa Payoh l/snooker duration/0 8 -30 0 s/2019-05-01 00:00:00 e/2019-05-07 00:00:00 block/09:00 18:00`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "creates an event whereby:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will have the first and second people in the contact list, and all persons with the `friends` or `colleagues` tag, or both"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event\u0027s name is `Snooker competition`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event\u0027s description is `Playing snooker again`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event venue is `SAFRA Toa Payoh`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event is labeled as `snooker`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will last 7 hours and 30 minutes"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will start at or after 1st May 2019 at 12am"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will end at or before 7th May 2019 at 12am"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event must fall within 9am to 6pm of the same day."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d\u003d How it works:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". `MeetCommandParser` parses `meet` command. The `MeetCommandParser` will ensure that:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** at least one index or tag was entered"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** all indices are valid"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** all other errors caused by invalid arguments will be thrown by `ParserUtil` and `ParserUtilForEvent`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". All the fields are passed as arguments into the constructor of `MeetCommand`, which stores all arguments as instance fields."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". `MeetCommand` retrieves the specified persons from `model`. If a person is not able to be retrieved from the contact list, or if it discovers that less than two valid persons were entered, a `CommandException` is thrown."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". Next, a check will be done to ensure that the specified start time entered is non-trivial, that is, the earliest event created must start at least from the next hour from the time the user enters the command. If the user enters a date and time before the date and time when the command is entered, the next hour after the current date and time will be used instead."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". The full event list will be retrieved from `model`, and piped into a `Stream`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". Events will be filtered off from the `Stream`, based on whether the event involves any of the people specified by the user. This is so that a common free slot can be found."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". The events will then be sorted in order of start time, so that the earliest available common free time slot can be found."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". The earliest common time slot that fits the given block and duration of the event is searched for."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". This event is created, added, and the addressbook is then committed."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The sequence of interactions is shown in the following diagram:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The loop portion is not actually implemented with a `for` or `while` loop. Instead, a `Stream` was used as it was able to `filter` and `reduce` each event sequentially."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The following describes the logic behind points 4 till 9."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Suppose the user enters `meet 1 2 3 s/2019-05-14 03:00 duration/0 4 0 0 block/09:30 18:00`. In this case, the indices, tags, name, description, venue and label are trivial to the logic. Further suppose the user enters this command at some date and time before 03:00 on 14 May 2019."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "In this user\u0027s current events list, there are six events, all involving either persons 1, 2 or 3. These events are \"in the way\". They are depicted as red boxes in the following diagrams. All other events in the list have been filtered away by the `Stream`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The yellow region signifies the block entered by the user, i.e. the block of time which the event *must* fall in."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Because the start time is after the next hour from the time the command was entered, an event with a duration of 4 hours that starts on 3am on 14 May 2019 is created. This is labeled as `meeting` in light blue below."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`meeting` is first transformed to fit in the first block. This is done by the `transformEventToFitBlock(Event e)` method."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "At this point, all existing events in the events list (shown in red) will be piped into a `Stream` object. This `stream` is filtered, such that all events that do not have *any* of the proposed meeting participants are filtered out."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "In this case, because all events in the user\u0027s events list involve either persons 1, 2 or 3, none of them are filtered out. Now, `reduce` is applied on this `Stream` object."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The following is the code snippet for the `reduce` method."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "----"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".reduce(meeting, (x, y) -\u003e {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    LocalDateTime xEnd \u003d toDateTime(x.getEndDateTime());"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    LocalDateTime yStart \u003d toDateTime(y.getStartDateTime());"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    LocalDateTime yEnd \u003d toDateTime(y.getEndDateTime());"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    if (toDateTime(x.getStartDateTime()).isAfter(yEnd)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            || !xEnd.isAfter(yStart)) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    LocalDateTime start \u003d yEnd;"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    return transformEventToFitBlock(new Event(name, description, venue,"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            new DateTime(start.format(DateTime.DATE_TIME_FORMATTER)),"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            new DateTime(start.plus(duration).format(DateTime.DATE_TIME_FORMATTER)), label));"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "});"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "----"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "In this case, `x` will always be the `meeting` event, shown in blue. Event `y` will be highlighted green."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Because the `stream` has already been sorted in order of start `DateTime` s, `y` will be selected in order of left to right in the diagram."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The logic behind `reduce` is as follows:"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* If `x` does not clash with `y`, then `(x, y)` reduces to `x`."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* Else, create a new meeting that starts at the end `DateTime` of y, then transform it to fit the block."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Pictorially, it will look like the following."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The left-most event is selected as `y`. In the first use of `reduce`, the `identity` was set to be the initial `meeting:Event`, in blue."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Because the event in blue does not clash with the event in green, both events simply reduce to the one in blue. The next left-most event is selected as the next `y`."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic4.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "In this case, the event in blue clashes with the event in green. Thus, a new event, with a duration of 4 hours (same as before), that starts at the end of `y`, is created. This event is then transformed to fit the block, which in this case already does. The old blue and green events are reduced to this new event."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic5.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Here, the event in blue clashes with the event in green. A new event with a duration of 4 hours, that starts at the end of `y`, is created. This event is then transformed to fit the block, in this case, it is pushed all the way to start at 09:30 the next day."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic6.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic6a.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The event here does not clash with `meeting`. Both events reduce to `meeting`."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic7.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Here, the event in blue clashes with the event in green. Just as before, the two old events are reduced to a new meeting event that starts right after the end of `y` and is within the block."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic8.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Finally, the last event does not clash with the event in blue. Both events reduce to the event in blue."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "image::MeetCommandLogic9.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "This event is then tested whether its end `DateTime` is later than the latest end `DateTime` specified by the user, and whether there are duplicate events. I would have written a lot more, but I\u0027m out of space in my PPP."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// end::meet[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// tag::reminderComponent-jillWangJill[]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Reminder Component"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "The mechanism is supported by the `reminder` and `reminderList` class. It allows users to add reminders to event, which will pop in app certain interval before event start time. Please refer to this class diagram."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "image::ReminderEventRelationship.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`reminderList` will keep track of all `reminder`."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`reminder` class contains `Unit`, `Interval` to facilitate the constructor building. Please refer to the following class diagram."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "image::ReminderClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How to implement `reminder`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* **Alternative 1 (current choice):** Create new model, named `reminder` to include `reminder` and `reminderList` class."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Pros: Convenient for modifying because of the relatively loose connection with `event`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Cons: Require large change in model."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* **Alternative 2:** Add another attribute named reminder to record the remind time and we can list the event by sorting remind time."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Pros: Easy to implement. Only need `event` and `person` model."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Cons: Not easy to delete corresponding reminder after its reminding time as it is highly connected with event. Cannot be applied and modified anywhere."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How to implement `reminderList`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* **Alternative 1 (current choice):** Create only one reminder list for whole `UniLA`."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Pros: Convenient for adding, deleting, and checking."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Cons: Required more connection between logic and model."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* **Alternative 2:** Create one reminder list for each event for whole `UniLA`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Cons: Not centered. Need to loop through every event when add, delete and check."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// end::reminderComponent-jillWangJill[]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// tag::reminderFeature-jillWangJill[]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Reminder Feature"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Please take a look at use case diagram first."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "image::ReminderUseCase.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Among these features, the `addR` combined with `reminderCheck` is the most useful one. The mechanism is supported by `ReminderCheck`,`AddR` and `AddR parser` classes. It allows users to create a reminder in certain interval before event start time."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "And the reminder will pop inside app at that reminding time. Also, it will disappear after showing up for one minute."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Given below is an example usage scenario and how the `AddR` reminder behaves."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Step 1. The user lists events in address and select the event that the user wants UniLA to remind."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Step 2. User run command `addR 2 t/4 u/min`, which will let UniLA add the one 4min-before-starttime reminder to the second event."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Step 3. When the time is up, the reminder pop up under `listR` model."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Step 4. After showing up for 1 minute, the reminder will be automatically deleted from the reminder list."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d\u003d How it works:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* AddRCommandParser parses `addR` command. The AddRCommandParser will ensure the interval unit and to check possible exceptions."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Interval and event will be passed to AddRCommand. AddRCommand touched model to create new reminder in reminder list."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Another thread named `reminderCheck` will be running at the same time. It will check when to pop up the reminder, and when to make it disappear by comparing `the starting time - interval` with `current time`."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Reminder which satisfies the time requirement will pop up under `listR` model."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Reminder will be deleted from reminder list after it shows up for 1 minute."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "To achieve the reminder check function, another thread is created as the sequence diagram shown below."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "image::reminderListSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// end::reminderFeature-jillWangJill[]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the UniLA, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the UniLA."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your UniLA application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the UniLA."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the UniLA is updated."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the UniLA to the cloud. However, the current implementation of the application constantly saves the UniLA after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the UniLA storage."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the UniLA can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`*` |user with many persons in the UniLA |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |add a new event |"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |delete an event |remove the events that I have attended"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |edit an event |modify the events details"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |list all events |see all the events that I have"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |connect a person to an event |add a person as participant to an event"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|`* * *` |user |disconnect a person from an event |remove this person from the event"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|`* * *` |user |meet people |find common free timeslot and create event with people"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "(For all use cases below, the *System* is the `UniLA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// tag::useCases-jwl1997[]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Use case: Add person / event"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "1. User inputs text to console to add person/event."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "2. UniLA acknowledges and adds person/event to the list."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "3. UniLA is updated with a latest list of persons/events."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* 1a. The format of parameters entered are invalid."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** 1a1. UniLA shows an error message."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person/event"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "1.  User requests to list persons/events"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "2.  UniLA shows a list of persons/events"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "3.  User requests to delete a specific person/event in the list"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "4.  UniLA deletes the person/event"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** 3a1. UniLA shows an error message."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person/event"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "1.  User requests to edit a specific person/event in the list."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "2.  UniLA updates itself."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** 1a1. UniLA shows an error message."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* 1b. The arguments for edit command are invalid."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** 1b1. UniLA shows an error message."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Use case: List persons/events"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "1. User request to list all the persons/events."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "2. UniLA displays list of persons."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* 1a. There is no event/person in UniLA."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** UniLA shows a successful message."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "+"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// end::useCases-jwl1997[]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Delete an event"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ". Delete an event while all events are listed."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ".. Prerequisites:List all events using the `listE` command. Multiple events in the list."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    Delete all reminders relate to this event using `deleteR e/1`."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ".. Test case: `deleteE 1` +"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "   Expected: 1st event deleted."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d Meeting planner"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ". Meeting multiple people"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. At least 5 persons must be in the list."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Prerequisites: List all events using `listE` command. No events must be in the list."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Test case: `meet 1 2` +"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: A 2-hour event with the first two people in this list is created. The event should start in the next hour the user enters the command."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. `meet 2 3` +"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: A 2-hour event with the second and third persons in this list is created. This event should start right after the previous event was created."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. `switch` +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   `edit 1 n/Another Name` +"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   `listE` +"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   `select` 1"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: The first event should update the changes in the first person\u0027s name"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. `meet 4 5 duration/0 3 0 0` +"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: A 3-hour event with the fourth and fifth persons in this list is created. This event should start in the next hour the user enters the command."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Test case 2: `meet 1` +"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: An error is thrown saying that more than one person must be involved in this event."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Test case 3: `meet 10000000000000 100000000001` +"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: An error is thrown saying that the indices are invalid."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ".. Test case 4: `meet 1 1 2 2 2` +"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "   Expected: The command works as per normal. Duplicates should be ignored."
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 72,
      "yinya998": 130,
      "daDangminh": 71,
      "yonggqiii": 163,
      "jwl1997": 148,
      "-": 935
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d UniLA - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w16-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "By: `CS2103-W16-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* UniLA is a desktop utilities application designed for\tNUS students who are typing oriented."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ".  Download the latest `W16-1 UniLA.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your UniLA."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the UniLA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Contact List Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// tag::switch[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d Switching views: `switch`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Changes the view in the window. The default upon startup is in Contacts view. Running this command will toggle between contacts and events view."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Format: `switch`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Commands that require indices of one particular view as arguments may require you to switch to that view first. In those cases, switch to the appropriate view before running the command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// end::switch[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds a person to the UniLA +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Shows a list of all persons in the UniLA. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Edits an existing person in the UniLA. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// tag::upgradefindcommand-yinya998[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d Locating persons by any field: `find`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Finds people whose fields contain any of the input keywords."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Searching can be done with or without prefix."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "When searched without prefix, people whose fields that contain any matching keywords will be returned."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "When searched with prefix, people whose corresponding fields that contain any matching keywords will be returned."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format1: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format2: `find prefix/KEYWORD, [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* If there is no prefix, all fields will be searched."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "These are 3 search patterns that are utilized be the `find` command: +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": "1. Exact keyword match - Matches the input keyword with exact keywords found in people\u0027s fields."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "2. Fuzzy keyword match - Matches the input keyword to people\u0027s fields that have higher than 0.7 similarity. The similarity is calculated based on Levenshtein Distance. Further explanation is provided in the developer guide."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yinya998"
        },
        "content": "3. Wildcard keyword match - Matches the input keyword with wildcard character *. * represents any number of alphanumeric characters consisting of 0-9, a-z and A-Z."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*Searching results are displayed in the following format:* +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "n persons listed: +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": " Exact Search: +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": " [NAME]… +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": " Fuzzy Search: +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yinya998"
        },
        "content": " [NAME]… +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yinya998"
        },
        "content": " Wildcard Search: +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": " [NAME]… +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yinya998"
        },
        "content": " There are three parts of executing `find` command. The input keywords are first searched with exact string match, then fuzzy search, and finally wildcard search."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": " Any results displayed in the previous searching stage will not be shown in the next searching stage. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yinya998"
        },
        "content": " For example, if person Alice is found in exact string match, she will not be displayed in fuzzy search result. This is to avoid message duplication."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find victoria` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In exact search: Returns any person whose fields that contain keyword `victoria` in exact search. For example, person whose name is `Victoria` or person who lives in `Victoria Street`. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In fuzzy search: Returns any person whose fields that have keywords similar to `victoria`. For example, person whose tags containing the keyword `Victory`. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find Serangon doctor` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In exact search: Returns any person whose fields that contain keywords `Serangon` **or** `doctor`  +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In fuzzy search: Returns any person whose fields that have keywords similar to `Serangon` **or** `doctor` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find t/owemoney friends` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In exact search: Returns any person whose tags that contain keywords `owemoney` **or** `friends` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In fuzzy search: Returns any person whose tags that have keywords similar to to `owemoney` **or** `friends` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `find \\*@gmail.com` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In exact search: Returns any person whose fields that contain keywords `*@gmail.com` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In fuzzy search: Returns any person whose fields that have keywords similar to `\\*@gmail.com` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "In wildcard search: Returns any person whose fields that have keywords match regex `*@gmail.com` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// end::upgradefindcommand-yinya998[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person: `delete`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the specified person from the UniLA. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the 2nd person in the UniLA."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person: `select`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Selects the 2nd person in the UniLA."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Restores the UniLA to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Undoable commands: those commands that modify the UniLA\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Clears all entries from the UniLA. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "UniLA data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// tag::photocommand-yinya998[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d Adding photo to a person : `photo`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Adds photo to a person in the contact list (identified by the index number used in the last listing). +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format1: `photo INDEX IMAGE_PATH`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Removes photo from a person in the contact list by the sub-command `clear`. Photo of the person will reset to the default photo. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format2: `photo INDEX clear`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The given path must be a valid image path."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The size of the photo should be smaller than 20MB."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yinya998"
        },
        "content": "`photo 3 /users/alice/desktop/photo.png` (in mac) +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yinya998"
        },
        "content": "`photo 3 C:\\Users\\william\\Desktop\\photo.jpg` (in windows) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds photo to the 3rd person in the UniLA. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yinya998"
        },
        "content": "`photo 3 clear` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Removes the photo from the 3rd person in the UniLA. Photo is reset to the default photo."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yinya998"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yinya998"
        },
        "content": "The added photo will be copied to the program. Thus, if the photo in the original path is moved, renamed or deleted, UniLA will not be affected."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// end::photocommand-yinya998[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// tag::importexport[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Importing data from .json file : `import`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Imports the data from an external .json file to the UniLA. The file may contains data about Contacts, Events and Reminders.  +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Imports data from the location specified by `FILEPATH`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* `FILEPATH` must end with an extension of `.json`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The file name in `FILEPATH` should be valid."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* The path specified by FILEPATH is relative to the directory of .jar file. For example: if .jar file is in C:\\UniLA, and FILEPATH is specified as data/test.json, then test.json is in C:\\UniLA\\data."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Repeated data that already exists in UniLA will not be imported."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* Data in the .json file must be in the identifiable format."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "`import data/contacts.json`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d\u003d Exporting data to .json file by tag : `export`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Exports the data to an external .json file from the UniLA. The file will contain all events, all reminders, and all contacts bearing the tag specified. +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "Format: `export n/FILENAME p/FILEPATH [t/TAG]`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* Exports data to a file whose name is specified by FILENAME and location is specified by `FILEPATH`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* The path specified by FILEPATH is relative to the directory of .jar file. For example: if .jar file is in C:\\UniLA, and FILEPATH is specified as p/data, then the actual location is in C:\\UniLA\\data."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* Contacts whose tags include \u0027TAG\u0027 will be exported."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* If `TAG` is omitted. all contacts will be exported."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* All events and reminders are exported"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* `FILEPATH` should be valid."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "`export n/mycontacts p/data t/friends`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "// end::importexport[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Event List Features"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// tag::eventcomponet-jwl1997[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Connecting a person to an event : `connect`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Connects one contact from Contact List to Event List by contact index and event index +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `connect ci/CONTACT_LIST_INDEX ei/EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `CONTACT_LIST_INDEX` refers to the index number shown in the displayed Contact List."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `EVENT_LIST_INDEX` refers to the index number shown in the displayed Event List."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Two index must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the participant index from Contact List. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`listE` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the event index from Event List. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`connect ci/1 ei/2` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Add the 1st person from Contact List into the 2nd event in the Event List."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Disconnecting a person with an event : `disconnect`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Disconnects one contact from Contact List to Event List by contact index and event index +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `disconnect ci/CONTACT_LIST_INDEX ei/EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `CONTACT_LIST_INDEX` refers to the index number shown in the displayed Contact List."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `EVENT_LIST_INDEX` refers to the index number shown in the displayed Event List."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Two index must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the participant index from Contact List. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`listE` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Find the event index from Event List. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`disconnect ci/1 ei/2` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Disconnect the 1st person from Contact List with 2nd event in the Event List."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Adding an event: `addE`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Adds an event to event list+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `addE n/NAME d/DESCRIPTION v/VENUE s/STARTING_TIME e/ENDING_TIME l/LABEL`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Only valid date and time will be allowed and must be in the format of `yyyy-MM-dd HH:mm:ss`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* User need to make sure start time is equal or before end time."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `addE n/career talk d/Google company info session v/com1 level2 s/2019-01-31 14:00:00 e/2019-01-31 14:00:00 l/important`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `addE n/CS2103 project meeting d/quick meeting v/central library s/2019-12-31 16:00:00 e/2019-12-31 16:00:00 l/urgent`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Deleting an event : `deleteE`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the specified event from the event list. +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `deleteE INDEX`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index refers to the index number shown in the displayed event list."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* User needs to first delete reminders related the event using `deleteR`.(please refer to \u003c\u003cdeleteR\u003e\u003e for deleting reminders)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `listE` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`deleteR e/2` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "`deleteE 2` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Deletes the 2nd event in the event list."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Listing all events : `listE`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Shows a list of all events in the event list. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `listE`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d\u003d Editing an event : `editE`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Edits an existing event in the UniLA. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Format: `editE INDEX [n/NAME] [d/DESCRIPTION] [v/VENUE] [s/STARTING_TIME] [e/ENDING_TIME] [l/LABEL]`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* Only valid date and time will be allowed and must be in the format of `yyyy-MM-dd HH:mm:ss`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* User need to make sure start time is equal or before end time."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `editE 1 d/short meeting l/top priority` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Edits the description and label of the 1st event to be `short meeting` and `top priority` respectively."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* `editE 2 v/com2 level4` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "Edits the venue of the 2nd event to be `com2 level4`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// end::eventcomponet-jwl1997[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// tag::findEcommand-yinya998[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d\u003d Locating events by any field: `findE`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Finds events whose fields contain any of the input keywords."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Searching can be done with or without prefix."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yinya998"
        },
        "content": "When searched without prefix, events whose fields that contain any matching keywords will be returned."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yinya998"
        },
        "content": "When searched with prefix, events whose corresponding fields that contain any matching keywords will be returned."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format1: `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format2: `find prefix/KEYWORD, [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The search is case insensitive. e.g `talk` will match `Talk`."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* The order of the keywords does not matter. e.g. `cs meeting` will match `meeting cs`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* Only exact keywords will be matched e.g. `talk` will not match `talks`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* If there is no prefix, all fields will be searched."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* Events matching at least one keyword will be returned (i.e. `OR` search). e.g. `talk` will return `google talk` and `career talk`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE google` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns any events having fields that contain keywords `google`. For example, event whose name is \u0027Google talk\u0027 or event whose venue is \u0027Google building\u0027."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE pgp library` +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns any events having fields that contain keywords `pgp` or `library`. For example, events with venue \u0027pgp\u0027 or \u0027central library\u0027."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE l/important` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns any event having label that contains keyword `important`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yinya998"
        },
        "content": "There are two sub command of `findE` command which are `findE time/` and `findE duration/`: +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*1. `findE time/` finds events whose starting date are before, equal to or after the searching date. Alternatively alias (ytd, today or tmr) can be used to search for events whose starting date is yesterday, today or tomorrow.*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format3: `findE time/operatorDATE` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format4: `findE time/alias(ytd, today or tmr)`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* operator should be of type *\u003c*, *\u003d* or *\u003e*."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* DATE should be a valid date."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* DATE should in format *YYYY-MM-DD*."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* operator and DATE should have no blank space in between."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE time/\u003e2019-12-01` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns all the events whose starting dates are after 2019,12,1."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE time/tmr` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns all the events that starting tomorrow."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*2. `findE duration/` finds events whose duration is smaller, equal to or larger than the searching period.*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Format5: `findE duration/operatorHOURS`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* operator should be of type *\u003c*, *\u003d* or *\u003e*."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* HOURS is an integer representing the duration in hours."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* HOURS should be a positive integer within range [1,24]."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* operator and HOURS should have no blank space in between."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yinya998"
        },
        "content": "****"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE duration/\u003c2` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns all the events which are shorter than 2 hours."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* `findE duration/\u003e4` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yinya998"
        },
        "content": "Returns all the events which are longer than 4 hours."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yinya998"
        },
        "content": "// end::findEcommand-yinya998[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// tag::meet[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d Planning a meeting : `meet`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "This command allows users to automatically create a meeting event among certain people, removing the need to siphon through all the events just to find a common available timeslot among contacts to meet. The command will:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* search for the earliest available timeslot among the requested people to meet"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* create the meeting event in the event list"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* connect the requested people to the event and"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* set the details of the event (such as name, description etc.) as requested."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Format: `meet INDEX TAGS n/NAME d/DESCRIPTION v/VENUE l/LABEL s/STARTDATETIME e/ENDDATETIME duration/D H M S block/BLOCK` where"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `INDEX` denotes the indices of the people in the contact list the user wants to meet. For example, entering indices `1 2` will retrieve the 1st and 2nd persons in the contact list."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `TAGS` denotes the tags of the people in the contact list the user wants to meet. For example, entering tags `t/friends` will retrieve all persons with the `friends` tag."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `NAME` is the name of the new meeting event"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `DESCRIPTION` is the description of the new meeting event"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `VENUE` is the venue of the new meeting event, and"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `LABEL` is the label given to this new meeting event."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `D` is the number of days the event will have"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `H` is the number of hours the event will have"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `M` is the number of minutes the event will have, and"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `S` is the number of seconds the event will have."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `STARTDATETIME` is the earliest possible start date and time of the new meeting event"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `ENDDATETIME` is the latest possible end date and time of the new meeting event, and"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `BLOCK` denotes the block of *time* that the new meeting event *must* be in."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "and must abide by these restrictions:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `INDEX` *must be positive integers* 1, 2, 3..."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `TAGS` *must be valid alphanumeric tag names*, each with the `t/` prefix, such as `t/tagOne t/tagTwo`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* Duplicates are allowed but are ignored"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* At least two valid persons were specified"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `NAME` must be a valid event name"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `DESCRIPTION` must be a valid event description"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `VENUE` must be a valid event venue and"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `LABEL` must be a valid alphanumeric event label."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `D`, `H`, `M`, `S` are all integers"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* Individually, `D`, `H`, `M` and `S` can be negative"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The specified duration in its *entirety* is nonnegative."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* Both `STARTDATETIME` and `ENDDATETTIME` are valid `DateTime`s"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `BLOCK` is a valid `Block` (see Defining a Valid Block)."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "The earliest this event would be created will be at the start of the next hour from the time the command was run. That is, if user ran the command on 1st Jan 2019 at 4:59pm, the earliest meeting event that could be created would be on 1st Jan 2019 at 5pm."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*Note*: All fields are optional, but at least two valid persons must be specified. If a field is unspecified, a default value is used."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*Note*: Entering multiple tags create and/or relationships, more specifically, if a user specifies two tags, `tagone` and `tagtwo`, then every person who has `tagone` *and/or* `tagtwo` will be retrieved (think of it as a union of two sets, not the intersection)."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`meet 1 2 t/friends t/colleagues n/Snooker competition d/Playing snooker again v/SAFRA Toa Payoh l/snooker duration/0 8 -30 0 s/2019-05-01 00:00:00 e/2019-05-07 00:00:00 block/09:00 18:00`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "creates an event whereby:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will have the first and second people in the contact list, and all persons with the `friends` or `colleagues` tag, or both"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event\u0027s name is `Snooker competition`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event\u0027s description is `Playing snooker again`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event venue is `SAFRA Toa Payoh`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event is labeled as `snooker`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will last 7 hours and 30 minutes"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will start at or after 1st May 2019 at 12am"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event will end at or before 7th May 2019 at 12am"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* The event must fall within 9am to 6pm of the same day."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Defining a Valid Block:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "A block denotes the block of time that the new meeting event must be in."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "It contains two timings, and possibly a `!` symbol, \"negating\" the block."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "A block must be written as:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "`block/\u003cOptional ! symbol\u003e\u003cEither two sets of timings in HH:MM separated by space, or a keyword\u003e`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `block/00:00 13:32` +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "indicates that the new meeting event *must* fall within 12am to 1.32pm within the same day (counting clockwise)."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `block/!22:00 04:00` +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "indicates that the new meeting event *must not* fall within 10pm to 4am the next day, or effectively, the new meeting event must fall within 4am to 10pm within the same day."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Instead of entering two timings, users may opt to enter a keyword instead. The following is the full list of available keywords:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `morning` denotes 6am to 12pm"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `afternoon` denotes 12pm to 6pm"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `evening` denotes 6pm to 8pm"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `night` denotes 8pm to 12am the next day"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `midnight` denotes 12am to 6am"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `school` denotes school hours, i.e. 8am to 6pm"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `breakfast` denotes 7am to 10am"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `lunch` denotes 12pm to 2pm"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `dinner` denotes 5pm to 8pm"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `supper` denotes 9pm to 1am the next day"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `brunch` denotes 10am to 1pm."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "****"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `block/breakfast` +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "indicates that the new meeting event must fall within breakfast hours, defined to be 7am to 10am."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* `block/!night` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "indicates that the new meeting event must not fall within night time, defined to be 8pm to 12am the next day. Effectively, the event must fall within 12am to 8pm of the same day."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// end::meet[]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// tag::ReminderFeatures-JillWangJill[]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d Reminder Features"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d  Add reminder to certain event : `addR`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Format: `addR EVENT_LIST_INDEX t/INTERVAL u/UNIT`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "The event with EVENT_LIST_INDEX will be reminded in pop up reminder list (please refer to \u003c\u003clistR\u003e\u003e for showing pop up reminder list ) before INTERVAL UNIT earlier than event beginning time"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "After reminder showing for 1 minute in pop up reminder list(please refer to \u003c\u003clistR\u003e\u003e for showing pop up reminder list )"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Reminder will pop up at `INTERVAL` `UNIT` before event\u0027s beginning."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` refers to index number shown in the displayed Event List"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `INTERVAL` refers to how long would user prefer to have the remind before the event beginning."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `INTERVAL` and `REMINDTIME_AFTER` must be a positive number 1,2,...,15,16,...,60,..."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `UNIT` refers to the `INTERVAL` unit."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `UNIT` needs to be MIN, HOUR, YEAR."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `UNIT` is case insensitive. Min, HouR, YeAr, ... are accepted."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX`, `INTERVAL`, `UNIT` should be all filled."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `addR 1 t/3 u/MIN` +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Adds reminder to the 1st event in the UniLA. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "The pop up time of reminder is 3 minutes before event\u0027s beginning time. You can see the pop up reminder. +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`listR` +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show the pop up reminder panel. +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`listFr` +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show the full list of all reminders. You can always see the added reminder under `listFr`."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "[[deleteR]]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Deleteing a reminder : `deleteR`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Delete reminders related to specific event. Or delete specific reminder."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Format: `deleteR e/EVENT_LIST_INDEX r/REMINDER_LIST_INDEX`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* Can only use `deleteR e/EVENT_LIST_INDEX` or `deleteR r/REMINDER_LIST_INDEX`."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* If users input `deleteR e/EVENT_LIST_INDEX r/REMINDER_LIST_INDEX`, UniLA only consider `e/EVENT_LIST_INDEX`."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` refers to index number shown in the displayed Event List"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` refers to index number shown in the `listFr` Full Reminders List"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `EVENT_LIST_INDEX` must be a positive integer 1,2,3,4,..."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "****"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Example1:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `listE` +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Find the event index +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`listFr` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show the full reminder list +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`deleteR e/2` +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Delete the reminders related with 2nd event. You can see the full reminder list reduces."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Example2:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `listFr` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show the full reminder list and find the reminder index +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "`deleteR r/1` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Delete the 1st reminder in reminder full list."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Showing full reminder list : `listFr`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show all the reminders."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `listFr`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "[[listR]]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d\u003d Showing pop up reminder list : `listR`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Show pop up reminder panel."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* `listR`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// end::ReminderFeatures-JillWangJill[]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous UniLA folder."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// tag::commandsummary-JillWangJill[]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *AddR* : `addR EVENT_LIST_INDEX t/INTERVAL u/UNIT` +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "e.g. `addR 1 t/3 u/MIN`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *DeleteR* :  `deleteR e/EVENT_LIST_INDEX r/REMINDER_LIST_INDEX` +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "e.g. `deleteR e/2`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *ListFr* : `listFr` +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "e.g. `listFr`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *ListR* : `listR` +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "e.g. `listR`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "// end::commandsummary-JillWangJill[]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "// tag::commandsummary-jwl1997[]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *AddE* `addE n/NAME d/DESCRIPTION v/VENUE s/STARTING_TIME e/ENDING_TIME l/LABEL` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "e.g. `addE n/career talk d/Google company info session v/com1 level2 s/2019-01-31 14:00:00 e/2019-01-31 14:00:00 l/important`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *DeleteE* : `delete INDEX` +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "e.g. `deleteE 3`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *EditE* : `editE INDEX [n/NAME] [d/DESCRIPTION] [v/VENUE] [s/STARTING_TIME] [e/ENDING_TIME] [l/LABEL]` +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "e.g. `editE 1 d/short meeting l/top priority`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* *FindE* : `findE KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yinya998"
        },
        "content": "or \u0027findE [n/NAME] [d/DESCRIPTION] [v/VENUE] [s/STARTING_TIME] [e/ENDING_TIME] [l/LABEL] +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yinya998"
        },
        "content": "or `findE time/operatorDATE` +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yinya998"
        },
        "content": "or `findE time/alias(ytd, today or tmr)` +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yinya998"
        },
        "content": "or `findE duration/operatorHOURS` +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yinya998"
        },
        "content": "e.g. `findE talk` +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yinya998"
        },
        "content": "e.g. `findE s/2019-04-07 10:00:00` +"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yinya998"
        },
        "content": "e.g. `findE time/\u003c2019-04-09` +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yinya998"
        },
        "content": "e.g. `findE duration/\u003c3`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *ListE* : `listE`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *Connect* : `connect ci/CONTACT_LIST_INDEX ei/EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *Disconnect* : `disconnect ci/CONTACT_LIST_INDEX ei/EVENT_LIST_INDEX`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// end::commandsummary-jwl1997[]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* *Meet* : `meet INDEX [MORE INDICES]`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 90,
      "yinya998": 150,
      "daDangminh": 16,
      "yonggqiii": 129,
      "jwl1997": 165,
      "-": 231
    }
  },
  {
    "path": "docs/team/dadangminh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d Truong Cong Minh Dang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d PROJECT: UniLA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "UniLA is a desktop utilities application designed for\tNUS students who are typing oriented. UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc. The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Major enhancement*: add the ability to import/export data"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** What it does: allows the user to import contacts, events and reminders from a .json file, as well as exporting them to a .json file by tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Justification: Importing removes the need to manually add contacts or events if the data has already been stored somewhere. Exporting helps the user to safely store data in a separate file to avoid losing data accidentally."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Major enhancement*: support storage for events and reminders"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** What it does: autosaves any newly added events/reminders and displays the all the data from last sessions upon app launch."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Justification: Users want the added data to remain in the app even after it is closed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Highlights: This enhancement requires in-depth understanding of how to read and save data using .json files. It also involves understanding of various components like logic, storage, model and how they work together."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003ddadangminh[RepoSense Project Code Dashboard]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Prepared the README, About Us, Contact Us documents"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Worked with other team members to fix bugs arisen from conflicts between different components"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Contributed to User Guide and Developer Guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "** Helped other team members with issues regarding GitHub, project setup, etc."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportexport]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "---"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 60
    }
  },
  {
    "path": "docs/team/jillWangJill.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d Jiarui Wang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d PROJECT: UniLA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* UniLA is a desktop utilities application designed for\tNUS students who are typing oriented."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Major enhancement*: added *the ability to add reminder to event, pop up the reminder and delete reminder*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** What it does: reminds user a certain interval before specific event. And the reminder will be automatically deleted after 1 minutes showing up."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Justification: This feature improves the product significantly because event list\u0027s information is too complicated for one to find the most important event. This automatic function can help in reminding the planned thing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Highlights: This enhancement enlarge the functionality of UniLA and requires deep understanding of model and logic design. It also requires connecting with UI and storage parts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Minor enhancement*: add GUI of reminder function."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "add loading and saving reminder list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003djillwangjill[RepoSense Project Code Dashboard]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Managed releases `v1.2` - `v1.3` on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Check the developer guide to ensure basic information correctness. Updated User Guide, Developer Guide, About Us pages."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Prepare user guide screenshot at the beginning of project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Added issues to issue tracker."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Helped teammates with their problems regarding github and the project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** AddR command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** ListFr and ListR command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** DeleteR command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Update User Guide, Developer Guide and About US page."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W16-1/main/pull/104[#104]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:  https://github.com/CS2103-AY1819S2-T12-2/main/issues/77[#77],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-2/main/issues/74[#74], https://github.com/CS2103-AY1819S2-T12-2/main/issues/72[#72]，https://github.com/CS2103-AY1819S2-T12-2/main/issues/69[#69]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "include::../UserGuide.adoc[tag\u003dReminderFeatures-JillWangJill]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummary-JillWangJill]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminderComponent-jillWangJill]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminderFeature-jillWangJill]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "---"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 79
    }
  },
  {
    "path": "docs/team/jwl1997.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d jwl1997 - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d PROJECT: UniLA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* UniLA is a desktop utilities application designed for\tNUS students who are typing oriented."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *Major enhancement*: build event list component and enable add, delete, list, edit events and the connection between persons and events"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** What it does: allows the NUS student to store and manage events and add participants from their contact list to events"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Justification: This feature improves the product significantly because it can help NUS students to better manage upcoming events"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Highlights: This enhancement complements the exist functionality of AddressBook4 and greatly increase the capacity of product."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "It required significant effort to build a new event model and various logic commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003djwl1997[RepoSense Project Code Dashboard]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*** Set up team repo and integrate Travis, Coveralls, Appveyor to team repo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*** Set team repo to be RepoSense-compatible"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W16-1/main/pull/31[#31], https://github.com/CS2103-AY1819S2-W16-1/main/pull/80[#80], https://github.com/CS2103-AY1819S2-W16-1/main/pull/95[#95]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/cs2103-ay1819s2-w14-4/main/issues/126[#126], https://github.com/cs2103-ay1819s2-w14-4/main/issues/113[#113], https://github.com/cs2103-ay1819s2-w14-4/main/issues/119[#119], https://github.com/cs2103-ay1819s2-w14-4/main/issues/122[#122], https://github.com/cs2103-ay1819s2-w14-4/main/issues/135[#135])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "include::../UserGuide.adoc[tag\u003deventcomponet-jwl1997]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummary-jwl1997]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventlistcomponent-jwl1997]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcontacteventconnection-jwl1997]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duseCases-jwl1997]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 69
    }
  },
  {
    "path": "docs/team/yinya998.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d yinya998 - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d PROJECT: UniLA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "UniLA is a desktop utilities application designed for university students who are typing oriented to easily manage their contact and event lists. The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* *Major enhancement*: upgrade the *find command* and implement *findE command*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** What it does: These two commands support different search patterns. The `find` allows users to search for people in contact list easily. Users can search a person through exact keyword match, fuzzy keyword match and wildcard keyword match."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "The `findE` command allows users to search for events in event list. Users can search for an event through exact keyword match, search for events before, on or after a certain date, and search for the event with a certain duration."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Justification: This feature is important and efficient for users to manage a large list of contacts and events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Highlights: The enhancement and implementation involves reorganizing different classes, adding new predicates classes and command classes. The implementation is challenging because different search patterns are used and the optimal algorithm is chosen after a detailed analysis of the alternatives."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Credits: Levenshtein Distance is used to calculate the similarity between keywords. [https://www.cnblogs.com/ivanyb/archive/2011/11/25/2263356.html[Original Blogger]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Implement photo command which allows user to add photo to the person in the contact list. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Implement personInfo fxml to display personal information on contact list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dyinya998[RepoSense Project Code Dashboard]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** Setup netlify test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** Added issues to issue tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** Updated User Guide, Developer Guide, About Us pages."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** Helped teammates with their problems regarding github and the project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** PRs reviewed: https://github.com/CS2103-AY1819S2-W16-1/main/pull/117[#117], https://github.com/CS2103-AY1819S2-W16-1/main/pull/210[#210]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:  https://github.com/CS2103-AY1819S2-W15-3/main/issues/184[#184], https://github.com/CS2103-AY1819S2-W15-3/main/issues/177[#177], https://github.com/CS2103-AY1819S2-W15-3/main/issues/164[#164]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupgradefindcommand-yinya998]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindEcommand-yinya998]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "include::../UserGuide.adoc[tag\u003dphotocommand-yinya998]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindCommand-yinya998]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dphotoCommand-yinya998]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 69
    }
  },
  {
    "path": "docs/team/yonggqiii.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d Foo Yong Qi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d PROJECT: UniLA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "UniLA is a desktop utilities application designed for NUS students who are typing oriented. UniLA provides an efficient and convenient solution for managing contact list and event list, contact interactions, planning meetings, setting up reminders, etc. The application is primarily concerned with CLI (Command Line Interface) Interaction, with a simple and intuitive GUI provided."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* *Major enhancement*: added *the ability to automatically create a meeting event with persons*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** What it does: It allows users to create a meeting event among certain people, by automatically"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*** searching for the earliest available timeslot among the requested people to meet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*** creating the meeting event in the event list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*** connecting the requested people to the event and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "*** setting the details of the event (such as name, description etc.) as requested."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Justification: This feature improves the product significantly because as the user\u0027s contact and event list grows, there may be too many people and events stored and it will be difficult for the user to find a suitable timing to meet the people he needs to. Thus the app must be able to conveniently help the user do so."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* *Minor enhancement*: added a switch command which allows the user to switch between person and events list view. All commands will also automatically switch accordingly or terminate depending on the current view of the window as the command was entered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dyonggqiii[RepoSense Project Code Dashboard]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Improved UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Did cosmetic tweaks to existing contents of the README and updated UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** PRs reviewed (with non-trivial review comments): [https://github.com/CS2103-AY1819S2-W16-1/main/pull/100[#100]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Helped team to fix bugs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "** Maintained issue tracker"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmeet]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "include::../UserGuide.adoc[tag\u003dswitch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmeet]"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        logic.getThreadJob().stopExecuting();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "daDangminh": 3,
      "jwl1997": 1,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The reminder index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1d persons listed:\\n Exact Search:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"\\n %s\\n Fuzzy Search:\\n%s\\nWildcard Search:\\n%s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"Window is in wrong view\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_RETRY_IN_PERSONS_VIEW \u003d \"Bringing you back to persons view.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" Please re-enter command\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_RETRY_IN_EVENTS_VIEW \u003d \"Bringing you back to events view. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Please re-enter command\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yinya998": 4,
      "yonggqiii": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Get file name from file path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static String getName(String filepath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new java.io.File(filepath).getName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Copy source file to specified directory."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param src"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param dir"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static String copyFile(String src, String dir) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String filename \u003d getName(src);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        File dirFile \u003d new File(dir);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!dirFile.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            System.out.println(\"mkdir: \" + dirFile.mkdirs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String dest \u003d dir + filename;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (dest.equals(src)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return dest;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Files.copy(Paths.get(src), new FileOutputStream(Paths.get(dest).toFile()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return dest;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 38,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        T deserializedFile \u003d fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return deserializedFile;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Optional\u003cT\u003e jsonFileOptional \u003d Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return jsonFileOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(w -\u003e w.equalsIgnoreCase(preppedWord));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * fuzzy search."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param sentence"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return true is fuzzysearch is matched"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean matchFuzzySearch(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(w -\u003e similarity(w, preppedWord) \u003e 0.7);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * get similarity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param str1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param str2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return similarity of two strings"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static double similarity(String str1, String str2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            double levenshteinDistance \u003d (double) getLevenshteinDistance(str1, str2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return (1 - levenshteinDistance / (double) Math.max(str1.length(), str2.length()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return 0.1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * wildcard search."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param sentence"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return true is wildcard search is matched"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean matchWildcardSearch(String sentence, String word) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(w -\u003e match(w, preppedWord));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * wildcard match. * matched any number of a-z,0-9."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param sentence"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean match(String sentence, String word) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        sentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        word \u003d word.toLowerCase();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        word \u003d word.replaceAll(\"\\\\*\", \"[a-zA-Z0-9]*\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return sentence.matches(word);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * get min of three numbers"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param one"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param two"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param three"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private static int min(int one, int two, int three) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int min \u003d one;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (two \u003c min) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            min \u003d two;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (three \u003c min) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            min \u003d three;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * get Levenshtein distance."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param str1"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param str2"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return levenshtein distance of two strings"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static int getLevenshteinDistance(String str1, String str2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int n \u003d str1.length();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int m \u003d str2.length();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        char ch1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        char ch2;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int temp;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (n \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return m;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (m \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return n;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int[][] d \u003d new int[n + 1][m + 1];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        for (i \u003d 0; i \u003c\u003d n; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            d[i][0] \u003d i;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        for (j \u003d 0; j \u003c\u003d m; j++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            d[0][j] \u003d j;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d n; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            ch1 \u003d str1.charAt(i - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            for (j \u003d 1; j \u003c\u003d m; j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                ch2 \u003d str2.charAt(j - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (ch1 \u003d\u003d ch2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    temp \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    temp \u003d 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                d[i][j] \u003d min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + temp);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return d[n][m];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Returns true if {@code date} represents a valid date string"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * e.g. 2019-02-04 is valid"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * 2019-8-3, 2019-2-31 is invalid"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean isDateValid(String date) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            dateFormat.parse(date);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 164,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @throws WrongViewException If the window is in the wrong view as command was entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    CommandResult execute(String commandText, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, ParseException, WrongViewException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return reminder check thread job"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ReminderCheck getThreadJob();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of reminders */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Selected event in the filtered event list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * null if no event is selected."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @see seedu.address.model.Model#selectedEventProperty()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    ReadOnlyProperty\u003cEvent\u003e selectedEventProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Sets the selected event in the filtered event list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedEvent(Event)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    void setSelectedEvent(Event event);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Selected reminder in the filtered reminder list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * null if no reminder is selected."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @see seedu.address.model.Model#selectedReminderProperty()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Sets the selected reminder in the filtered reminder list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedReminder(Reminder)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void setSelectedReminder(Reminder reminder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 24,
      "yonggqiii": 26,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final ReminderCheck threadJob;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        threadJob \u003d new ReminderCheck(this.model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Thread checkThread \u003d new Thread(threadJob);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        checkThread.start();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderCheck getThreadJob() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return threadJob;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(String commandText, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, ParseException, WrongViewException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            commandResult \u003d command.execute(model, history, windowViewState);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return model.getFilteredReminderList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return model.getSelectedPerson();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ReadOnlyProperty\u003cEvent\u003e selectedEventProperty() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return model.selectedEventProperty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return model.selectedReminderProperty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model.setSelectedReminder(reminder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 27,
      "daDangminh": 9,
      "yonggqiii": 18,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ReminderCheck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *Represent the thread that reminder checking use"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderCheck implements Runnable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Thread t;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private volatile boolean execute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private List\u003cReminder\u003e lastShownReminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //private ReminderList deleteReminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private boolean deleteChange \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ReminderCheck(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        lastShownReminder \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * The inner logic of reminder check. Did a while loop to check which reminders should be shown, which reminders"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * should be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"reminder testing thread is running now\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.execute \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            while (this.execute) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                //System.out.println(\"one model passing\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                ObservableList\u003cReminder\u003e deleteReminderList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                for (int i \u003d 0; i \u003c lastShownReminder.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    Reminder r \u003d lastShownReminder.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    //System.out.println(\"compare result\"+r.compareWithCurrentTime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    if (!r.getShow() \u0026\u0026 r.compareWithCurrentTime()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        model.setShow(r, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                                //System.out.println(\"should be running right after true\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                                model.addShownReminder(r);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                                model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    } else if (model.isReminderPassed(r)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        //the reminder should end."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        model.setNotShow(r, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        deleteChange \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        deleteReminderList.add(r);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                if (deleteChange) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        public void run() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            for (int i \u003d 0; i \u003c deleteReminderList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                                model.deleteReminder(deleteReminderList.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    deleteChange \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                /*if (model.getAddressBook().getReminderList().size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    ReminderList temp \u003d model.getAddressBook().getReminderListTest();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    for (int i \u003d 0; i \u003c model.getAddressBook().getReminderList().size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        Reminder tempR \u003d temp.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        System.out.println(\"name is\" + tempR.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        System.out.println(\"time is\" + tempR.getInterval());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        System.out.println(\"show is\" + tempR.getShow());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        System.out.println(\"not show is\" + tempR.getNotShow());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        System.out.println(\"--------------------------------------------------------\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                //model.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                System.out.println(\"-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-\");*/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    Thread.sleep(1000);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Call this method when javafx terminate"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void stopExecuting() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.execute \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"[\" + PREFIX_PHOTO + \"PHOTOPATH] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, shouldSwitch);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 2,
      "yonggqiii": 6,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddECommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class AddECommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_LABEL + \"LABEL\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_NAME + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CS2103 project meeting \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_VENUE + \"com1 level2 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_START_TIME + \"2019-01-31 14:00:00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_END_TIME + \"2019-01-31 16:00:00 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_LABEL + \"URGENT\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Creates an AddECommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public AddECommand(Event event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //Reminder r \u003d new Reminder(toAdd, \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //if (model.hasReminder(r)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //    throw new CommandException(\"Duplicate Reminder\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //model.addReminder(r);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, shouldSwitch);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof AddECommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddECommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 10,
      "jwl1997": 69,
      "yonggqiii": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Adds a event to the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class AddRCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addR\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an reminder to the address book. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Parameters: EVENT_LIST_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + PREFIX_INTERVAL + \"INTERVAL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + PREFIX_UNIT + \"UNIT\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + PREFIX_INTERVAL + \"3 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + PREFIX_UNIT + \"MIN\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_PASSED_REMINDER \u003d \"This reminder\u0027s time already passed\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Unit unit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Interval interval;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Creates an AddRCommand to add the specified {@code index, interval, unit}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public AddRCommand(Index index, Interval interval, Unit unit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(interval);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event eventToAdd \u003d lastShownEventList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminderToAdd \u003d new Reminder(eventToAdd, interval, \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(reminderToAdd.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (model.hasReminder(reminderToAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (model.isReminderPassed(reminderToAdd)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new CommandException(MESSAGE_PASSED_REMINDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model.addReminder(reminderToAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean showFullReminder \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reminderToAdd),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                false, false, shouldSwitch, showFullReminder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!(other instanceof AddRCommand)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddRCommand e \u003d (AddRCommand) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 unit.equals(e.unit)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 interval \u003d\u003d e.interval;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 1,
      "yonggqiii": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history, WindowViewState view)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /** The application should switch views. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final boolean switchView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /** The application should show full reminder. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final boolean showFullReminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //private final WindowViewState switchReminderView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean switchView) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.switchView \u003d switchView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.showFullReminder \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean switchView,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                         boolean showFullReminder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.switchView \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.showFullReminder \u003d showFullReminder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified showHelp and exit fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.switchView \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.showFullReminder \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isSwitchView() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return switchView;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isShowFullReminder() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return showFullReminder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 25,
      "yonggqiii": 11,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConnectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Connects a contact with an event in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ConnectCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"connect\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Connects a contact with an event \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"by the index number used in the displayed contact and event list. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_EVENT_INDEX + \"EVENT_INDEX \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_EVENT_INDEX + \"2 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONNECT_SUCCESS \u003d \"Connect contact %1$s and event %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_NOT_CONNECT \u003d \"Fail to connect the contact and event.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    //public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This contact has already been connected to this event.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact has already been connected to this event.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index contactIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param contactIndex of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param eventIndex   of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ConnectCommand(Index contactIndex, Index eventIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(contactIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.contactIndex \u003d contactIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cPerson\u003e lastShownContactList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (contactIndex.getZeroBased() \u003e\u003d lastShownContactList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToAdd \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person contactToAdd \u003d lastShownContactList.get(contactIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (eventToAdd.hasPerson(contactToAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d addContactToEvent(contactToAdd, eventToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.setEvent(eventToAdd, updatedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(updatedEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CONNECT_SUCCESS, contactToAdd, eventToAdd),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                false, false, shouldSwitch);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Creates and returns a {@code Event} after connecting {@code contactToAdd}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * with {@code eventToAdd}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Event addContactToEvent(Person contactToAdd, Event eventToAdd) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assert contactToAdd !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assert eventToAdd !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event cloned \u003d eventToAdd.clone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        cloned.addPerson(contactToAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return cloned;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!(other instanceof ConnectCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand e \u003d (ConnectCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return contactIndex.equals(e.contactIndex)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 eventIndex.equals(e.eventIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 104,
      "yonggqiii": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.updateFilteredEventList(i -\u003e true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState !\u003d WindowViewState.PERSONS) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new WrongViewException(Messages.MESSAGE_WRONG_VIEW + \". \" + Messages.MESSAGE_RETRY_IN_PERSONS_VIEW);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownEventList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (lastShownEventList.get(i).hasPerson(personToDelete)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Event toRemove \u003d lastShownEventList.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Event toAdd \u003d toRemove.clone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                toAdd.removePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                model.setEvent(toRemove, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                model.setSelectedEvent(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 13,
      "jwl1997": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteECommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Deletes an event identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DeleteECommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DeleteECommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //List\u003cReminder\u003e lastShownReminderList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState !\u003d WindowViewState.EVENTS) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new WrongViewException(Messages.MESSAGE_WRONG_VIEW + \". \" + Messages.MESSAGE_RETRY_IN_EVENTS_VIEW);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //model.deleteReminder(eventToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof DeleteECommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteECommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 4,
      "jwl1997": 54,
      "yonggqiii": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.DeleteRState.EVNET_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.parser.DeleteRState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Deletes an event identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class DeleteRCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteR\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \": Deletes the reminders related to event with identified index number.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Or Deletes the reminders with identified index number.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Parameters: [n/EventIndex] \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" n/1\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Parameters: [r/ReminderIndex] \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" r/1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DELETE_RELATED_REMINDER_SUCCESS \u003d \"Deleted Reminder related with event: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_RELATED_REMINDER_NOT_FOUND \u003d \"No reminders are related with this event!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final DeleteRState version;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public DeleteRCommand(Index targetIndex, DeleteRState version) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        List\u003cReminder\u003e lastShownReminderList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (version \u003d\u003d EVNET_INDEX) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (!model.isRemove(eventToDelete)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new CommandException(MESSAGE_RELATED_REMINDER_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            model.deleteReminder(eventToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean showFullReminder \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RELATED_REMINDER_SUCCESS, eventToDelete),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    false, false, shouldSwitch, showFullReminder);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownReminderList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder reminderToDelete \u003d lastShownReminderList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            model.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean showFullReminder \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    false, false, shouldSwitch, showFullReminder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                || (other instanceof DeleteRCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DisconnectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Connects a contact with an event in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DisconnectCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"disconnect\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Disconnects a contact with an event \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"by the index number used in the displayed contact and event list. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"CONTACT_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_EVENT_INDEX + \"EVENT_INDEX \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_EVENT_INDEX + \"2 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_DISCONNECT_SUCCESS \u003d \"Disconnect contact %1$s and event %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONTACT_NOT_EXIST \u003d \"This contact is not connected with event.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index contactIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param contactIndex of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param eventIndex   of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DisconnectCommand(Index contactIndex, Index eventIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(contactIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.contactIndex \u003d contactIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cPerson\u003e lastShownContactList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e lastShownEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (contactIndex.getZeroBased() \u003e\u003d lastShownContactList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d lastShownEventList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToRemove \u003d lastShownEventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person contactToRemove \u003d lastShownContactList.get(contactIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!eventToRemove.hasPerson(contactToRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(MESSAGE_CONTACT_NOT_EXIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d removeContactFromEvent(contactToRemove, eventToRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.setEvent(eventToRemove, updatedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(updatedEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DISCONNECT_SUCCESS, contactToRemove, eventToRemove),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                false, false, shouldSwitch);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Creates and returns a {@code Event} after disconnecting {@code contactToRemove}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * with {@code eventToRemove}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Event removeContactFromEvent(Person contactToRemove, Event eventToRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assert contactToRemove !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assert eventToRemove !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event cloned \u003d eventToRemove.clone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        cloned.removePerson(contactToRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return cloned;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!(other instanceof DisconnectCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand e \u003d (DisconnectCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return contactIndex.equals(e.contactIndex)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 eventIndex.equals(e.eventIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 105,
      "yonggqiii": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState !\u003d WindowViewState.PERSONS) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new WrongViewException(Messages.MESSAGE_WRONG_VIEW + \". \" + Messages.MESSAGE_RETRY_IN_PERSONS_VIEW);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.updateFilteredEventList(i -\u003e true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        for (Event e : eventsList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (e.hasPerson(personToEdit)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Event toAdd \u003d e.clone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                toAdd.removePerson(personToEdit);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                toAdd.addPerson(editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                model.setEvent(e, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Photo updatedPhoto \u003d editPersonDescriptor.getPhoto().orElse(personToEdit.getPhoto());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedPhoto, updatedTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        private Photo photo;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            setPhoto(toCopy.photo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        public void setPhoto(Photo photo) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            this.photo \u003d photo;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        public Optional\u003cPhoto\u003e getPhoto() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return Optional.ofNullable(photo);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 13,
      "yonggqiii": 20,
      "-": 226
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditECommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Edits the details of an existing event in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EditECommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \"VENUE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END_TIME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"[\" + PREFIX_LABEL + \"LABEL] \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_VENUE + \"BIZ2 level4 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + PREFIX_LABEL + \"IMPORTANT\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditECommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState !\u003d WindowViewState.EVENTS) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new WrongViewException(Messages.MESSAGE_WRONG_VIEW + \". \" + Messages.MESSAGE_RETRY_IN_EVENTS_VIEW);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Venue updatedVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DateTime updatedStartTime \u003d editEventDescriptor.getStartDateTime().orElse(eventToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DateTime updatedEndTime \u003d editEventDescriptor.getEndDateTime().orElse(eventToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Label updatedLabel \u003d editEventDescriptor.getLabel().orElse(eventToEdit.getLabel());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Set\u003cPerson\u003e updatedPersons \u003d editEventDescriptor.getPersons().orElse(eventToEdit.getPersons());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!updatedStartTime.isBefore(updatedEndTime)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new CommandException(\"End time should not be earlier than start time\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Event(updatedName, updatedDescription, updatedVenue, updatedStartTime, updatedEndTime, updatedLabel,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                updatedPersons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!(other instanceof EditECommand)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand e \u003d (EditECommand) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private DateTime startDateTime;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private DateTime endDateTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private Label label;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private Set\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private ReminderList reminders;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setStartDateTime(toCopy.startDateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setLabel(toCopy.label);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setPersons(toCopy.persons);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            setReminders(toCopy.reminders);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, venue, startDateTime, endDateTime, label);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cDateTime\u003e getStartDateTime() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(startDateTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setLabel(Label label) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.label \u003d label;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cLabel\u003e getLabel() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return Optional.ofNullable(label);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Sets {@code persons} to this object\u0027s {@code persons}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * A defensive copy of {@code persons} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setPersons(Set\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.persons \u003d (persons !\u003d null) ? new HashSet\u003c\u003e(persons) : null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Returns an unmodifiable reminderList, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code reminders} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cReminderList\u003e getReminders() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return (reminders !\u003d null) ? Optional.of(reminders) : Optional.empty();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Sets {@code reminders} to this object\u0027s {@code reminders}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * A defensive copy of {@code reminders} is used internally."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setReminders(ReminderList reminders) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.reminders \u003d (reminders !\u003d null) ? new ReminderList() : null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Returns an unmodifiable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code persons} is null."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Optional\u003cSet\u003cPerson\u003e\u003e getPersons() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return (persons !\u003d null) ? Optional.of(Collections.unmodifiableSet(persons)) : Optional.empty();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    \u0026\u0026 getStartDateTime().equals(e.getStartDateTime())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 278,
      "yonggqiii": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Import new contacts from the specified file path into the current address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Contacts successfully exported!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Export command has run into a problem.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    protected static final String MESSAGE_INVALID_FILEPATH \u003d \"Please input a valid file path\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \": Exports contacts using a path to a .json file.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Parameters: PATH\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" data/exported.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBook addressBookExported;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ExportCommand(String fileName, Path exportPath, Tag tagExport) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(exportPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.filePath \u003d exportPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.tag \u003d tagExport;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.addressBookExported \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // modify addressBookExported here"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        exportAddressBook(tag, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Path path \u003d Paths.get(filePath + \"/\" + fileName + \".json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            addressBookStorage.saveAddressBook(addressBookExported);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * Saves all people with tag matching the tag param into the to be exported address book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @throws DuplicatePersonException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private void exportAddressBook(Tag tag, Model model) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ObservableList\u003cEvent\u003e exportEvents \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ObservableList\u003cReminder\u003e exportReminders \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (tag.equals(new Tag(\"shouldnotbethistag\"))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            addressBookExported.setPersons(exportPeople);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            ArrayList\u003cPerson\u003e exportAddition \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            for (int i \u003d 0; i \u003c exportPeople.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                if (exportPeople.get(i).getTags().contains(tag)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    exportAddition.add(exportPeople.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            addressBookExported.setPersons(exportAddition);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookExported.setEvents(exportEvents);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookExported.setReminders(exportReminders);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ExportCommand e \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 113,
      "yonggqiii": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Finds and lists all persons in address book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * whose field(name, address, email, phone) contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": Finds all persons whose field contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" yinya alex  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"  (if there\u0027s no prefix, all fields will be searched)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" p/123456 t/teammate\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example3: \" + COMMAND_WORD + \" t/friends teammate\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    //private final NameContainsKeywordsPredicate predicate;//todo delete?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_NO_PARAMETER \u003d \"Must provide at least one parameters to find.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public FindCommand(Predicate\u003cPerson\u003e predicate, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                       ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        StringBuilder exactResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        exactSearchList.forEach(name -\u003e exactResult.append(name).append(\", \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        StringBuilder fuzzyResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        fuzzySearchList.forEach(name -\u003e fuzzyResult.append(name).append(\", \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        StringBuilder wildcardResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        wildcardSearchList.forEach(name -\u003e wildcardResult.append(name).append(\", \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        exactSearchList.size() + fuzzySearchList.size() + wildcardSearchList.size(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        exactResult.toString(), fuzzyResult.toString(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        wildcardResult.toString()), false, false, shouldSwitch);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Predicate\u003cPerson\u003e getPredicate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 46,
      "yonggqiii": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindECommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Finds events in address book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * whose field(name, description, venue, starttime, endtime, label)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class FindECommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String COMMAND_WORD_TIME \u003d \"findE time/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String COMMAND_WORD_DURATION \u003d \"findE duration/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": finds events whose field contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"the specified keywords (case-insensitive)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: [n/EventName] [d/Description] [v/Venue] [s/StartTime] [e/EndTime] [l/Label]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" talk \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"  (if there\u0027s no prefix, all fields will be searched)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" v/library l/urgent\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_NO_PARAMETER \u003d \"Must provide at least one parameters to find.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_FINDE_INVALID_FORMAT \u003d \"The searching format is invalid.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_INVLID_DATE \u003d \"The searching date is invalid.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE_FINDE_TIME \u003d COMMAND_WORD_TIME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": finds events whose start date before, equal or \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"after the searching date \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"alternatively user can use ytd, today, tmr to search for events in yesterday, today and tomorrow \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: operatorsYYYY-MM-DD (acceptable operators are \u003c, \u003d and \u003e)\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD_TIME + \"\u003c2019-03-27\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD_TIME + \"today\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_FINDE_ONE_KEYWORD \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \"findE command should only have one keyword with no whitespace. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    + \"\\n eg. findE time/\u003c4 (there should be no whitespace betweek \u0027\u003c\u0027 and \u00274\u0027)\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE_FINDE_DURATION \u003d COMMAND_WORD_DURATION"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": finds events whose duration is smaller, equal to or larger than \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"the searching period \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: operatorsN (N should be a positive integer that represent duration in hours\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_DURATION + \"\u003c2\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_FINDE_DURATION_OUTOFBOUND \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \"Duration should be an positive integer representing hours within within range [1,24]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Predicate\u003cEvent\u003e predicate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public FindECommand(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState \u003d\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                false, false, shouldSwitch);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof FindECommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindECommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Predicate\u003cEvent\u003e getPredicate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 76,
      "yonggqiii": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.reminder.DuplicateReminderException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Import new contacts from the specified file path into the current address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contacts successfully imported!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    protected static final String MESSAGE_INVALID_FILE \u003d \"Please input a valid file path\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \": Imports contacts using a path to a .json file.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Parameters: PATH\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" data/contacts.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private AddressBook addressBookImported;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ImportCommand(Path importPath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(importPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        this.filePath \u003d importPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            if (addressBookStorage.readAddressBook(filePath).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                this.addressBookImported \u003d new AddressBook(addressBookStorage.readAddressBook().get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                ObservableList\u003cPerson\u003e people \u003d addressBookImported.getPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                ObservableList\u003cEvent\u003e events \u003d addressBookImported.getEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                ObservableList\u003cReminder\u003e reminders \u003d addressBookImported.getReminderList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                for (int i \u003d 0; i \u003c people.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        model.addPerson(people.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        // if duplicate, do nothing, continue on with next contact"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        model.addEvent(events.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    } catch (DuplicateEventException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        // if duplicate, do nothing, continue on with next event"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                for (int i \u003d 0; i \u003c reminders.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        model.addReminder(reminders.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    } catch (DuplicateReminderException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        // if duplicate, do nothing, continue on with next reminder"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                \u0026\u0026 filePath.equals(((ImportCommand) other).filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "daDangminh": 103,
      "yonggqiii": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        System.out.println(\"list, window view state \" + windowViewState);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, shouldSwitch);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yonggqiii": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListECommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Lists all events in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ListECommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, shouldSwitch);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 26,
      "yonggqiii": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFrCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Lists all events in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ListFrCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listFr\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all reminders\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"list R, window view state \" + windowViewState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean showFullReminder \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, shouldSwitch, showFullReminder);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListRCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Lists all events in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ListRCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listR\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed pop-up reminders\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"list R, window view state \" + windowViewState);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        boolean showFullReminder \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, shouldSwitch, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MeetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Block;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * {@code MeetCommand} forms a meeting event with a list of persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * @author yonggqiii"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meet\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting event successfully created\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \": Plans a meeting with contacts.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 4 5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Operation would result in similar events.\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" Change parameters and run command again, or consider adding the contacts to\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"%s at %s.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_CANNOT_FIND_MEETING_EVENT \u003d \"Cannot find a suitabe timeslot.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Please suggest different parameters, perhaps a later end time.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING \u003d \"There must be at least two valid people\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" to form a meeting event. Please re-enter tags and/or indices.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_BLOCK_BOUNDS_TOO_TIGHT \u003d \"No possible event can be created with these \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"block bounds. Consider expanding the time restrictions.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private DateTime start;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private DateTime end;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Block block;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Creates a MeetCommand using a Set of integers based on the one-based index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param indices The set of integers to be processed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public MeetCommand(Set\u003cIndex\u003e indices, Name name, Description description, Venue venue, DateTime start,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                       DateTime end, Label label, Duration d, Set\u003cTag\u003e tags, Block block) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.block \u003d block;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.duration \u003d d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Model must exist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Get the people that need to be operated on."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        List\u003cPerson\u003e listOfPeopleShown \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cPerson\u003e personsOperatedOn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            for (Index i : indices) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                personsOperatedOn.add(listOfPeopleShown.get(i.getZeroBased()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Get people who have the tags entered and add them to the list of participants."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        listOfPeopleShown.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .filter(x -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    Set\u003cTag\u003e combined \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    combined.addAll(x.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    combined.addAll(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    if (combined.size() \u003d\u003d tags.size() + x.getTags().size()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    return true; })"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .forEach(x -\u003e personsOperatedOn.add(x));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // If there are not enough people to meet in the end, let the user know to re-enter persons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (personsOperatedOn.size() \u003c 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * Check if the user requested for a possible start date that is before the current time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * If the date time entered is before the current time, set the earliest event time to be"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * the next hour from the current time instead."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (toDateTime(start).isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            start \u003d new DateTime(LocalDateTime.now()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withNano(0)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .plusHours(1)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .format(DateTime.DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Create the earliest possible meeting given the start time."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Transform the event such that it fits the block. If the event does not fit the block"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // despite transformation with no other events hindering it, then the block bounds are too tight."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event meeting \u003d transformEventToFitBlock(new Event(name, description, venue, start,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new DateTime(toDateTime(start).plus(duration).format(DateTime.DATE_TIME_FORMATTER)), label));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!doesEventFallWithinBlock(meeting)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new CommandException(MESSAGE_BLOCK_BOUNDS_TOO_TIGHT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Ensure that all events will be retrieved from the model."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.updateFilteredEventList(x -\u003e true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Reduce meetingEvent to get the earliest event given other potentially clashing events."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event meetingEvent \u003d model.getFilteredEventList()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    for (Person p : personsOperatedOn) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        if (e.hasPerson(p)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                })"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .sorted(new EventComparator())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .reduce(meeting, (x, y) -\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    LocalDateTime xEnd \u003d toDateTime(x.getEndDateTime());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    LocalDateTime yStart \u003d toDateTime(y.getStartDateTime());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    LocalDateTime yEnd \u003d toDateTime(y.getEndDateTime());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    if (toDateTime(x.getStartDateTime()).isAfter(yEnd)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                            || !xEnd.isAfter(yStart)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        return x;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    LocalDateTime start \u003d yEnd;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    return transformEventToFitBlock(new Event(name, description, venue,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                            new DateTime(start.format(DateTime.DATE_TIME_FORMATTER)),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                            new DateTime(start.plus(duration).format(DateTime.DATE_TIME_FORMATTER)), label));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // If the meeting event is after the specified end point, then no possible event"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // can be created."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (toDateTime(meetingEvent.getEndDateTime()).isAfter(toDateTime(end))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_FIND_MEETING_EVENT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Add people to the meeting event."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        meetingEvent.addPerson(personsOperatedOn.toArray(new Person[0]));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Check for duplicate events."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        for (Event e : model.getFilteredEventList()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (e.isSameEvent(meetingEvent)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_EVENT, meetingEvent.getName(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        meetingEvent.getStartDateTime()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Add, select and commit event."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.addEvent(meetingEvent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.setSelectedEvent(meetingEvent);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Switch view to show the new event."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean shouldSwitch \u003d windowViewState !\u003d WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \" + meetingEvent.getName(), false, false,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                shouldSwitch);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Change DateTime to LocalDateTime class."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param d The DateTime to change."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The LocalDateTime equivalent."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private LocalDateTime toDateTime(DateTime d) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return LocalDateTime.parse(d.toString(), DateTime.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Transforms an {@code event} such that the start time fits the earliest point of the block."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * A copy of the {@code event} is return if it is transformed, to maintain its state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param x The event to transform."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The resulting event."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Event transformEventToFitBlock(Event x) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (doesEventFallWithinBlock(x)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return x;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalDateTime start \u003d toDateTime(x.getStartDateTime());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalDateTime tester \u003d start.with(block.getFirst());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (start.isBefore(tester) || start.equals(tester)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            start \u003d tester;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            start \u003d tester.plusDays(1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Event(x.getName(), x.getDescription(), x.getVenue(),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new DateTime(start.format(DateTime.DATE_TIME_FORMATTER)),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new DateTime(start.plus(duration).format(DateTime.DATE_TIME_FORMATTER)),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                x.getLabel());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Checks if the event falls within the provided block."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param e The event to check."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return True if the event falls within the block, false otherwise."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private boolean doesEventFallWithinBlock(Event e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalDateTime start \u003d toDateTime(e.getStartDateTime());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalDateTime end \u003d toDateTime(e.getEndDateTime());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (block.isWithinBlock(start, end)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!(o instanceof MeetCommand)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand other \u003d (MeetCommand) o;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e combinedIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        combinedIndices.addAll(this.indices);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        combinedIndices.addAll(other.indices);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cTag\u003e combinedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        combinedTags.addAll(this.tags);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        combinedTags.addAll(other.tags);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return combinedIndices.size() \u003d\u003d other.indices.size()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 combinedIndices.size() \u003d\u003d this.indices.size()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 combinedTags.size() \u003d\u003d other.tags.size()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 combinedTags.size() \u003d\u003d this.tags.size()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.block.equals(other.block)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.name.equals(other.name)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.description.equals(other.description)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.venue.equals(other.venue)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.start.equals(other.start)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.end.equals(other.end)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.label.equals(other.label)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.duration.equals(other.duration);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Comparator for chronological events."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    static class EventComparator implements Comparator\u003cEvent\u003e {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        public int compare(Event e1, Event e2) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            final DateTimeFormatter pattern \u003d DateTime.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return LocalDateTime.parse(e1.getStartDateTime().toString(), pattern).compareTo("
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    LocalDateTime.parse(e2.getStartDateTime().toString(), pattern));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 290
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PhotoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.model.person.Photo.DEFAULT_PHOTOPATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * {@code PhotoCommand} forms a setting photo event with a list of persons."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": " *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * @author yinya998x\\"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhotoCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Command type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"photo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String COMMAND_SUB \u003d \"clear\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Messages."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_ADD_PHOTO_SUCCESS \u003d \"Added photo to person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_CLEAR_PHOTO_SUCCESS \u003d \"Cleared photo to person\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \": Adds photo to the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Parameters: INDEX PHOTO_PATH\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 /users/alice/desktop/photo.jpeg\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_INVALID_PHOTOPATH \u003d \"The path of the photo is invalid\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_SIZE_EXCEED \u003d \"The size of the photo should below 20MB\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_IMAGE \u003d \"The file is not an image\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PhotoCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PhotoCommand(Index targetIndex, Photo photo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(photo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Parse target index and path of photo from string arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param arguments"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PhotoCommand parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String argumentsTirm \u003d arguments.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] strings \u003d argumentsTirm.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.targetIndex \u003d ParserUtil.parseIndex(strings[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int indexDigit \u003d strings[0].length();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String path \u003d argumentsTirm.substring(indexDigit).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d new Photo(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, WrongViewException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState !\u003d WindowViewState.PERSONS) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new WrongViewException(Messages.MESSAGE_WRONG_VIEW + \". \" + Messages.MESSAGE_RETRY_IN_PERSONS_VIEW);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Person person \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (photo.getPath().equals(COMMAND_SUB)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                photo.setPath(DEFAULT_PHOTOPATH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String path \u003d personToEdit.getPhoto().getPath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                File file \u003d new File(path);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (!isValidPhotoPath(photo.getPath())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return new CommandResult(MESSAGE_INVALID_PHOTOPATH);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (!isImage(photo.getPath())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return new CommandResult(MESSAGE_FILE_NOT_IMAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (!isPhotoSizeWithinRange(photo.getPath())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return new CommandResult(MESSAGE_SIZE_EXCEED);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String user \u003d System.getProperty(\"user.name\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String dir \u003d \"data/\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String copyPath \u003d FileUtil.copyFile(photo.getPath(), String.format(dir, user));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                photo.setPath(copyPath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            editPersonDescriptor.setPhoto(photo);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(person, editPersonDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (!person.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            model.setPerson(person, editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (photo.getPath().equals(DEFAULT_PHOTOPATH)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return new CommandResult(MESSAGE_CLEAR_PHOTO_SUCCESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_ADD_PHOTO_SUCCESS, photo));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new CommandResult(Photo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if a file is an image"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param pathName"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return isImage"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean isImage(String pathName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            File file \u003d new File(pathName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return ImageIO.read(file) !\u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check path whether or not valid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param pathName"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean isValidPhotoPath(String pathName) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (pathName.equals(\"data/DEFAULT_PHOTO.png\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(pathName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        File f \u003d new File(pathName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return f.exists();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check the size of the file is within range"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param pathName"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean isPhotoSizeWithinRange(String pathName) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        File file \u003d new File(pathName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        double sizeInMb \u003d ((double) file.length()) / 1024 / 1024;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return sizeInMb \u003c 20;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * create person object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param personToEdit"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param editPersonDescriptor"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private static Person createEditedPerson("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Person personToEdit, EditCommand.EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Address updatedAddress \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Photo updatedPhoto \u003d editPersonDescriptor.getPhoto().orElse(personToEdit.getPhoto());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new Person(updatedName, updatedPhone,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                updatedEmail, updatedAddress, updatedPhoto, updatedTags);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof PhotoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((PhotoCommand) other).targetIndex)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.photo.equals(((PhotoCommand) other).photo)); // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Index getTargetIndex() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void setTargetIndex(Index targetIndex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Photo getPhoto() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return photo;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void setPhoto(Photo photo) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 232,
      "yonggqiii": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_SELECT_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (windowViewState \u003d\u003d WindowViewState.PERSONS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            model.setSelectedPerson(filteredPersonList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.setSelectedEvent(filteredEventList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_EVENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 14,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Switches the view from Person view to Events view, and vice versa."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the next view.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" will switch to Events view from Person view, and vice versa\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String SHOWING_SWITCH_MESSAGE \u003d \"Switched to %s view.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return windowViewState \u003d\u003d WindowViewState.PERSONS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                ? new CommandResult(String.format(SHOWING_SWITCH_MESSAGE, \"events\"), false, false, true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                : new CommandResult(String.format(SHOWING_SWITCH_MESSAGE, \"persons\"), false, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, WindowViewState windowViewState)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/WrongViewException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Represents an error which occurs during execution of a {@code Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class WrongViewException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public WrongViewException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_PHOTO, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Photo photo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PHOTO).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photo \u003d new Photo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photo \u003d ParserUtil.parsePhoto(argMultimap.getValue(PREFIX_PHOTO).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, photo, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yinya998": 10,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddECommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.AddECommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class AddECommandParser implements Parser\u003cAddECommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddECommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * and returns an AddECommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public AddECommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                        PREFIX_END_TIME, PREFIX_LABEL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                PREFIX_END_TIME, PREFIX_LABEL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddECommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Name name \u003d ParserUtilForEvent.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Description description \u003d ParserUtilForEvent.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Venue venue \u003d ParserUtilForEvent.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DateTime startTime \u003d ParserUtilForEvent.parseDateTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DateTime endTime \u003d ParserUtilForEvent.parseDateTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Label label \u003d ParserUtilForEvent.parseLabel(argMultimap.getValue(PREFIX_LABEL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!startTime.isBefore(endTime)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(\"End time should not be earlier than start time\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event event \u003d new Event(name, description, venue, startTime, endTime, label);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new AddECommand(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.AddRCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Parses input arguments and creates a new AddRCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class AddRCommandParser implements Parser\u003cAddRCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * and returns an AddRCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public AddRCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_INDEX, PREFIX_INTERVAL, PREFIX_UNIT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Unit unit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Interval interval;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            index \u003d ParserUtilForReminder.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            unit \u003d ParserUtilForReminder.parseUnit(argMultimap.getValue(PREFIX_UNIT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (java.util.NoSuchElementException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            interval \u003d ParserUtilForReminder.parseIntervalAndUnit(argMultimap.getValue(PREFIX_INTERVAL).get(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    argMultimap.getValue(PREFIX_UNIT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (java.util.NoSuchElementException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new AddRCommand(index, interval, unit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.AddECommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.AddRCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ConnectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.DeleteECommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.DeleteRCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.DisconnectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.EditECommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.FindECommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ListECommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ListFrCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.ListRCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.MeetCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case AddECommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new AddECommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        case AddRCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new AddRCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case ConnectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new ConnectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case DisconnectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new DisconnectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case EditECommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new EditECommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new SwitchCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case DeleteECommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new DeleteECommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        case FindECommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new FindECommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        case ListECommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new ListECommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case MeetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new MeetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        case PhotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new PhotoCommand().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        case DeleteRCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new DeleteRCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        case ListFrCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new ListFrCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        case ListRCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new ListRCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 29,
      "yinya998": 10,
      "daDangminh": 3,
      "jwl1997": 18,
      "yonggqiii": 6,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final Prefix PREFIX_TAG_EXPORT \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Prefix PREFIX_PHOTO \u003d new Prefix(\"ph/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_LABEL \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_INDEX \u003d new Prefix(\"ci/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Prefix PREFIX_EVENT_INDEX \u003d new Prefix(\"ei/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Prefix PREFIX_INTERVAL \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Prefix PREFIX_UNIT \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"duration/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Prefix PREFIX_BLOCK \u003d new Prefix(\"block/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_RELATED_EVENT_INDEX \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_INDEX \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 4,
      "yinya998": 3,
      "daDangminh": 3,
      "jwl1997": 7,
      "yonggqiii": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ConnectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.ConnectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Parses input arguments and creates a new ConnectCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ConnectCommandParser implements Parser\u003cConnectCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ConnectCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * and returns an ConnectCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ConnectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_INDEX, PREFIX_EVENT_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_INDEX, PREFIX_EVENT_INDEX)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConnectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index eventIndex \u003d ParserUtilForEvent.parseIndex(argMultimap.getValue(PREFIX_EVENT_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new ConnectCommand(contactIndex, eventIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteECommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.DeleteECommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Parses input arguments and creates a new DeleteECommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DeleteECommandParser implements Parser\u003cDeleteECommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteECommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * and returns an DeleteECommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DeleteECommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            Index index \u003d ParserUtilForEvent.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new DeleteECommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteECommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_RELATED_EVENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.DeleteRState.EVNET_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.DeleteRState.REMINDER_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.commands.DeleteRCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Parses input arguments and creates a new DeleteECommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class DeleteRCommandParser implements Parser\u003cDeleteRCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteECommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * and returns an DeleteECommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public DeleteRCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            //System.out.println(\"parser checking, \"+ trimmedArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_RELATED_EVENT_INDEX, PREFIX_REMINDER_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Index eventIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Index reminderIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_RELATED_EVENT_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            eventIndex \u003d ParserUtilForReminder.parseIndex"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    (argMultimap.getValue(PREFIX_REMINDER_RELATED_EVENT_INDEX).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new DeleteRCommand(eventIndex, EVNET_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            reminderIndex \u003d ParserUtilForReminder.parseIndex(argMultimap.getValue(PREFIX_REMINDER_INDEX).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new DeleteRCommand(reminderIndex, REMINDER_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        throw new ParseException(\"DeleteR field is not correct. Must fill one.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  * DeleteR defines the state of delete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public enum DeleteRState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    EVNET_INDEX , REMINDER_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DisconnectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.DisconnectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Parses input arguments and creates a new DisconnectCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DisconnectCommandParser implements Parser\u003cDisconnectCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisconnectCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * and returns an DisconnectCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DisconnectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_INDEX, PREFIX_EVENT_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_INDEX, PREFIX_EVENT_INDEX)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisconnectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index eventIndex \u003d ParserUtilForEvent.parseIndex(argMultimap.getValue(PREFIX_EVENT_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new DisconnectCommand(contactIndex, eventIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditECommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.EditECommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Parses input arguments and creates a new EditECommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EditECommandParser implements Parser\u003cEditECommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditECommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * and returns an EditECommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditECommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                        PREFIX_END_TIME, PREFIX_LABEL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            index \u003d ParserUtilForEvent.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditECommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor editEventDescriptor \u003d new EditECommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setName(ParserUtilForEvent.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setDescription(ParserUtilForEvent.parseDescription(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setVenue(ParserUtilForEvent.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setStartDateTime(ParserUtilForEvent.parseDateTime(argMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    .getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setEndDateTime(ParserUtilForEvent.parseDateTime(argMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    .getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LABEL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            editEventDescriptor.setLabel(ParserUtilForEvent.parseLabel(argMultimap.getValue(PREFIX_LABEL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(EditECommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new EditECommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG_EXPORT, PREFIX_PATH,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                PREFIX_FILENAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String[] preambleArgs \u003d argMultiMap.getPreamble().split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // if all prefixes contain empty values"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_PATH)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                || preambleArgs.length \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String tag \u003d argMultiMap.getValue(PREFIX_TAG_EXPORT).orElse(\"shouldnotbethistag\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String filePath \u003d argMultiMap.getValue(PREFIX_PATH).orElse(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String fileName \u003d argMultiMap.getValue(PREFIX_FILENAME).orElse(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Tag tagExport \u003d new Tag(tag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new ExportCommand(fileName, path, tagExport);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_NO_PARAMETER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if there\u0027s a prefix in the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private boolean hasPrefix(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] commands \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return (commands[0].contains(PREFIX_NAME.toString())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_EMAIL.toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_ADDRESS.toString())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_PHONE.toString())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_TAG.toString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException(MESSAGE_NO_PARAMETER + \u0027\\n\u0027 + FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e predicateResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cString\u003e exactSearchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cString\u003e fuzzySearchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cString\u003e wildcardSearchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // if there\u0027s no prefix, find in all fields"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!hasPrefix(trimmedArgs)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] splitedKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (splitedKeywords.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        MESSAGE_NO_PARAMETER + \"\\n\" + FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(splitedKeywords),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new PhoneContainsKeywordPredicate(Arrays.asList(splitedKeywords),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EmailContainsKeywordPredicate(Arrays.asList(splitedKeywords),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new AddressContainsKeywordPredicate(Arrays.asList(splitedKeywords),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new TagsContainsKeywordPredicate(Arrays.asList(splitedKeywords),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Predicate\u003cPerson\u003e[] predicatesList \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new FindCommand(predicateResult, exactSearchList, fuzzySearchList, wildcardSearchList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // create find Command according to the specific prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] nameList \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            checkNullKeywords(nameList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(nameList),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] emailList \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            checkNullKeywords(emailList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EmailContainsKeywordPredicate(Arrays.asList(emailList),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] phoneList \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            checkNullKeywords(phoneList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new PhoneContainsKeywordPredicate(Arrays.asList(phoneList),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] addressList \u003d argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            checkNullKeywords(addressList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new AddressContainsKeywordPredicate(Arrays.asList(addressList),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] tagList \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            checkNullKeywords(tagList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new TagsContainsKeywordPredicate(Arrays.asList(tagList),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    exactSearchList, fuzzySearchList, wildcardSearchList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new FindCommand(predicateResult,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                exactSearchList, fuzzySearchList, wildcardSearchList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if there is no argument after prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void checkNullKeywords(String[] keywordsList) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (keywordsList[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    MESSAGE_NO_PARAMETER + \"\\n\" + FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 119,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindECommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.commons.util.StringUtil.isDateValid;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindECommand.MESSAGE_FINDE_DURATION_OUTOFBOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindECommand.MESSAGE_FINDE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindECommand.MESSAGE_FINDE_ONE_KEYWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindECommand.MESSAGE_NO_PARAMETER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.commands.FindECommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.DurationPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.EndTimeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.LabelContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.StartTimeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.TimePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.event.VenueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Parses input arguments and creates a new FindECommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class FindECommandParser implements Parser\u003cFindECommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindECommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * and returns an FindECommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public FindECommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                  MESSAGE_NO_PARAMETER + \"\\n\" + FindECommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //return new FindECommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                PREFIX_END_TIME, PREFIX_LABEL, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cPredicate\u003cEvent\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cEvent\u003e predicateResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // if there\u0027s no prefix, find in all fields"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!hasPrefix(trimmedArgs)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String[] splitedKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EventNameContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new VenueContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new StartTimeContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new EndTimeContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicates.add(new LabelContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Predicate\u003cEvent\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new FindECommand(predicateResult);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            // create findE Command according to the specific prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] keywordsList \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(keywordsList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new EventNameContainsKeywordsPredicate(Arrays.asList(keywordsList)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] descriptionList \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(descriptionList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new DescriptionContainsKeywordsPredicate(Arrays.asList(descriptionList)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] venueList \u003d argMultimap.getValue(PREFIX_VENUE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(venueList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new VenueContainsKeywordsPredicate(Arrays.asList(venueList)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] startTimeList \u003d argMultimap.getValue(PREFIX_START_TIME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(startTimeList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new StartTimeContainsKeywordsPredicate(Arrays.asList(startTimeList)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] endTimeList \u003d argMultimap.getValue(PREFIX_END_TIME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(endTimeList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new EndTimeContainsKeywordsPredicate(Arrays.asList(endTimeList)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LABEL).isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] labelList \u003d argMultimap.getValue(PREFIX_LABEL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(labelList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                predicates.add(new LabelContainsKeywordsPredicate(Arrays.asList(labelList)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] timeList \u003d argMultimap.getValue(PREFIX_TIME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(timeList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (timeList.length !\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            MESSAGE_FINDE_ONE_KEYWORD + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_TIME);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String commandSubString \u003d timeList[0].trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                char op \u003d commandSubString.charAt(0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (op \u003d\u003d \u0027\u003c\u0027 || op \u003d\u003d \u0027\u003e\u0027 || op \u003d\u003d \u0027\u003d\u0027) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (isDateValid(commandSubString.substring(1))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        predicates.add(new TimePredicate(commandSubString));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        throw new ParseException("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                FindECommand.MESSAGE_INVLID_DATE + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_TIME);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                } else if (commandSubString.equals(\"today\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        || commandSubString.equals(\"ytd\") || commandSubString.equals(\"tmr\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    predicates.add(new TimePredicate(commandSubString));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            MESSAGE_FINDE_INVALID_FORMAT + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_TIME);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String[] durationList \u003d argMultimap.getValue(PREFIX_DURATION).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                checkNullKeywords(durationList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (durationList.length !\u003d 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            MESSAGE_FINDE_ONE_KEYWORD + \"\\n\" + FindECommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                String commandSubString \u003d durationList[0].trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                char op \u003d commandSubString.charAt(0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (op !\u003d \u0027\u003c\u0027 \u0026\u0026 op !\u003d \u0027\u003e\u0027 \u0026\u0026 op !\u003d \u0027\u003d\u0027) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            MESSAGE_FINDE_INVALID_FORMAT + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_DURATION);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    int offset \u003d Integer.parseInt(commandSubString.substring(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (offset \u003c\u003d 0 || offset \u003e\u003d 24) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        throw new ParseException("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                MESSAGE_FINDE_DURATION_OUTOFBOUND + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_DURATION);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    predicates.add(new DurationPredicate(op, offset));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            MESSAGE_FINDE_DURATION_OUTOFBOUND + \"\\n\" + FindECommand.MESSAGE_USAGE_FINDE_DURATION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Predicate\u003cEvent\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            predicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return new FindECommand(predicateResult);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    MESSAGE_NO_PARAMETER + \"\\n\" + FindECommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if there\u0027s a prefix in the command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private boolean hasPrefix(String command) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] commands \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return (commands[0].contains(PREFIX_NAME.toString())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_DESCRIPTION.toString())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_VENUE.toString())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_START_TIME.toString())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_END_TIME.toString()))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || commands[0].contains(PREFIX_LABEL.toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * check if there is no argument after prefix"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void checkNullKeywords(String[] keywordsList) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (keywordsList[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    MESSAGE_NO_PARAMETER + \"\\n\" + FindECommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // remove leading and trailing white space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // TODO: check invalid args"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Path filePath \u003d Paths.get(trimmedArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MeetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LABEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.MeetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Block;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Parses input arguments and creates a new MeetCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * @author yonggqiii"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommandParser implements Parser\u003cMeetCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"New meeting\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Meeting with contacts.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"NUS\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"0001-01-01 00:00:00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"9999-12-31 23:59:59\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_LABEL \u003d \"meeting\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"0 2 0 0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_BLOCK \u003d \"00:00 00:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MeetCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * and returns an MeetCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public MeetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Split tokenize arguments into multimap."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_VENUE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        PREFIX_END_TIME, PREFIX_LABEL, PREFIX_DURATION, PREFIX_TAG, PREFIX_BLOCK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // User must indicate at least one person to meet, either through tags, or through indices."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Tag validity is checked within the MeetCommand implementation itself."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (preamble.isEmpty() \u0026\u0026 argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Parse each argument, if not present, set a default value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Name name \u003d ParserUtilForEvent.parseName(argMultimap.getValue(PREFIX_NAME).orElse(DEFAULT_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Description description \u003d ParserUtilForEvent.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .orElse(DEFAULT_DESCRIPTION));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Venue venue \u003d ParserUtilForEvent.parseVenue(argMultimap.getValue(PREFIX_VENUE).orElse(DEFAULT_VENUE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DateTime startTime \u003d ParserUtilForEvent.parseDateTime(argMultimap.getValue(PREFIX_START_TIME)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .orElse(DEFAULT_START_TIME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DateTime endTime \u003d ParserUtilForEvent.parseDateTime(argMultimap.getValue(PREFIX_END_TIME)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .orElse(DEFAULT_END_TIME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Label label \u003d ParserUtilForEvent.parseLabel(argMultimap.getValue(PREFIX_LABEL).orElse(DEFAULT_LABEL));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Duration duration \u003d ParserUtilForEvent.parseDuration(argMultimap.getValue(PREFIX_DURATION)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .orElse(DEFAULT_DURATION));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block blockList \u003d ParserUtil.parseBlock(argMultimap.getValue(PREFIX_BLOCK).orElse(DEFAULT_BLOCK));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cInteger\u003e indices \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!preamble.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                int[] splitArgs \u003d Stream.of(argMultimap.getPreamble().split(\" \"))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        .mapToInt(x -\u003e Integer.parseInt(x)).toArray();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                for (int i \u003d 0; i \u003c splitArgs.length; ++i) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    if (splitArgs[i] \u003c 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        throw new ParseException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    indices.add(splitArgs[i]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e actualIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        for (Integer i : indices) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            actualIndices.add(Index.fromOneBased(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new MeetCommand(actualIndices, name, description, venue, startTime, endTime, label, duration, tagList,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                blockList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Block;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static Photo parsePhoto(String photo) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(photo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String trimmedPhoto \u003d photo.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!Photo.isValidPhotoPath(trimmedPhoto)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new Photo(trimmedPhoto);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Parses a {@code String} into a {@code Block}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param s                 The String representation of this block."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return                  The resulting block."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @throws ParseException   If the String cannot be parsed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block parseBlock(String s) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String t \u003d s;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        t.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        boolean isAntiBlock \u003d t.charAt(0) \u003d\u003d \u0027!\u0027;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (isAntiBlock) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            t \u003d t.substring(1).trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        switch (t) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.MORNING:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.morning(isAntiBlock);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.AFTERNOON:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.afternoon(isAntiBlock);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.EVENING:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.evening(isAntiBlock);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.NIGHT:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.night(isAntiBlock);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.MIDNIGHT:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.midnight(isAntiBlock);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.SCHOOL:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.school(isAntiBlock);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.BREAKFAST:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.breakfast(isAntiBlock);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.LUNCH:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.lunch(isAntiBlock);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.DINNER:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.dinner(isAntiBlock);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.SUPPER:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.supper(isAntiBlock);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        case Block.BRUNCH:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return Block.brunch(isAntiBlock);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String[] times \u003d t.split(\" \");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (times.length !\u003d 2) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException(Block.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalTime first;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalTime second;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            first \u003d LocalTime.parse(times[0]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            second \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException(Block.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(first, second, isAntiBlock);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 16,
      "yonggqiii": 74,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilForEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains utility methods used for parsing strings for event class in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ParserUtilForEvent {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration must be in the format D H M S\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        + \" where D, H, M and S are all integers.\\nThe duration must also be non-negative.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses a {@code String venue} into an {@code Venue}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Venue parseVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!Venue.isValidVenue(trimmedVenue)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Venue(trimmedVenue);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code DateTime}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Parses a {@code String label} into an {@code Label}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws ParseException if the given {@code label} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static Label parseLabel(String label) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(label);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String trimmedLabel \u003d label.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!Label.isValidLabelName(trimmedLabel)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new ParseException(Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Label(trimmedLabel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param duration The string to be parsed into a duration."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The resulting duration."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @throws ParseException If the duration entered throws a DateTimeParseException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *                        or if there are not enough arguments provided or the duration"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *                        is negative."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String[] trimmedDuration \u003d duration.trim().split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Duration d;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (trimmedDuration.length !\u003d 4) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            d \u003d Duration.parse(String.format(\"P%sDT%sH%sM%s.0S\", trimmedDuration[0],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    trimmedDuration[1], trimmedDuration[2], trimmedDuration[3]));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (d.isNegative()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 109,
      "yonggqiii": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilForReminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Contains utility methods used for parsing strings for event class in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ParserUtilForReminder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Parses a {@code String unit} into an {@code Unit}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws ParseException if the given {@code unit} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static Unit parseUnit(String unit) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String trimmedUnit \u003d unit.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Unit.isValidUnit(trimmedUnit)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new Unit(trimmedUnit);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Parses a {@code String interval} into an {@code Interval}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static Interval parseIntervalAndUnit(String interval, String unit) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(interval, unit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String trimmedInterval \u003d interval.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String trimmedUnit \u003d unit.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Unit.isValidUnit(trimmedUnit)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Interval.isValidInterval(trimmedInterval, trimmedUnit)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new ParseException(Interval.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"parse interval now, test from Jill\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new Interval(trimmedInterval, trimmedUnit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final ReminderList reminders;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.htm"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    //event-level operation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderList getReminderListTest() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Replaces the contents of the reminder list with {@code remindersreminder}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //-reminder operation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * check whether this reminder\u0027s time is passed or not"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isReminderPassed(Reminder reminder) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminder.deleteReminder();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Adds an reminder to the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * The reminder must not already exist in the address book."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.add(reminder);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * connect AddR command with GUI"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addShownReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.addShown(reminder);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        r.setShow(v);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setNotShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        r.setNotShow(v);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(editedReminder);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * To remove reminder with specific event"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param key"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void removeReminder(Event key) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Check whether there are event to be removed"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isRemove(Event target) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders.isRemove(target);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 113,
      "jwl1997": 61,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    Predicate\u003cReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    void deleteEvent(Event event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    void setEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Selected event in the filtered event list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * null if no event is selected."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    ReadOnlyProperty\u003cEvent\u003e selectedEventProperty();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns the selected event in the filtered event list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * null if no event is selected."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    Event getSelectedEvent();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the selected event in the filtered event list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    void setSelectedEvent(Event event);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dreminder"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if an reminder with the same identity as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * returns true if an reminder time is passed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    boolean isReminderPassed(Reminder reminder);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * set the reminder\u0027s notshown value"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param r"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void setNotShow(Reminder r, boolean v);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * set the remidner show value"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param r"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void setShow(Reminder r, boolean v);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * The reminder must exist in the address book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void deleteReminder(Reminder reminder);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void deleteReminder(Event event);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    boolean isRemove(Event target);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Adds the given reminder."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code reminder} must not already exist in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void addShownReminder(Reminder reminder);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    Reminder getSelectedReminder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void setSelectedReminder(Reminder reminder);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 50,
      "jwl1997": 52,
      "-": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final SimpleObjectProperty\u003cEvent\u003e selectedEvent \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final SimpleObjectProperty\u003cReminder\u003e selectedReminder \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        filteredEvents.addListener(this::ensureSelectedEventIsValid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(versionedAddressBook.getReminderList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        filteredReminders.addListener(this::ensureSelectedReminderIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        versionedAddressBook.removeEvent(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        versionedAddressBook.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return versionedAddressBook.hasReminder(reminder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isReminderPassed(Reminder reminder) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return versionedAddressBook.isReminderPassed(reminder);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.removeReminder(target);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void deleteReminder(Event target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.removeReminder(target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isRemove(Event target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return versionedAddressBook.isRemove(target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.addReminder(reminder);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addShownReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"model, should run now \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.addShownReminder(reminder);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"model, should finish now \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.setShow(r, v);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setNotShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.setNotShow(r, v);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        versionedAddressBook.setReminder(target, editedReminder);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return filteredReminders;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        filteredReminders.setPredicate(predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get())"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedEvent.get(), other.selectedEvent.get());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected event \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ReadOnlyProperty\u003cEvent\u003e selectedEventProperty() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return selectedEvent;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return selectedEvent.getValue();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (event !\u003d null \u0026\u0026 !filteredEvents.contains(event)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        selectedEvent.setValue(event);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Ensures {@code selectedEvent} is a valid event in {@code filteredEvents}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private void ensureSelectedEventIsValid(ListChangeListener.Change\u003c? extends Event\u003e change) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (selectedEvent.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                // null is always a valid selected event, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            boolean wasSelectedEventReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedEvent.getValue());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (wasSelectedEventReplaced) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                // Update selectedEvent to its new value."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedEvent.getValue());"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                selectedEvent.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            boolean wasSelectedEventRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    .anyMatch(removedEvent -\u003e selectedEvent.getValue().isSameEvent(removedEvent));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            if (wasSelectedEventRemoved) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                // Select the event that came before it in the list,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                // or clear the selection if there is no such event."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                selectedEvent.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected reminder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return selectedReminder;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder getSelectedReminder() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return selectedReminder.getValue();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (reminder !\u003d null \u0026\u0026 !filteredReminders.contains(reminder)) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        selectedReminder.setValue(reminder);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Ensures {@code selectedReminder} is a valid reminder in {@code filteredReminders}."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private void ensureSelectedReminderIsValid(ListChangeListener.Change\u003c? extends Reminder\u003e change) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (selectedReminder.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                // null is always a valid selected reminder, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean wasSelectedReminderReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedReminder.getValue());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (wasSelectedReminderReplaced) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                // Update selectedReminder to its new value."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedReminder.getValue());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                selectedReminder.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            boolean wasSelectedReminderRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    .anyMatch(removedReminder -\u003e selectedReminder.getValue().isSameReminder(removedReminder));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (wasSelectedReminderRemoved) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                // Select the reminder that came before it in the list,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                // or clear the selection if there is no such reminder."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                selectedReminder.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 130,
      "jwl1997": 98,
      "-": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns an unmodifiable view of the reminders list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * This list will not contain any duplicate reminders."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    ReminderList getReminderListTest();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 9,
      "jwl1997": 8,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Path eventListFilePath \u003d Paths.get(\"data\", \"eventlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Path reminderListFilePath \u003d Paths.get(\"data\", \"reminderlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return eventListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Path getReminderListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminderListFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 10,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Block.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Block class defines a block of time, in hours and minutes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class Block {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String AFTERNOON \u003d \"afternoon\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String BREAKFAST \u003d \"breakfast\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String BRUNCH \u003d \"brunch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DINNER \u003d \"dinner\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String EVENING \u003d \"evening\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String LUNCH \u003d \"lunch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Block must be a set of two times in HH:MM format\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" separated by a single space. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"It can be negated with a ! prefix.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \"For example, 12:00 14:00 denotes a block of time between 12pm and 2pm,\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            + \" and !23:00 2:00 denotes a block of time not between 11pm and 2am.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MIDNIGHT \u003d \"midnight\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String MORNING \u003d \"morning\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String NIGHT \u003d \"night\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String SCHOOL \u003d \"school\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String SUPPER \u003d \"supper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final LocalTime first;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final LocalTime second;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final Predicate\u003cLocalDateTime\u003e tester;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final Duration d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final boolean nonBlock;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Constructs a block instance using two LocalTimes, and whether the block should be negated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param first     The start time of the block."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param second    The end time of the block."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated   Whether the block of time is negated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public Block(LocalTime first, LocalTime second, boolean negated) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(first);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        requireNonNull(second);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // If first equals second, then this block is a non-block and all events fall within this block."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (first.equals(second)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            nonBlock \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            nonBlock \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // If the block is negated, simply reverse first and second."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (negated) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.second \u003d first;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.first \u003d second;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.first \u003d first;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.second \u003d second;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting up testers."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Predicate\u003cLocalDateTime\u003e firstPredicate \u003d x -\u003e this.first.isBefore(x.toLocalTime())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                || this.first.equals(x.toLocalTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Predicate\u003cLocalDateTime\u003e secondPredicate \u003d x -\u003e this.second.isAfter(x.toLocalTime())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                || this.second.equals(x.toLocalTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting the duration of this block."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (this.first.isBefore(this.second)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            tester \u003d firstPredicate.and(secondPredicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            d \u003d Duration.between(this.first, this.second);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            tester \u003d firstPredicate.or(secondPredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            d \u003d Duration.between(this.second, this.first);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents the morning, from 6am to noon."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this morning block should be negated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The morning block (negated or otherwise)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block morning(boolean negated) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"06:00\"), LocalTime.NOON, negated);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents the afternoon, from noon to 6pm."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this afternoon block should be negated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The afternoon block (negated or otherwise)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block afternoon(boolean negated) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.NOON, LocalTime.parse(\"18:00\"), negated);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents the evening, from 6pm to 8pm."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this evening block should be negated."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The evening block (negated or otherwise)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block evening(boolean negated) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\"), negated);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents night, from 8pm to midnight."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this night block should be negated."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The night block (negated or otherwise)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block night(boolean negated) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"20:00\"), LocalTime.MIDNIGHT, negated);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents midnight, from 12am to 6am."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this midnight block should be negated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The midnight block (negated or otherwise)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block midnight(boolean negated) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.MIDNIGHT, LocalTime.parse(\"06:00\"), negated);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents school hours, from 8am to 6pm."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this school block should be negated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The school block (negated or otherwise)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block school(boolean negated) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"08:00\"), LocalTime.parse(\"18:00\"), negated);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents breakfast, from 7am to 10am."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this breakfast block should be negated."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The breakfast block (negated or otherwise)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block breakfast(boolean negated) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"07:00\"), LocalTime.parse(\"10:00\"), negated);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents lunch, from 12pm to 2pm."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this lunch block should be negated."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The lunch block (negated or otherwise)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block lunch(boolean negated) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"), negated);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents dinner, from 5pm to 8pm."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this dinner block should be negated."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The dinner block (negated or otherwise)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block dinner(boolean negated) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"17:00\"), LocalTime.parse(\"20:00\"), negated);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents supper, from 9pm to 1am."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this supper block should be negated."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The supper block (negated or otherwise)."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block supper(boolean negated) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"21:00\"), LocalTime.parse(\"01:00\"), negated);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Returns a {@code block} that represents brunch, from 10am to 1pm."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param negated Whether this brunch block should be negated."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The brunch block (negated or otherwise)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static Block brunch(boolean negated) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return new Block(LocalTime.parse(\"10:00\"), LocalTime.parse(\"13:00\"), negated);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Checks if two LocalDateTimes form a period that is within this block."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param start The start datetime."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param end   The end datetime."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return      True if the two LocalDateTimes fall within this block."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public boolean isWithinBlock(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (nonBlock) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!tester.test(start)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!tester.test(end)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Duration durationToSecond;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (start.toLocalTime().isBefore(second)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            durationToSecond \u003d Duration.between(start.toLocalTime(), second);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            durationToSecond \u003d Duration.between(second, start.toLocalTime());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (durationToSecond.toSeconds() \u003c Duration.between(start, end).toSeconds()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Gets the first {@code LocalTime} of this block."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The first LocalTime."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public LocalTime getFirst() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return nonBlock ? \"any time\" : first + \" to \" + second;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!(o instanceof Block)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block other \u003d (Block) o;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (this.nonBlock \u0026\u0026 other.nonBlock) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return this.first.equals(other.first)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 this.second.equals(other.second);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/DateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents an event\u0027s date and time in the event list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: immutable;is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Datetime should be of the format of yyyy-mm-dd hh:mm:ss, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"please check whether your date and time are valid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s+\\\\d{2}:\\\\d{2}:\\\\d{2}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param dateTime A valid dateTime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        value \u003d dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a given string is a valid date time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        boolean isValidDateTime \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                format.parse(test);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                isValidDateTime \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                isValidDateTime \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return isValidDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof seedu.address.model.event.DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.event.DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if this DateTime is before or equal another DateTime"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean isBefore(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        boolean isStartBeforeEnd \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (other instanceof seedu.address.model.event.DateTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            DateTime endDateTime \u003d (seedu.address.model.event.DateTime) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Date start \u003d format.parse(this.value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Date end \u003d format.parse(endDateTime.value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                if (start.before(end) || start.equals(end)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    isStartBeforeEnd \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                isStartBeforeEnd \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return isStartBeforeEnd;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 91,
      "yonggqiii": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents a description of an event in the event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: immutable;is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof seedu.address.model.event.Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.event.Description) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/DescriptionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getDescription().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/DurationPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code duration} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class DurationPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final int offset;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final int op;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final int millisecondOneHour \u003d 3600000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public DurationPredicate(char op, int offsett) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.offset \u003d offsett;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.op \u003d op;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String eventStartDateS \u003d event.getStartDateTime().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String eventEndDateS \u003d event.getEndDateTime().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Date eventStartDateD \u003d dateFormat.parse(eventStartDateS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Date eventEndDateD \u003d dateFormat.parse(eventEndDateS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            long eventDuration \u003d eventEndDateD.getTime() - eventStartDateD.getTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            int durationMSec \u003d offset * millisecondOneHour;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (op \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return eventDuration \u003c durationMSec;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else if (op \u003d\u003d \u0027\u003e\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return eventDuration \u003e durationMSec;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else if (op \u003d\u003d \u0027\u003e\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return (eventDuration - durationMSec) \u003c 1 \u0026\u0026 (eventDuration - durationMSec) \u003e -1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return false; // throw new ParseException(String.format(MESSAGE_FINDE_TIME), e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof DurationPredicate// instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 offset \u003d\u003d (((DurationPredicate) other).offset)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 op \u003d\u003d (((DurationPredicate) other).op)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EndTimeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code end time} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class EndTimeContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public EndTimeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getEndDateTime().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof EndTimeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((EndTimeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents an event in the event list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    //identity"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Label label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private ReminderList reminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Event(Name name, Description description, Venue venue, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                 Label label) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(name, description, venue, startDateTime, endDateTime, label);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Event(Name name, Description description, Venue venue, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                 Label label, Set\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(name, description, venue, startDateTime, endDateTime, label);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Event(Name name, Description description, Venue venue, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                 Label label, Set\u003cPerson\u003e persons, ReminderList reminders) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(name, description, venue, startDateTime, endDateTime, label);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.reminders \u003d reminders;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Label getLabel() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns an immutable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Set\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Collections.unmodifiableSet(persons);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderList getReminders() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} connect with this event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Adds a person as participant to the event."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void addPerson(Person... toAdd) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        for (Person p : toAdd) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (persons.contains(p)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            persons.add(p);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Removes the person from the event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void removePerson(Person toRemove) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!persons.remove(toRemove)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if both event of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean isSameEvent(seedu.address.model.event.Event otherEvent) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 otherEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Creates a clone of this event."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return  The cloned event."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public Event clone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event clone \u003d new Event("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.name,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.venue,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.startDateTime,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.endDateTime,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                this.label"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        clone.addPerson(this.persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if both events have all the same fields."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!(other instanceof seedu.address.model.event.Event)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        seedu.address.model.event.Event otherEvent \u003d (seedu.address.model.event.Event) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cPerson\u003e personsInEvent \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        personsInEvent.addAll(this.persons);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        personsInEvent.addAll(otherEvent.persons);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (personsInEvent.size() \u003e this.persons.size() || personsInEvent.size() \u003e otherEvent.persons.size()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getLabel().equals(getLabel())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return Objects.hash(name, description, venue, startDateTime, endDateTime, label);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(\" Label: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(getLabel())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(\" Start Date Time: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(\" End Date Time: \")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .append(getEndDateTime());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 11,
      "jwl1997": 192,
      "yonggqiii": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code venue} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Label.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents a label for event in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidLabelName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class Label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Labels names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public final String labelName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Constructs a {@code Label}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param labelName A valid label name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Label(String labelName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(labelName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        checkArgument(isValidLabelName(labelName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.labelName \u003d labelName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a given string is a valid label name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static boolean isValidLabelName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof Label // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 labelName.equals(((Label) other).labelName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return labelName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return \u0027[\u0027 + labelName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getLabelName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return labelName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 3,
      "jwl1997": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/LabelContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code label} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class LabelContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public LabelContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getLabel().labelName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof LabelContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((LabelContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents a person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                     + \"or numerical value only\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String INVALID_REGEX \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (test.matches(INVALID_REGEX)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof seedu.address.model.event.Name // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 fullName.equals(((seedu.address.model.event.Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/StartTimeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code end time} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class StartTimeContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public StartTimeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getStartDateTime().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof StartTimeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((StartTimeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/TimePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code venue} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class TimePredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public TimePredicate(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            char op \u003d keyword.charAt(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String eventDateS \u003d event.getStartDateTime().toString().substring(0, 10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Date eventDateD \u003d dateFormat.parse(eventDateS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (op \u003d\u003d \u0027\u003c\u0027) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Date dateToBeProcessed \u003d dateFormat.parse(keyword.substring(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return dateToBeProcessed.after(eventDateD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else if (op \u003d\u003d \u0027\u003e\u0027) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Date dateToBeProcessed \u003d dateFormat.parse(keyword.substring(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return dateToBeProcessed.before(eventDateD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else if (op \u003d\u003d \u0027\u003d\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Date dateToBeProcessed \u003d dateFormat.parse(keyword.substring(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return dateToBeProcessed.equals(eventDateD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                int offset \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                if (keyword.equals(\"ytd\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    offset \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                } else if (keyword.equals(\"tmr\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    offset \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Calendar c1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                c1.add(Calendar.DATE, offset);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Date todayDate \u003d dateFormat.parse(dateFormat.format(c1.getTime()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return todayDate.equals(eventDateD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return false; // throw new ParseException(String.format(MESSAGE_FINDE_TIME), e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof TimePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keyword.equals(((TimePredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code persons} must not contain duplicate events."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Venue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Represents an event\u0027s venue in event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Guarantees: immutable;is valid as declared in {@link #isValidVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Venue can take any values, and it should not be blank, and \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "             + \"should not contain numerical values only\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * The first character of the venue must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String INVALID_REGEX \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Constructs an {@code Venue}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * @param venue A valid venue."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        value \u003d venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static boolean isValidVenue(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (test.matches(INVALID_REGEX)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                || (other instanceof seedu.address.model.event.Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.address.model.event.Venue ) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/VenueContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code venue} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class VenueContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public VenueContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getVenue().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof VenueContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((VenueContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank, and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            + \"it cannot only have numerical values\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String INVALID_REGEX \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (test.matches(INVALID_REGEX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 7,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class AddressContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public AddressContainsKeywordPredicate(List\u003cString\u003e keywords, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                           ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String address \u003d person.getAddress().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(address, keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(address, keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(address, keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof AddressContainsKeywordPredicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmailContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class EmailContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public EmailContainsKeywordPredicate(List\u003cString\u003e keywords, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                         ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String email \u003d person.getEmail().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(email, keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(email, keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(email, keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof EmailContainsKeywordPredicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank, and it cannot \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                     + \"only contains numerical values\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String INVALID_REGEX \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (test.matches(INVALID_REGEX)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                         ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(name, keyword)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(name, keyword)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(name, keyword)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 34,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Photo photo, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireAllNonNull(name, phone, email, address, photo, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Photo getPhoto() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return photo;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String getTagsAsStringNoBracket() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            sb.append(tag.toStringNoBracket() + \" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .append(\" Photo: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .append(getPhoto())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 19,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PhoneContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhoneContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PhoneContainsKeywordPredicate(List\u003cString\u003e keywords, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                         ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String phone \u003d person.getPhone().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(phone, keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(phone, keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(phone, keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof PhoneContainsKeywordPredicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordPredicate) other).keywords));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Photo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Represents a Photo in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class Photo {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Cannot add photo to person\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String DEFAULT_PHOTOPATH \u003d \"data/DEFAULT_PHOTO.png\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    // file path of image"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Photo() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.path \u003d DEFAULT_PHOTOPATH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public Photo(String path) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (path.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new IllegalArgumentException(\"The path should not be empty\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * checking path whether or not valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param trimmedPhoto"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static boolean isValidPhotoPath(String trimmedPhoto) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // check default"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (trimmedPhoto.equals(\"data/DEFAULT_PHOTO.png\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        requireNonNull(trimmedPhoto);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        File f \u003d new File(trimmedPhoto);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return f.exists();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void setPath(String path) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 path.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class TagsContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e exactSearchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e fuzzySearchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final ArrayList\u003cString\u003e wildcardSearchList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public TagsContainsKeywordPredicate(List\u003cString\u003e keywords, ArrayList\u003cString\u003e exactSearchList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                        ArrayList\u003cString\u003e fuzzySearchList, ArrayList\u003cString\u003e wildcardSearchList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.exactSearchList \u003d exactSearchList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.fuzzySearchList \u003d fuzzySearchList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.wildcardSearchList \u003d wildcardSearchList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    String tags \u003d person.getTagsAsStringNoBracket();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.containsWordIgnoreCase(tags, keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!exactSearchList.contains(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            exactSearchList.add(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchFuzzySearch(tags, keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!fuzzySearchList.contains(name)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            fuzzySearchList.add(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    if (StringUtil.matchWildcardSearch(tags, keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        if (!wildcardSearchList.contains(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                            wildcardSearchList.add(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return other \u003d\u003d this || (other instanceof TagsContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagsContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/DuplicateReminderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Signals that the operation will result in duplicate reminder in reminder list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Reminders are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(\"Operation would result in duplicate reminders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Interval.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Represents a Interval in the reminder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Guarantees: details are present and not null, unit should be selected from min, hour and day."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class Interval {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Interval should have both time and unit.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \" Time should be a non-zero integer. Unit should be one of min|hour|year\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String INTERVAL_INT_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String UNIT_VALIDATION_REGEX \u003d \"(?i)min|year|hour\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public final String intervalInt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public final Unit unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Interval(String intervalInt, String unit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(intervalInt);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        checkArgument(isValidInterval(intervalInt, unit), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.intervalInt \u003d intervalInt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.unit \u003d new Unit(unit.toLowerCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static boolean isValidInterval(String intervalIntTest, String unitTest) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return unitTest.matches(UNIT_VALIDATION_REGEX) \u0026\u0026 intervalIntTest.matches(INTERVAL_INT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return intervalInt + unit.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if both intervals have same data filed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                || (other instanceof Interval // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 getIntervalInt().equals(((Interval) other).getIntervalInt())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 getUnit().equals(((Interval) other).getUnit())); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return unit.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getIntervalInt() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return intervalInt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return Objects.hash(intervalInt, unit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/NotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Signals that the given data is not found in the reminder list, aka has some errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class NotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public NotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(\"Reminder not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Represents a Reminder in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " *  Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Interval interval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private boolean show;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private boolean notShow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder(Event event, Interval interval, String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(event, interval, message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.show \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.notShow \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder (Reminder source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this(source.getEvent(), source.getInterval(), source.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Set the message of reminder, reminder message must be present and not NULL"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setMessage(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setShow(boolean show) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(show);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setNotShow(boolean notShow) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(notShow);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.notShow \u003d notShow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean getShow() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean getNotShow() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return notShow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Interval getInterval() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return interval;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return event.getName().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //TODO: implement getEvent, which needs a get() in event class, event file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if both reminders have same data filed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!(other instanceof seedu.address.model.reminder.Reminder)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return otherReminder.getMessage().equals(getMessage())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getInterval().equals(getInterval())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getName().equals(getEvent().getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getDescription().equals(getEvent().getDescription())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getVenue().equals(getEvent().getVenue())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getLabel().equals(getEvent().getLabel())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getStartDateTime().equals(getEvent().getStartDateTime())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getEndDateTime().equals(getEvent().getEndDateTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if both reminders of the same name have same message."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isSameReminder(seedu.address.model.reminder.Reminder otherReminder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!(otherReminder instanceof seedu.address.model.reminder.Reminder)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return getMessage().equals(getMessage())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getInterval().equals(getInterval())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getName().equals(getEvent().getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getDescription().equals(getEvent().getDescription())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getVenue().equals(getEvent().getVenue())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getLabel().equals(getEvent().getLabel())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getStartDateTime().equals(getEvent().getStartDateTime())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 otherReminder.getEvent().getEndDateTime().equals(getEvent().getEndDateTime());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        builder.append(\" Message: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getMessage())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getEvent().getDescription())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getEvent().getVenue())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Label: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getEvent().getLabel())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Start Date Time: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getEvent().getStartDateTime())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" End Date Time: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getEvent().getEndDateTime())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Interval: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(getInterval());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return Objects.hash(event, interval, message);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *     compare current time with reminder time, to decide whether show this reminder or not."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *         if reminder Time is equal to current time, return 0"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *         if reminder Time is earlier than current time, return -1"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *         if reminder Time is later than current time, return 1"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean compareWithCurrentTime() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar fakeReminderTimeUpper \u003d getFakeReminderTimeUpper(this.getInterval());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar startTime \u003d changeStringIntoDateFormat(this.getEvent().getStartDateTime().toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (startTime.compareTo(fakeReminderTimeUpper) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * delete te reminder"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean deleteReminder() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar deleteTimeUpper \u003d getReminderDeleteTimeUpper(this.getInterval());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar startTime \u003d changeStringIntoDateFormat(this.getEvent().getStartDateTime().toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (startTime.compareTo(deleteTimeUpper) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * change the time in String format into Date format"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Calendar changeStringIntoDateFormat(String date) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String stringDate \u003d date;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Date dateParse \u003d new Date();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            dateParse \u003d sdf.parse(stringDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.setTime(dateParse);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return cal;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param interval change interval time into milllis seconds."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int changeIntervalIntoMillis(Interval interval) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int time \u003d Integer.parseInt(interval.getIntervalInt());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (interval.getUnit().equalsIgnoreCase(\"MIN\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return time * 60 * 1000;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"HOUR\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return time * 60 * 60 * 1000;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"YEAR\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return time * 365 * 24 * 60 * 60 * 1000;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new RuntimeException(\"This is a unit exception. It should not happen\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Return the earliest reminder time"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*public Date getFakeReminderTimeLower(Interval interval) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int intervalMillis \u003d changeIntervalIntoMillis(interval);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Date temp \u003d new Date(System.currentTimeMillis() + intervalMillis - 30 * 1000);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        temp \u003d changeStringIntoDateFormat(sdf.format(temp));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return the latest reminder time"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Calendar getFakeReminderTimeUpper(Interval interval) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int number \u003d Integer.parseInt(interval.getIntervalInt());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (interval.getUnit().equalsIgnoreCase(\"MIN\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.MINUTE, number);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return cal;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"HOUR\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.HOUR, number);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return cal;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"YEAR\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.YEAR, number);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return cal;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new RuntimeException(\"This is a unit exception. It should not happen\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    Return the latest delete time."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     Delete time is : 3 minutes after reminder, in which reminder is 2 minutes before start time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Calendar getReminderDeleteTimeUpper(Interval interval) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int number \u003d Integer.parseInt(interval.getIntervalInt());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (interval.getUnit().equalsIgnoreCase(\"MIN\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.MINUTE, number);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"HOUR\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.HOUR, number);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else if (interval.getUnit().equalsIgnoreCase(\"YEAR\")) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            cal.add(Calendar.YEAR, number);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new RuntimeException(\"This is a unit exception. It should not happen\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        cal.add(Calendar.MINUTE, -1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return cal;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 276
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Represents a ReminderList in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * If the reminder list contains reminder other, then return true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Otherwise, return false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean contains(Reminder other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"comparing whether it is contained in the list\" + internalList.contains(other));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.contains(other);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Replaces the contents of this list with {@code Reminders}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * {@code persons} must not contain duplicate reminders."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  Add reminder toAdd into reminder list, which throws {@code DuplicateReminderException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  If toAdd already exists in reminder list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void add(Reminder toAdd) throws DuplicateReminderException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        internalList.add(new Reminder(toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * make the reminder toAdd shown in the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addShown(Reminder toAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        int index \u003d internalList.indexOf(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        toAdd.setShow(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        internalList.set(index, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder get(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Removes the reminder related to this event from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void remove(Event eventToRemove) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(eventToRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"reminder size now is \" + internalList.size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ObservableList\u003cReminder\u003e deleteInternalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder toRemove \u003d internalList.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (toRemove.getEvent().equals(eventToRemove)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                deleteInternalList.add(toRemove);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (int i \u003d 0; i \u003c deleteInternalList.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder toRemove \u003d deleteInternalList.get(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new NotFoundException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Check whether there are reminders related to this event"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param eventToRemove"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean isRemove(Event eventToRemove) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(eventToRemove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //System.out.println(\"reminder size now is \" + internalList.size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder toRemove \u003d internalList.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (toRemove.getEvent().equals(eventToRemove)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  Returns true if both reminder lists have same data filed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *  This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                || (other instanceof ReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((ReminderList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param reminders"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @return true if {@code reminders} contains only unique reminders."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                if (reminders.get(i).equals(reminders.get(j))) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Unit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Represents a unit for reminder in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidUnit(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class Unit {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Units should be selected from min, hour and year\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)min|year|hour\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Constructs a {@code Unit}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param unit A valid unit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Unit(String unit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(unit);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        checkArgument(isValidUnit(unit), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.unit \u003d unit.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns true if a given string is a valid unit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static boolean isValidUnit(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                || (other instanceof Unit // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 unit.equals(((Unit) other).getUnit())); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return unit.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return unit.toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return unit.toLowerCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public String toStringNoBracket() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Victoria Lee\"), new Phone(\"85234523\"), new Email(\"viclee@gmail.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"utown, #06-40\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Jiarui\"), new Phone(\"98129423\"), new Email(\"jiarui@gmail.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"ntu, blk56, #09-08\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"teammate\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Rajesh Koothrappali\"), new Phone(\"91031282\"), new Email(\"rajeshK@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"Victoria Street 20, #17-35\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"doctor\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Jiahui\"), new Phone(\"94253455\"), new Email(\"jiahui@gmail.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"nus, pgp, #01-08\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"teammate\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Elbert Wang\"), new Phone(\"99272758\"), new Email(\"elbertwang@gmail.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"salesman\", \"friends\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Tony Stark\"), new Phone(\"66666666\"), new Email(\"marvel8@usa.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"Stark\u0027s building\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"victory\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Trump Clinton\"), new Phone(\"92624417\"), new Email(\"trumpcli@usa.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"pgp, blk764, #13-07\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"owesMoney\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Person(new Name(\"Alice Cullen\"), new Phone(\"91251313\"), new Email(\"alice@gmail.com\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Address(\"ntu, blk56, #09-08\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Photo(\"data/DEFAULT_PHOTO.png\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    getTagSet(\"teammate\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public static Event[] getSampleEvent() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        return new Event[]{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Google talk\"), new Description(\"info session\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"com1 level2\"), new DateTime(\"2019-03-12 14:00:00\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-03-25 16:00:00\"), new Label(\"important\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"CS2103 project meeting\"), new Description(\"quick meeting\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"central library\"), new DateTime(\"2019-04-16 16:00:00\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-04-16 17:00:00\"), new Label(\"urgent\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Facebook interview\"), new Description(\"interview\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    new Venue(\"hall\"), new DateTime(\"2019-04-17 17:00:00\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    new DateTime(\"2019-04-17 18:00:00\"), new Label(\"hard\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"AI Conference\"), new Description(\"international\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"google building\"), new DateTime(\"2019-04-18 10:00:00\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-04-18 12:00:00\"), new Label(\"urgent\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Biz presentation\"), new Description(\"CCA\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"LT13\"), new DateTime(\"2019-04-20 09:00:00\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-04-20 11:00:00\"), new Label(\"urgent\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"CS3240 exam\"), new Description(\"final\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Utown\"), new DateTime(\"2019-05-02 18:00:00\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-02 21:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"GET1008 exam\"), new Description(\"final\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"AS6, #03-02\"), new DateTime(\"2019-05-03 09:00:00\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-03 11:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"wine appreciation\"), new Description(\"workshop\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"pgp blk78\"), new DateTime(\"2019-05-04 15:00:00\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-04 17:00:00\"), new Label(\"fun\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"visit aunt Lee\"), new Description(\"bring present\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Clementi blk89\"), new DateTime(\"2019-05-05 08:00:00\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-05 14:00:00\"), new Label(\"family\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"CN2010 exam\"), new Description(\"final\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Utown\"), new DateTime(\"2019-05-08 10:00:00\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-08 12:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Finance workshop\"), new Description(\"CCA\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"LT12\"), new DateTime(\"2019-04-18 12:00:00\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-04-18 14:00:00\"), new Label(\"fun\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Kpop concert\"), new Description(\"NCT\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Marina Bay\"), new DateTime(\"2019-04-18 18:00:00\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-04-18 21:00:00\"), new Label(\"fun\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"GRE practice\"), new Description(\"GRE\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Utown\"), new DateTime(\"2019-05-10 10:00:00\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-10 13:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Software Engineer interview\"), new Description(\"hard\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Venue(\"Lia tower, #12-13\"), new DateTime(\"2019-05-10 14:00:00\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-05-10 15:00:00\"), new Label(\"google\")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Psychology consultation\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new Description(\"consultation\"), new Venue(\"UHC\"), new DateTime(\"2019-06-12 17:00:00\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    new DateTime(\"2019-06-12 18:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Consultation with Mia\"), new Description(\"consultation\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    new Venue(\"UHC\"), new DateTime(\"2020-07-17 17:00:00\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    new DateTime(\"2020-07-17 18:00:00\"), new Label(\"must\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static Reminder[] getSampleReminder() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event event1 \u003d new Event(new seedu.address.model.event.Name(\"Facebook interview\"), new Description(\"interview\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Venue(\"hall\"), new DateTime(\"2019-04-17 17:00:00\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new DateTime(\"2019-04-17 18:00:00\"), new Label(\"hard\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event event2 \u003d new Event(new seedu.address.model.event.Name(\"GRE practice\"), new Description(\"GRE\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new Venue(\"Utown\"), new DateTime(\"2019-05-10 10:00:00\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            new DateTime(\"2019-05-10 13:00:00\"), new Label(\"must\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event event3 \u003d new Event(new seedu.address.model.event.Name(\"Consultation with Mia\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Description(\"consultation\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Venue(\"UHC\"), new DateTime(\"2020-07-17 17:00:00\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new DateTime(\"2020-07-17 18:00:00\"), new Label(\"must\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new Reminder[]{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Reminder(event1, new Interval(\"1\", \"min\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \"Reminder: You have an Event!\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Reminder(event2, new Interval(\"2\", \"hour\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \"Reminder: You have an Event!\"),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            new Reminder(event3,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    new Interval(\"24\", \"hour\"), \"Reminder: You have an Event!\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        };"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        for (Event sampleEvent: getSampleEvent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (Reminder sampleReminder: getSampleReminder()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            sampleAb.addReminder(sampleReminder);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 37,
      "yinya998": 75,
      "daDangminh": 14,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                             @JsonProperty(\"phone\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                             @JsonProperty(\"email\") String venue,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                             @JsonProperty(\"address\") String startTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                             @JsonProperty(\"photo\") String endTime,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                             @JsonProperty(\"tagged\") String label) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonAdaptedEvent(Event event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        name \u003d event.getName().fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        description \u003d event.getDescription().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        venue \u003d event.getVenue().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        startTime \u003d event.getStartDateTime().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        endTime \u003d event.getEndDateTime().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        label \u003d event.getLabel().getLabelName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Venue.isValidVenue(venue)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!DateTime.isValidDateTime(startTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final DateTime modelStartTime \u003d new DateTime(startTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!DateTime.isValidDateTime(endTime)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final DateTime modelEndTime \u003d new DateTime(endTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (label \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Label.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Label.isValidLabelName(label)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Label modelLabel \u003d new Label(label);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new Event(modelName, modelDescription, modelVenue, modelStartTime, modelEndTime, modelLabel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Photo modelPhoto;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final String photo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                             @JsonProperty(\"photo\") String photo,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photo \u003d source.getPhoto().getPath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (photo \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Photo.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (!Photo.isValidPhotoPath(photo)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            modelPhoto \u003d new Photo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            modelPhoto \u003d new Photo(photo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelPhoto, modelTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 19,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String nameE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String descriptionE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String venueE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String startTimeE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String endTimeE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String labelE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    //private final Event event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String remindTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final boolean show;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final boolean notShow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"nameE\") String nameE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"phoneE\") String descriptionE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"emailE\") String venueE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"addressE\") String startTimeE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"photoE\") String endTimeE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"taggedE\") String labelE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"message\") String message,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"show\") boolean show, @JsonProperty(\"notShow\") boolean notShow,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                            @JsonProperty(\"remindTime\") String interval, @JsonProperty(\"unit\") String unit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.nameE \u003d nameE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.descriptionE \u003d descriptionE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.venueE \u003d venueE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.startTimeE \u003d startTimeE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.endTimeE \u003d endTimeE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.labelE \u003d labelE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.remindTime \u003d interval;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.show \u003d show;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.notShow \u003d notShow;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonAdaptedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        nameE \u003d reminder.getEvent().getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        descriptionE \u003d reminder.getEvent().getDescription().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        venueE \u003d reminder.getEvent().getVenue().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        startTimeE \u003d reminder.getEvent().getStartDateTime().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        endTimeE \u003d reminder.getEvent().getEndDateTime().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        labelE \u003d reminder.getEvent().getLabel().getLabelName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        message \u003d reminder.getMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        remindTime \u003d reminder.getInterval().getIntervalInt();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        show \u003d reminder.getShow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        unit \u003d reminder.getInterval().getUnit();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        notShow \u003d reminder.getNotShow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (nameE \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Name.isValidName(nameE)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Name modelNameE \u003d new Name(nameE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (descriptionE \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Description.isValidDescription(descriptionE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Description modelDescription \u003d new Description(descriptionE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (venueE \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Venue.isValidVenue(venueE)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venueE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (startTimeE \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!DateTime.isValidDateTime(startTimeE)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final DateTime modelStartTime \u003d new DateTime(startTimeE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (endTimeE \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!DateTime.isValidDateTime(endTimeE)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final DateTime modelEndTime \u003d new DateTime(endTimeE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (labelE \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Label.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Label.isValidLabelName(labelE)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Label.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Label modelLabel \u003d new Label(labelE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (unit \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Unit.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!Unit.isValidUnit(unit)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new IllegalValueException(Unit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final Unit modelunit \u003d new Unit(unit);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //to do in future: add the reminder time"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event toAdd \u003d new Event(modelNameE, modelDescription, modelVenue, modelStartTime, modelEndTime, modelLabel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Interval toAddInterval \u003d new Interval(remindTime, unit);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new Reminder(toAdd, toAddInterval, \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Path addressBookFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonAddressBookStorage(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return readAddressBook(addressBookFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param filePath location of the contact lists. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        saveAddressBook(addressBook, addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param addressBookFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path addressBookFilePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        FileUtil.createIfMissing(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 19,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public List\u003cJsonAdaptedEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public List\u003cJsonAdaptedReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public List\u003cJsonAdaptedPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addEvent (JsonAdaptedEvent event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // TODO: duplicated events?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.events.add(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void addReminder (JsonAdaptedReminder reminder) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // TODO: duplicated events?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.reminders.add(reminder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (addressBook.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            addressBook.addReminder(reminder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 47,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * An Immutable EventList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "class JsonSerializableEventList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonSerializableEventList(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonSerializableEventList(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public List\u003cJsonAdaptedEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddressBook eventList \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (eventList.hasEvent(event)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            eventList.addEvent(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReminderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * An Immutable ReminderList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class JsonSerializableReminderList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonSerializableReminderList(@JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public JsonSerializableReminderList(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public List\u003cJsonAdaptedReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddressBook reminderList \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (reminderList.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            reminderList.addReminder(reminder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookContent \u003d addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return addressBookContent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path addressBookFilePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (CommandException | ParseException | WrongViewException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String, WindowViewState)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, WrongViewException;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 4,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * A UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        name.setText(event.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        venue.setText(event.getVenue().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        startDateTime.setText(event.getStartDateTime().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        endDateTime.setText(event.getEndDateTime().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        tags.getChildren().add(new Label(event.getLabel().toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * The person info display person info"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class EventInfo extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String FXML \u003d \"EventInfo.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"This is a default description\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label titleNameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label venueLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label tagLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label startsOnLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label endsOnLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label descriptionLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Label participantsLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public EventInfo(ObservableValue\u003cEvent\u003e selectedEvent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        showEventDetails(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        selectedEvent.addListener((observable, oldValue, newValue) -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                showEventDetails(newValue));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        nameLabel.setWrapText(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        participantsLabel.setWrapText(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        descriptionLabel.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        venueLabel.setWrapText(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        tagLabel.setWrapText(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Fills all text fields to show details about the event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * If the specified event is null, all text fields are cleared."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param event the event or null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private void showEventDetails(Event event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (event !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // Fill the labels with info from the person object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // titleNameLabel.setText(event.getName().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            nameLabel.setText(event.getName().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            venueLabel.setText(event.getVenue().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            startsOnLabel.setText(event.getStartDateTime().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            endsOnLabel.setText(event.getEndDateTime().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            tagLabel.setText(event.getLabel().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            descriptionLabel.setText(event.getDescription().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            participantsLabel.setText(event.getPersons()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .map(x -\u003e x.getName().toString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .reduce((x, y) -\u003e x + \", \" + y)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .orElse(\"-\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // Event is null, remove all the text."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // titleNameLabel.setText(\"Select event to view details.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            nameLabel.setText(\"Select event to view details.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            venueLabel.setText(\"-\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            startsOnLabel.setText(\"-\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            endsOnLabel.setText(\"-\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            tagLabel.setText(\"-\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            descriptionLabel.setText(\"-\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            participantsLabel.setText(\"-\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class EventListPanel extends ListPanel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList, ObservableValue\u003cEvent\u003e selectedEvent,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                           Consumer\u003cEvent\u003e onSelectedEventChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        eventListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            onSelectedEventChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        selectedEvent.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            logger.fine(\"Selected event changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (Objects.equals(eventListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                eventListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                int index \u003d eventListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using an {@code EventCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * This abstract class allows for different types of ListPanels to be created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public abstract class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    ListPanel(String fxml) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.ui.WindowViewState.EVENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.ui.WindowViewState.PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private ListPanel listPanel2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private WindowViewState currentState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private PersonInfo personInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private EventInfo eventInfo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private boolean showFullReminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private StackPane dataDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private StackPane listPanel2Placeholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.currentState \u003d PERSONS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.showFullReminder \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //   menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //    event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        personInfo \u003d new PersonInfo(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        eventInfo \u003d new EventInfo(logic.selectedEventProperty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        resetView();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Switches the view of the UI when the switch command is entered."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    void handleSwitch() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (this.currentState \u003d\u003d PERSONS) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.currentState \u003d EVENTS;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.currentState \u003d PERSONS;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        resetView();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * handle the view of reminder list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @param isShowFullReminder"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    void handleShowFullReminder(boolean isShowFullReminder) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (this.showFullReminder !\u003d isShowFullReminder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            this.showFullReminder \u003d isShowFullReminder;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            resetView();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * Resets the view given the current state of the UI."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    void resetView() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        dataDetailsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!showFullReminder) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            listPanel2 \u003d new ReminderListPanel(logic.getFilteredReminderList(), logic.selectedReminderProperty(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    logic::setSelectedReminder);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            listPanel2Placeholder.getChildren().add(listPanel2.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            listPanel2 \u003d new ReminderListFullPanel(logic.getFilteredReminderList(), logic.selectedReminderProperty(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    logic::setSelectedReminder);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            listPanel2Placeholder.getChildren().add(listPanel2.getRoot());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        if (currentState \u003d\u003d PERSONS) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            dataDetailsPanelPlaceholder.getChildren().add(personInfo.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            listPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    logic::setSelectedPerson);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } else if (currentState \u003d\u003d EVENTS) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            dataDetailsPanelPlaceholder.getChildren().add(eventInfo.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            listPanel \u003d new EventListPanel(logic.getFilteredEventList(), logic.selectedEventProperty(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    logic::setSelectedEvent);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            listPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    void handlePersonCommand() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.currentState \u003d PERSONS;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        resetView();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    void handleEventCommand() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        this.currentState \u003d EVENTS;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        resetView();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public ListPanel getListPanel() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String, WindowViewState)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throws CommandException, ParseException, WrongViewException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, currentState);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            handleShowFullReminder(commandResult.isShowFullReminder());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            if (commandResult.isSwitchView()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                handleSwitch();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (WrongViewException wve) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            logger.info(\"Cannot run \" + commandText + \" in this view.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            resultDisplay.setFeedbackToUser(wve.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            handleSwitch();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            throw wve;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public WindowViewState getViewState() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return this.currentState;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 29,
      "yinya998": 4,
      "yonggqiii": 70,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private ImageView photo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String path \u003d person.getPhoto().getPath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (path \u003d\u003d null \u0026\u0026 path.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photo.setImage(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            if (!new java.io.File(path).exists()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photo.setImage(new Image(\"file:\" + path));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 13,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.model.person.Photo.DEFAULT_PHOTOPATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": " * The person info display person info"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PersonInfo extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String FXML \u003d \"PersonInfo.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"This is a default comment\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private ImageView photoImageView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label titleNameLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label addressLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label tagLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label emailLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Label phoneNumberLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PersonInfo(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        showPersonDetails(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                showPersonDetails(newValue));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        nameLabel.setWrapText(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        addressLabel.setWrapText(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        //titleNameLabel.setWrapText(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Fills all text fields to show details about the person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * If the specified person is null, all text fields are cleared."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * @param person the person or null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void showPersonDetails(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //todo no photo"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            //displayPhoto(person.getPhoto().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            // Fill the labels with info from the person object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            //titleNameLabel.setText(person.getName().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            nameLabel.setText(person.getName().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            addressLabel.setText(person.getAddress().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            emailLabel.setText(person.getEmail().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            phoneNumberLabel.setText(person.getPhone().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            tagLabel.setText(person.getTags().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            displayPhoto(DEFAULT_PHOTOPATH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            // Person is null, remove all the text."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            //titleNameLabel.setText(\"Select person to view details.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            nameLabel.setText(\"Select person to view details.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            addressLabel.setText(\"-\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            emailLabel.setText(\"-\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            phoneNumberLabel.setText(\"-\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            tagLabel.setText(\"-\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * display photo"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void displayPhoto(String sourceString) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // Image userPhoto \u003dnew Image(\"file: src/main/resources/images/userPhotos/photo2.png\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // photoImageView.setImage(userPhoto);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // File source \u003d new File(\"   /Users/chenyinya/Desktop/photo3.jpeg"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // File dest \u003d new File(\"/Users/pankaj/tmp/dest.avi\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // Files.copy(source.toPath(), dest.toPath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            File source \u003d new File(sourceString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Image imageForFile \u003d new Image(source.toURI().toURL().toExternalForm());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photoImageView.setImage(imageForFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 109,
      "yonggqiii": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class PersonListPanel extends ListPanel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ObservableValue\u003cPerson\u003e selectedPerson,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Consumer\u003cPerson\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected person changed to: \" + newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public final Reminder reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Label interval;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderCard(Reminder reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        name.setText(reminder.getEvent().getName().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        message.setText(reminder.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        interval.setText(reminder.getInterval().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        venue.setText(reminder.getEvent().getVenue().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return reminder.getMessage().equals(card.reminder.getMessage())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 reminder.getEvent().equals(card.reminder.getEvent())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u0026\u0026 reminder.getInterval().equals(card.reminder.getInterval());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListFullPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderListFullPanel extends ListPanel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListFullPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderListFullPanel(ObservableList\u003cReminder\u003e reminderList, ObservableValue\u003cReminder\u003e selectedReminder,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                                 Consumer\u003cReminder\u003e onSelectedReminderChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            logger.fine(\"Selection in reminder list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            onSelectedReminderChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        selectedReminder.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            logger.fine(\"Selected reminder changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (Objects.equals(reminderListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                int index \u003d reminderListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using an {@code ReminderCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderListPanel extends ListPanel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList, ObservableValue\u003cReminder\u003e selectedReminder,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                          Consumer\u003cReminder\u003e onSelectedReminderChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminderListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            logger.fine(\"Selection in reminder list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            onSelectedReminderChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        selectedReminder.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            logger.fine(\"Selected reminder changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected person,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (Objects.equals(reminderListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                int index \u003d reminderListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.scrollTo(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using an {@code ReminderCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                //System.out.println(\"ui part change\" + reminder.getShow());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                if (reminder.getShow()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WindowViewState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * WindowViewState defines the state of viewing displayed by MainWindow."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public enum WindowViewState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    PERSONS, EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yonggqiii": 7
    }
  },
  {
    "path": "src/main/resources/view/EventInfo.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003cGridPane layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"57.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"37.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"102.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"34.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"127.0\" minHeight\u003d\"8.0\" prefHeight\u003d\"34.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"168.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"48.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"176.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"93.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"133.0\" minHeight\u003d\"32.0\" prefHeight\u003d\"119.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Name\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Venue\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Starts on\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"nameLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"venueLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"startsOnLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Ends on\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"endsOnLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Description\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"descriptionLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Labels\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"tagLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel text\u003d\"Participants\" GridPane.rowIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"participantsLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003c!-- Label fx:id\u003d\"titleNameLabel\" layoutX\u003d\"264.0\" layoutY\u003d\"89.0\" styleClass\u003d\"label-bright\" text\u003d\"Name\" / --\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 44
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 36
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         title\u003d\"UniLA\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "  \u003c!--title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003c!--\u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Exit\" /\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003c!--\u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\"  text\u003d\"Help\" /\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                   minHeight\u003d\"175\" prefHeight\u003d\"100\" maxHeight\u003d\"175\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "          \u003cStackPane fx:id\u003d\"dataDetailsPanelPlaceholder\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003cStackPane fx:id\u003d\"listPanel2Placeholder\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 7,
      "yinya998": 4,
      "yonggqiii": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/PersonInfo.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"personInfo\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "      \u003cImageView fx:id\u003d\"photoImageView\" fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" layoutX\u003d\"44.0\" layoutY\u003d\"37.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "      \u003cGridPane fx:id\u003d\"table\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"120.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"120.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel text\u003d\"Name\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel text\u003d\"Phone Number\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel fx:id\u003d\"nameLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneNumberLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel fx:id\u003d\"addressLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel text\u003d\"Email\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel fx:id\u003d\"emailLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel text\u003d\"Tag\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            \u003cLabel fx:id\u003d\"tagLabel\" styleClass\u003d\"label-bright\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "      \u003c!--Label fx:id\u003d\"titleNameLabel\" layoutX\u003d\"10\" layoutY\u003d\"10.0\" styleClass\u003d\"label-bright\" text\u003d\"Name\" / --\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yinya998": 31,
      "yonggqiii": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \u003cHBox fx:id\u003d\"box1\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "      \u003cImageView fx:id\u003d\"photo\" fitHeight\u003d\"150.0\" fitWidth\u003d\"50.0\" layoutX\u003d\"50.0\" layoutY\u003d\"83.0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                 pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        \u003cimage\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "          \u003cImage url\u003d\"@../../../../docs/images/user_photo.png\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        \u003c/image\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "          \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yinya998": 15,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cLabel fx:id\u003d\"message\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$message\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cLabel fx:id\u003d\"interval\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interval\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 40
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "   \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/sample.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Bernice Yu\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"99272758\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"berniceyu@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"Blk 30 Lorong 3 Serangoon Gardens, #07-18\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"colleagues\", \"friends\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Charlotte Oliveiro\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"93210283\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"charlotte@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"Blk 11 Ang Mo Kio Street 74, #11-04\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"neighbours\" ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"David Li\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"91031282\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"lidavid@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"Blk 436 Serangoon Gardens Street 26, #16-43\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"family\" ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Irfan Ibrahim\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"92492021\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"irfan@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"Blk 47 Tampines Street 20, #17-35\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"classmates\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Roy Balakrishnan\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"92624417\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"royb@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"Blk 45 Aljunied Street 85, #11-31\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"colleagues\" ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"events\" : [ {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"career talk\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"description\" : \"Google company info session\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"venue\" : \"com1 level2\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"startTime\" : \"2019-01-31 14:00:00\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"endTime\" : \"2019-01-31 14:00:00\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"label\" : \"important\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"CS2103 project meeting\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"description\" : \"quick meeting\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"venue\" : \"central library\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"startTime\" : \"2019-12-31 16:00:00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"endTime\" : \"2019-12-31 16:00:00\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"label\" : \"urgent\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"reminders\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "daDangminh": 60
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 7,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private final PersonInfoHandle personInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    // private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        personInfo \u003d new PersonInfoHandle(getChildNode(PersonInfoHandle.PERSON_INFO_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *     return browserPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public PersonInfoHandle getPersonInfo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return personInfo;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 11,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonInfoHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class PersonInfoHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String PERSON_INFO_ID \u003d \"#personInfo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public PersonInfoHandle(Node personInfoNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        super(personInfoNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(FileUtil.getName(\"/a/b/c.txt\").endsWith(\"c.txt\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void copyFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String dir \u003d \"src/test/resources/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            String path \u003d FileUtil.copyFile(\"src/main/resources/images/userPhotos/DEFAULT_PHOTO.png\", dir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            java.io.File f \u003d new java.io.File(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            assertTrue(f.exists());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 21,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                       Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void matchTwoWordsSimilarity() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"Charlotte\", \"alx\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"alx\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"alx\", \"David\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"vai\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"a\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"Da\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"D\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"vid\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"David\", \"av\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"D*id\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"d*id\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"D*i*\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"d*I*\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"Da*\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(StringUtil.match(\"David\", \"da*\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 22,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (CommandException | ParseException | WrongViewException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (ParseException | CommandException | WrongViewException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 2,
      "yonggqiii": 6,
      "-": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        addCommand.execute(modelStub, commandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setEvent(Event target, Event editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyProperty\u003cEvent\u003e selectedEventProperty() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addShownReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isReminderPassed(Reminder reminder) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isRemove(Event event) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setNotShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deleteReminder(Event target) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public Reminder getSelectedReminder() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 72,
      "jwl1997": 47,
      "yonggqiii": 4,
      "-": 251
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddECommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddECommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class AddECommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.addEvent(validEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new AddECommand(validEvent), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                String.format(AddECommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventInList \u003d model.getAddressBook().getEventList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(new AddECommand(eventInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                AddECommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddECommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class AddECommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        new AddECommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        CommandResult commandResult \u003d new AddECommand(validEvent).execute(modelStub, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEquals(String.format(AddECommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddECommand addECommand \u003d new AddECommand(validEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        thrown.expectMessage(AddECommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        addECommand.execute(modelStub, commandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event event1 \u003d new EventBuilder().withName(\"event1\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event event2 \u003d new EventBuilder().withName(\"event2\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddECommand addEvent1Command \u003d new AddECommand(event1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddECommand addEvent2Command \u003d new AddECommand(event2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(addEvent1Command.equals(addEvent1Command));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddECommand addEvent1CommandCopy \u003d new AddECommand(event1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(addEvent1Command.equals(addEvent1CommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(addEvent1Command.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(addEvent1Command.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(addEvent1Command.equals(addEvent2Command));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setEvent(Event target, Event editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyProperty\u003cEvent\u003e selectedEventProperty() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addShownReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isReminderPassed(Reminder reminder) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isRemove(Event event) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setNotShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void deleteReminder(Event target) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public Reminder getSelectedReminder() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * A Model stub that always accept the event being added."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            // called by {@code AddECommand#execute()}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 22,
      "jwl1997": 352
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.testutil.TypicalReminders;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddECommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class AddRCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void execute_newReminder_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder validReminder \u003d new Reminder(TypicalReminders.EVENT1, new Interval(\"1\", \"hour\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        expectedModel.addReminder(validReminder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEventCommandSuccess(new AddRCommand(Index.fromZeroBased(1), new Interval(\"1\", \"min\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        new Unit(\"min\")), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                String.format(AddRCommand.MESSAGE_SUCCESS, validReminder), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //duplicate exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertCommandFailure(new AddRCommand(Index.fromZeroBased(1), new Interval(\"1\", \"Min\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        new Unit(\"mIN\")), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                AddRCommand.MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        //different unit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEventCommandSuccess(new AddRCommand(Index.fromZeroBased(1), new Interval(\"5\", \"hour\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                        new Unit(\"min\")), model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                String.format(AddRCommand.MESSAGE_SUCCESS, validReminder), expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class AddRCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        new AddRCommand(null, new Interval(\"2\", \"min\"), new Unit(\"min\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event event1 \u003d new EventBuilder().withName(\"event1\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Event event2 \u003d new EventBuilder().withName(\"event2\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddECommand addEvent1Command \u003d new AddECommand(event1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddECommand addEvent2Command \u003d new AddECommand(event2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(addEvent1Command.equals(addEvent1Command));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddECommand addEvent1CommandCopy \u003d new AddECommand(event1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(addEvent1Command.equals(addEvent1CommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertFalse(addEvent1Command.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertFalse(addEvent1Command.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertFalse(addEvent1Command.equals(addEvent2Command));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setEvent(Event target, Event editedPerson) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyProperty\u003cEvent\u003e selectedEventProperty() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public Event getSelectedEvent() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addShownReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isReminderPassed(Reminder reminder) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean isRemove(Event event) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setNotShow(Reminder r, boolean v) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void deleteReminder(Event target) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void setSelectedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyProperty\u003cReminder\u003e selectedReminderProperty() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public Reminder getSelectedReminder() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private class ModelStubWithReminder extends ModelStub {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return this.reminder.isSameReminder(reminder);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * A Model stub that always accept the event being added."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::isSameReminder);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            // called by {@code AddECommand#execute()}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 353
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.exceptions.WrongViewException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String VALID_PHOTO_AMY \u003d \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String VALID_PHOTO_BOB \u003d \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String PHOTO_DESC_AMY \u003d \" \" + PREFIX_PHOTO + VALID_PHOTO_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String PHOTO_DESC_BOB \u003d \" \" + PREFIX_PHOTO + VALID_PHOTO_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_NAME_EVENT1 \u003d \"event1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_NAME_EVENT2 \u003d \"event2\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_DESCRIPTION_EVENT1 \u003d \"CS2103 lecture\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_DESCRIPTION_EVENT2 \u003d \"CS2103 tutorial\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_STARTDATETIME_EVENT1 \u003d \"2019-01-31 14:00:00\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_STARTDATETIME_EVENT2 \u003d \"2019-01-01 14:00:00\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_ENDDATETIME_EVENT1 \u003d \"2019-01-31 16:00:00\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_ENDDATETIME_EVENT2 \u003d \"2019-01-01 16:00:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_LABEL_EVENT1 \u003d \"important\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_LABEL_EVENT2 \u003d \"urgent\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_VENUE_EVENT1 \u003d \"com1 level1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String VALID_VENUE_EVENT2 \u003d \"com1 level2\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final EditECommand.EditEventDescriptor DESC_EVENT1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final EditECommand.EditEventDescriptor DESC_EVENT2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .withPhoto(VALID_PHOTO_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .withPhoto(VALID_PHOTO_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DESC_EVENT1 \u003d new EditEventDescriptorBuilder().withName(VALID_NAME_EVENT1)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EVENT1).withVenue(VALID_VENUE_EVENT1)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withStartDateTime(VALID_STARTDATETIME_EVENT1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withEndDateTime(VALID_ENDDATETIME_EVENT1)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withLabel(VALID_LABEL_EVENT1).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DESC_EVENT2 \u003d new EditEventDescriptorBuilder().withName(VALID_NAME_EVENT2)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EVENT2).withVenue(VALID_VENUE_EVENT2)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withStartDateTime(VALID_STARTDATETIME_EVENT2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withEndDateTime(VALID_ENDDATETIME_EVENT2)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withLabel(VALID_LABEL_EVENT2).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (CommandException | WrongViewException ce) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static void assertEventCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                                                 CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            //assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"commandException\" + ex.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        } catch (WrongViewException ce) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"wrongviewException\" + ce.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static void assertEventCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                                                 CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                                                 Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            command.execute(actualModel, actualCommandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        } catch (CommandException | WrongViewException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - the address book, filtered event list and selected event in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static void assertEventCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                                                 CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        List\u003cEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEventList());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event expectedSelectedEvent \u003d actualModel.getSelectedEvent();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            command.execute(actualModel, actualCommandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        } catch (CommandException | WrongViewException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredEventList());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedSelectedEvent, actualModel.getSelectedEvent());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0]),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static void showEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final String[] splitName \u003d event.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEquals(1, model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 1,
      "yinya998": 20,
      "yonggqiii": 5,
      "jwl1997": 106,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConnectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditECommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ConnectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_unfilteredListFirstEvent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToUpdated \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person personToAdd \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand connectCommand \u003d new ConnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d new EventBuilder(eventToUpdated).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        updatedEvent \u003d ConnectCommand.addContactToEvent(personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(ConnectCommand.MESSAGE_CONNECT_SUCCESS, personToAdd, eventToUpdated);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(eventToUpdated, updatedEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setSelectedEvent(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setSelectedEvent(updatedEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(connectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_unfilteredListLastEvent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person personToAdd \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand connectCommand \u003d new ConnectCommand(INDEX_SECOND_PERSON, indexLastEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d new EventBuilder(lastEvent).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        updatedEvent \u003d ConnectCommand.addContactToEvent(personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(ConnectCommand.MESSAGE_CONNECT_SUCCESS, personToAdd, lastEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(lastEvent, updatedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setSelectedEvent(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setSelectedEvent(updatedEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(connectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand connectCommand \u003d new ConnectCommand(INDEX_SECOND_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(connectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidContactIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand connectCommand \u003d new ConnectCommand(outOfBoundIndex, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(connectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final ConnectCommand standardCommand1 \u003d new ConnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final ConnectCommand standardCommand2 \u003d new ConnectCommand(INDEX_SECOND_PERSON, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand1.equals(standardCommand1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ConnectCommand standardCommand1Copy \u003d new ConnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand1.equals(standardCommand1Copy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(standardCommand2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        deleteCommand.execute(model, commandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        deleteCommand.execute(model, commandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 3,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteECommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * {@code DeleteECommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DeleteECommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteECommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(deleteECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(deleteECommand, model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteECommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showNoEvent(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(deleteECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(deleteECommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // delete -\u003e first event deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        deleteECommand.execute(model, commandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // redo -\u003e same first event deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteECommand \u003d new DeleteECommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(deleteECommand, model, commandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteFirstCommand \u003d new DeleteECommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteSecondCommand \u003d new DeleteECommand(INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DeleteECommand deleteFirstCommandCopy \u003d new DeleteECommand(INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private void showNoEvent(Model model) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.updateFilteredEventList(p -\u003e false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(model.getFilteredEventList().isEmpty());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DisconnectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditECommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class DisconnectCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_unfilteredListFirstEvent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToUpdate \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person personToAdd \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d new EventBuilder(eventToUpdate).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!updatedEvent.hasPerson(personToAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            updatedEvent \u003d ConnectCommand.addContactToEvent(personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.setEvent(eventToUpdate, updatedEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(DisconnectCommand.MESSAGE_DISCONNECT_SUCCESS, personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(updatedEvent, eventToUpdate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand disconnectCommand \u003d new DisconnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(disconnectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_unfilteredListLastEvent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Person personToAdd \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event updatedEvent \u003d new EventBuilder(lastEvent).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        if (!updatedEvent.hasPerson(personToAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            updatedEvent \u003d ConnectCommand.addContactToEvent(personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.setEvent(lastEvent, updatedEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(DisconnectCommand.MESSAGE_DISCONNECT_SUCCESS, personToAdd, updatedEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(updatedEvent, lastEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand disconnectCommand \u003d new DisconnectCommand(INDEX_SECOND_PERSON, indexLastEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(disconnectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand disconnectCommand \u003d new DisconnectCommand(INDEX_SECOND_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(disconnectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidContactIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand disconnectCommand \u003d new DisconnectCommand(outOfBoundIndex, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(disconnectCommand, model, commandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final DisconnectCommand standardCommand1 \u003d new DisconnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final DisconnectCommand standardCommand2 \u003d new DisconnectCommand(INDEX_SECOND_PERSON, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand1.equals(standardCommand1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        DisconnectCommand standardCommand1Copy \u003d new DisconnectCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand1.equals(standardCommand1Copy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand1.equals(standardCommand2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        editCommand.execute(model, commandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        editCommand.execute(model, commandHistory, WindowViewState.PERSONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 1,
      "yonggqiii": 3,
      "-": 245
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditECommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATETIME_EVENT2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EVENT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATETIME_EVENT2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_EVENT2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.ui.WindowViewState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditECommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EditECommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditECommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(editECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EventBuilder eventInList \u003d new EventBuilder(lastEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d eventInList.withName(VALID_NAME_EVENT2).withVenue(VALID_VENUE_EVENT2)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withStartDateTime(VALID_STARTDATETIME_EVENT2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withEndDateTime((VALID_ENDDATETIME_EVENT2)).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_NAME_EVENT2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withVenue(VALID_VENUE_EVENT2).withStartDateTime(VALID_STARTDATETIME_EVENT2)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withEndDateTime((VALID_ENDDATETIME_EVENT2)).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(indexLastEvent, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditECommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(lastEvent, editedEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(editECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT, new EditECommand.EditEventDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditECommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(editECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventInFilteredList \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(eventInFilteredList).withName(VALID_NAME_EVENT2).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                new EditEventDescriptorBuilder().withName(VALID_NAME_EVENT2).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        String expectedMessage \u003d String.format(EditECommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(editECommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_duplicateEventUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event firstEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_SECOND_EVENT, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(editECommand, model, commandHistory, EditECommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_duplicateEventFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventInList \u003d model.getAddressBook().getEventList().get(INDEX_SECOND_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                new EditEventDescriptorBuilder(eventInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(editECommand, model, commandHistory, EditECommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withName(VALID_NAME_EVENT2).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(editECommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_invalidEventIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                new EditEventDescriptorBuilder().withName(VALID_NAME_EVENT2).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(editECommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // edit -\u003e first event edited"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        editECommand.execute(model, commandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // redo -\u003e same first event edited again"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withName(VALID_NAME_EVENT2).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(editECommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * 1. Edits a {@code Event} from a filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited event in the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the event object regardless of indexing."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventEdited() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand editECommand \u003d new EditECommand(INDEX_FIRST_EVENT, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // edit -\u003e edits second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        editECommand.execute(model, commandHistory, WindowViewState.EVENTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertNotEquals(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()), eventToEdit);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // redo -\u003e edits same second event in unfiltered event list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        final EditECommand standardCommand \u003d new EditECommand(INDEX_FIRST_EVENT, DESC_EVENT1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor copyDescriptor \u003d new EditECommand.EditEventDescriptor(DESC_EVENT1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand commandWithSameValues \u003d new EditECommand(INDEX_FIRST_EVENT, copyDescriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand.equals(new EditECommand(INDEX_SECOND_EVENT, DESC_EVENT1)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(standardCommand.equals(new EditECommand(INDEX_FIRST_EVENT, DESC_EVENT2)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 252
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATETIME_EVENT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EVENT2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATETIME_EVENT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_EVENT2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.testutil.EditEventDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EditEventDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor descriptorWithSameValues \u003d new EditECommand.EditEventDescriptor(DESC_EVENT1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(DESC_EVENT1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertTrue(DESC_EVENT1.equals(DESC_EVENT1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(DESC_EVENT2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        EditECommand.EditEventDescriptor editedEvent1 \u003d new EditEventDescriptorBuilder(DESC_EVENT1)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withName(VALID_NAME_EVENT2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(editedEvent1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        editedEvent1 \u003d new EditEventDescriptorBuilder(DESC_EVENT1).withVenue(VALID_VENUE_EVENT2).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(editedEvent1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        editedEvent1 \u003d new EditEventDescriptorBuilder(DESC_EVENT1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                .withStartDateTime(VALID_STARTDATETIME_EVENT2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(editedEvent1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        editedEvent1 \u003d new EditEventDescriptorBuilder(DESC_EVENT1).withEndDateTime(VALID_ENDDATETIME_EVENT2).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertFalse(DESC_EVENT1.equals(editedEvent1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private final Tag testingTag \u003d new Tag(\"testingTag\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private final Path testingPath \u003d Paths.get(\"./test/data/JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private final Path alternativeTestingPath \u003d Paths.get(\"./test/data/alternativeDirectory\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private final String name \u003d \"testingName\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        new ExportCommand(name, null, testingTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        new ExportCommand(null, testingPath, testingTag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void execute_successfulExport_showsNoMessageError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(name, testingPath, testingTag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertCommandSuccess(exportCommand, model, history, String.format(exportCommand.MESSAGE_SUCCESS), model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void execute_whenTagIsSupposedlyNotGiven_showsNoMessageError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(name, testingPath, new Tag(\"shouldnotbethistag\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertCommandSuccess(exportCommand, model, history, String.format(exportCommand.MESSAGE_SUCCESS), model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        final ExportCommand comparableCommand \u003d new ExportCommand(name, testingPath, testingTag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ExportCommand comparedToCommand \u003d new ExportCommand(name, testingPath, testingTag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertTrue(comparableCommand.equals(comparedToCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertTrue(comparableCommand.equals(comparableCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertFalse(comparableCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // different path -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertFalse(comparableCommand.equals(new ExportCommand(name, alternativeTestingPath, testingTag)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0, \"\", \"\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0, \"\", \"\", \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 19,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private static final Path INVALID_FILE_LOCATION \u003d Paths.get(\"./data/nonexistentfile.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private static final Path VALID_FILE_LOCATION \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "            Paths.get(\"src/test/data/JsonAddressBookStorageTest/sample.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void constructor_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        new ImportCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void execute_importFailure_throwsException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(INVALID_FILE_LOCATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertCommandFailure(command, model, history, String.format(command.MESSAGE_INVALID_FILE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void execute_acceptedSuccess_successfulImport() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(VALID_FILE_LOCATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertCommandSuccess(command, model, history, String.format (command.MESSAGE_SUCCESS, 7, 0, 0, 0, 0, 0), model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void execute_duplicateClassesAndStudents_successfulImport() throws DuplicatePersonException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        Person studentSample \u003d new PersonBuilder().withName(\"David Li\").withPhone(\"91031282\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                .withEmail(\"lidavid@example.com\").withAddress(\"Blk 436 Serangoon Gardens Street 26, #16-43\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "                .withTags(\"family\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        model.addPerson(studentSample);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(VALID_FILE_LOCATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertCommandSuccess(command, model, history, String.format (command.MESSAGE_SUCCESS, 0, 0, 7, 0, 2, 0), model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        final ImportCommand comparableCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        ImportCommand comparedToCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertTrue(comparableCommand.equals(comparedToCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertTrue(comparableCommand.equals(comparableCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertFalse(comparableCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertFalse(comparableCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daDangminh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        // different range -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "        assertFalse(comparableCommand.equals(new ImportCommand(Paths.get(\"./data/sampleimportfile.xml\"))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListECommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListECommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class ListECommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_listEIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new ListECommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ListECommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public void execute_listEIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        assertEventCommandSuccess(new ListECommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "                ListECommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MeetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Block;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_MEETING_NAME \u003d \"Meeting\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_MEETING_DESCRIPTION \u003d \"This is a description!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_MEETING_VENUE \u003d \"This is a meeting venue\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_MEETING_LABEL \u003d \"genericLabel\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String DURATION_BUILDER_STRING \u003d \"P%dDT%dH%dM%d.0S\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_VALID_START_TIME \u003d \"9990-01-01 00:00:00\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String GENERIC_END_TIME_WITH_DEFAULT_DURATION \u003d \"9990-01-01 02:00:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final String LATEST_END_TIME \u003d \"9999-12-31 23:59:59\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d Duration.ofHours(2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Block DEFAULT_BLOCK \u003d new Block(LocalTime.parse(\"00:00\"), LocalTime.parse(\"00:00\"), false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Supplier\u003cEventBuilder\u003e GENERIC_EVENTBUILDER_SUPPLIER \u003d () -\u003e new EventBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withName(GENERIC_MEETING_NAME)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withDescription(GENERIC_MEETING_DESCRIPTION)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withVenue(GENERIC_MEETING_VENUE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withStartDateTime(GENERIC_VALID_START_TIME)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withEndDateTime(GENERIC_END_TIME_WITH_DEFAULT_DURATION)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            .withLabel(GENERIC_MEETING_LABEL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Supplier\u003cCommandHistory\u003e emptyCommandHistorySupplier \u003d () -\u003e new CommandHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Supplier\u003cModel\u003e typicalModelSupplier \u003d () -\u003e new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithFirstTwoPersons() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Create expectations."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandTestUtil.assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedResult, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedResult, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithFirstAndLastPerson() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Index lastPerson \u003d Index.fromOneBased(typicalModelSupplier.get().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d Set.of(INDEX_FIRST_PERSON, lastPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(indices).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Create expectations."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandTestUtil.assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithInvalidIndexUnfilteredList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        indices.add(Index.fromOneBased(typicalModelSupplier.get().getFilteredPersonList().size() + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(indices).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandTestUtil.assertCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandTestUtil.assertEventCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithValidIndexFilteredList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        model.updateFilteredPersonList(x -\u003e x.equals(TypicalPersons.ALICE) || x.equals(TypicalPersons.BENSON));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Index firstValidIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Index secondValidIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(firstValidIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(secondValidIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d Set.of(firstValidIndex, secondValidIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(indices).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Create expectations."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e x.equals(TypicalPersons.ALICE) || x.equals(TypicalPersons.BENSON));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, model, emptyCommandHistorySupplier.get(), expectedResult, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, model, emptyCommandHistorySupplier.get(), expectedResult, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithInvalidIndexFilteredList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d Set.of(outOfBoundIndex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(indices).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, model, emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, model, emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithNoOneEntered() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e emptyIndexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(emptyIndexSet).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithOnePersonEntered() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e singleIndexSet \u003d Set.of(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(singleIndexSet).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_NOT_ENOUGH_PERSONS_TO_FORM_MEETING);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithValidTag() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e emptyIndexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cTag\u003e tags \u003d Set.of(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(emptyIndexSet).withTags(tags).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting expectations"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.DANIEL);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithValidAndInvalidTags() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e emptyIndexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cTag\u003e tags \u003d Set.of(new Tag(\"friends\"), new Tag(\"ABCDEFG\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(emptyIndexSet).withTags(tags).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting expectations"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.DANIEL);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithValidIndicesAndTags() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d Set.of(INDEX_FIRST_PERSON, Index.fromOneBased(3));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cTag\u003e tags \u003d Set.of(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withIndices(indices).withTags(tags).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting expectations"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.CARL,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                TypicalPersons.DANIEL);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithEarlyStartTime() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String earlyStartTime \u003d \"0001-01-01 00:00:00\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withStartDateTime(earlyStartTime).build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Setting expectations"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withNano(0)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withSecond(0)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withMinute(0)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .plusHours(1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String correctStartTime \u003d currentDateTime"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .format(DateTime.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String correctEndTime \u003d currentDateTime"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .plusHours(2)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .format(DateTime.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(correctStartTime)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(correctEndTime)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpSimpleMeetingWithEarlyEndTime() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        String earlyEndTime \u003d \"9990-01-01 01:59:59\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().withEndDateTime(earlyEndTime).build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_CANNOT_FIND_MEETING_EVENT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_CANNOT_FIND_MEETING_EVENT);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithMultipleEventsInTheWay() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Supplier\u003cModel\u003e baseModelSupplier \u003d () -\u003e {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventInTheWay.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event anotherEventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            anotherEventInTheWay.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventInTheWay);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(anotherEventInTheWay);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d baseModelSupplier.get();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().withStartDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(\"9990-01-01 08:00:00\").build();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithMultipleEventsNotInTheWay() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Supplier\u003cModel\u003e baseModelSupplier \u003d () -\u003e {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventNotInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 04:00:00\")"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventNotInTheWay.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event anotherEventNotInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 04:00:00\")"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            anotherEventNotInTheWay.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventNotInTheWay);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(anotherEventNotInTheWay);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d baseModelSupplier.get();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithSomeEventsInTheWay() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Supplier\u003cModel\u003e baseModelSupplier \u003d () -\u003e {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 00:00:00\")"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventInTheWay.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventNotInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(GENERIC_VALID_START_TIME)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(LATEST_END_TIME)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventNotInTheWay.addPerson(TypicalPersons.CARL,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    TypicalPersons.DANIEL, TypicalPersons.ELLE, TypicalPersons.FIONA,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event anotherEventNotInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 04:00:00\")"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            anotherEventNotInTheWay.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventInTheWay);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventNotInTheWay);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(anotherEventNotInTheWay);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d baseModelSupplier.get();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(\"9990-01-01 04:00:00\")"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithExcessiveDuration() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Supplier\u003cModel\u003e baseModelSupplier \u003d () -\u003e {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 00:00:00\")"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventInTheWay.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event anotherEventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 04:00:00\")"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            anotherEventInTheWay.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventInTheWay);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(anotherEventInTheWay);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder()"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withDuration(0, 3, 0, 0)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d baseModelSupplier.get();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(\"9990-01-01 09:00:00\")"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithSmallDuration() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Supplier\u003cModel\u003e baseModelSupplier \u003d () -\u003e {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event eventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 00:00:00\")"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            eventInTheWay.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Event anotherEventInTheWay \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withStartDateTime(\"9990-01-01 03:00:00\")"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .withEndDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            anotherEventInTheWay.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            Model model \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(eventInTheWay);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            model.addEvent(anotherEventInTheWay);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return model;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        };"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder()"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withDuration(0, 1, 0, 0)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d baseModelSupplier.get();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(\"9990-01-01 02:00:00\")"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(\"9990-01-01 03:00:00\")"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, baseModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithEventFallingInBlock() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder()"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(\"05:00 07:00\", false)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // Set expectations."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model expectedModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event expectedEvent \u003d GENERIC_EVENTBUILDER_SUPPLIER.get()"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(\"9990-01-01 05:00:00\")"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(\"9990-01-01 07:00:00\")"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedEvent.addPerson(TypicalPersons.ALICE, TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        setExpectedModel(expectedModel, expectedEvent);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(MeetCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                + \" \" + expectedEvent.getName(), false, false, false);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        test \u003d new MeetCommandBuilder()"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(\"07:00 05:00\", true)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(), expectedResult,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithTooTightBlockBounds() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder()"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(\"9990-01-01 06:00:00\")"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(\"05:00 05:01\", false)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_BLOCK_BOUNDS_TOO_TIGHT);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, typicalModelSupplier.get(), emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_BLOCK_BOUNDS_TOO_TIGHT);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSetUpMeetingWithDuplicateEvent() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Model baseModel \u003d typicalModelSupplier.get();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Event toAdd \u003d GENERIC_EVENTBUILDER_SUPPLIER.get().build();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        baseModel.addEvent(toAdd);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        baseModel.commitAddressBook();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand test \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandFailure(test, baseModel, emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                String.format(MeetCommand.MESSAGE_DUPLICATE_EVENT, toAdd.getName(), toAdd.getStartDateTime()));"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandFailure(test, baseModel, emptyCommandHistorySupplier.get(),"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                String.format(MeetCommand.MESSAGE_DUPLICATE_EVENT, toAdd.getName(), toAdd.getStartDateTime()));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand first \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand second \u003d first;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(first, second);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().build();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(first, second);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withIndices(Set.of(Index.fromOneBased(2))).build();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, new Object());"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withIndices(Set.of(Index.fromOneBased(2))).build();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withName(\"Different name\").build();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withDescription(\"Different description\").build();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withVenue(\"Different venue\").build();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withStartDateTime(\"0001-01-01 00:00:00\").build();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withEndDateTime(\"0001-01-01 00:00:00\").build();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withTags(Set.of(new Tag(\"tag\"))).build();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withBlock(\"00:00 00:01\", false).build();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withDuration(1, 1, 1, 1).build();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        second \u003d new MeetCommandBuilder().withLabel(\"AnotherLabel\").build();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private void setExpectedModel(Model m, Event e) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        m.addEvent(e);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        m.setSelectedEvent(e);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        m.commitAddressBook();"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private class MeetCommandBuilder {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private DateTime start;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private DateTime end;"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Label label;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Block block;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder() {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.indices \u003d Set.of(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.name \u003d new Name(GENERIC_MEETING_NAME);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.description \u003d new Description(GENERIC_MEETING_DESCRIPTION);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.venue \u003d new Venue(GENERIC_MEETING_VENUE);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.start \u003d new DateTime(GENERIC_VALID_START_TIME);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.end \u003d new DateTime(LATEST_END_TIME);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.label \u003d new Label(GENERIC_MEETING_LABEL);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.duration \u003d DEFAULT_DURATION;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.block \u003d DEFAULT_BLOCK;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand build() {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new MeetCommand(indices, name, description, venue, start, end, label, duration, tags,"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    block);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withName(String name) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withLabel(String label) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.label \u003d new Label(label);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withIndices(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.indices \u003d indices;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withDuration(int... duration) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.duration \u003d Duration.parse(String.format(DURATION_BUILDER_STRING, duration[0],"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    duration[1], duration[2], duration[3]));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.start \u003d new DateTime(startDateTime);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.end \u003d new DateTime(endDateTime);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandBuilder withBlock(String block, boolean negated) {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            String[] times \u003d block.split(\" \");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.block \u003d new Block(LocalTime.parse(times[0]), LocalTime.parse(times[1]), negated);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 649
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PhotoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhotoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void parseSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            PhotoCommand photoCommand \u003d new PhotoCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            photoCommand \u003d photoCommand.parse(\"2 user/photo.jpg\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            assertTrue(photoCommand.getTargetIndex().getZeroBased() \u003d\u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    \u0026\u0026 \"user/photo.jpg\".equals(photoCommand.getPhoto().getPath()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void parsePathWithWhitespace() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            PhotoCommand cmd \u003d new PhotoCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            cmd \u003d cmd.parse(\"   2 user/abc efg/photo.jpg   \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            assertTrue(cmd.getTargetIndex().getZeroBased() \u003d\u003d 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                    \u0026\u0026 \"user/abc efg/photo.jpg\".equals(cmd.getPhoto().getPath()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void isValidPhotoPath () {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // null path"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Photo.isValidPhotoPath(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(Photo.isValidPhotoPath(\"docs/images/yinya998.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(Photo.isValidPhotoPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(Photo.isValidPhotoPath(\"docs/images/test6.pn111111g\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void testNotImage () {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(PhotoCommand.isImage(\"docs/images/yinya998.png\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // invalid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(PhotoCommand.isImage(\"docs/diagrams/ArchitectureDiagram.pptx\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertFalse(PhotoCommand.isImage(\"docs/images/test6.pn111111g\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void testFileSize () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(PhotoCommand.isPhotoSizeWithinRange(\"docs/images/yinya998.png\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertEventCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " * Tests for SwitchCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void switchTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        SwitchCommand switcher \u003d new SwitchCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertCommandSuccess(switcher,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new ModelManager(getTypicalAddressBook(), new UserPrefs()),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new CommandHistory(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \"Switched to events view.\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new ModelManager(getTypicalAddressBook(), new UserPrefs()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEventCommandSuccess(switcher,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new ModelManager(getTypicalAddressBook(), new UserPrefs()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new CommandHistory(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                \"Switched to persons view.\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new ModelManager(getTypicalAddressBook(), new UserPrefs()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHOTO_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + PHOTO_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        + ADDRESS_DESC_BOB + PHOTO_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 23,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddRCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Unit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class AddRCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Interval interval \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Unit unit \u003d new Unit(\"min\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private AddRCommandParser parser \u003d new AddRCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private String message \u003d \"Invalid command format! \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"addR: Adds an reminder to the address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Parameters: EVENT_LIST_INDEX (must be a positive integer) t/INTERVAL u/UNIT\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            + \"Example: addR 1 t/3 u/MIN\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void parse_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertParseFailure(parser, \"t/2 u/min\", message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertParseFailure(parser, \"2 t/2 u/random\", \"Units should be selected from min, hour and year\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                instanceof FindCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertTrue(parser.parseCommand(FindCommand.COMMAND_WORD + \" n/baz\") instanceof FindCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        //todo"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 10,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_NO_PARAMETER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseFailure(parser, \"     \", MESSAGE_NO_PARAMETER + \u0027\\n\u0027 + FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String Command \u003d \"n/Alice Bob\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String[] splitedKeywords \u003d Command.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(splitedKeywords)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e[] predicatesList \u003d predicates.toArray(new Predicate[predicates.size()]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Predicate\u003cPerson\u003e PredicateResult \u003d Stream.of(predicatesList).reduce(condition -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        no leading and trailing whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new FindCommand(PredicateResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertParseSuccess(parser, \"n/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 18,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MeetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.logic.commands.MeetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Block;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class MeetCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(MeetCommandParser.DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Description DEFAULT_DESCRIPTION \u003d new Description(MeetCommandParser.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Venue DEFAULT_VENUE \u003d new Venue(MeetCommandParser.DEFAULT_VENUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final DateTime DEFAULT_START_TIME \u003d new DateTime(MeetCommandParser.DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final DateTime DEFAULT_END_TIME \u003d new DateTime(MeetCommandParser.DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Label DEFAULT_LABEL \u003d new Label(MeetCommandParser.DEFAULT_LABEL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d Duration.ofHours(2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public static final Block DEFAULT_BLOCK \u003d new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testSingleIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommandParser parser \u003d new MeetCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1, 2, 3, 4, 5))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3 4 5\", expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseFailure(parser, \"t/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                MeetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withTags(Set.of(new Tag(\"friends\")))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 t/friends\", expectedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1, 9))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withTags(Set.of(new Tag(\"friends\"), new Tag(\"colleagues\")))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 1 1 9 9 9 9 t/friends t/friends t/colleagues t/colleagues\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                expectedCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withName(new Name(\"Some other name\"))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 n/ Some other name\", expectedCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withDescription(new Description(\"Some other description\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 d/ Some other description \", expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withVenue(new Venue(\"Some other venue\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 v/ Some other venue \", expectedCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withStartDateTime(new DateTime(\"2019-01-01 01:23:45\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 s/2019-01-01 01:23:45\", expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withEndDateTime(new DateTime(\"2019-01-01 01:23:45\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 e/2019-01-01 01:23:45\", expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withLabel(new Label(\"iamanewlabel\"))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 l/ iamanewlabel \", expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withDuration(Duration.parse(\"P0DT23H0M0.0S\"))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 duration/1 -1 0 0\", expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(new Block(LocalTime.of(2, 0), LocalTime.of(4, 0), false))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/02:00 04:00\", expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/!04:00 02:00\", expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.morning(false))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/morning\", expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.afternoon(false))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/afternoon\", expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.evening(false))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/evening\", expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.night(false))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/night\", expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.midnight(false))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/midnight\", expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.breakfast(false))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/breakfast\", expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        expectedCommand \u003d new DefaultMeetCommandBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withBlock(Block.breakfast(true))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .withIndices(createIndexSetFrom(1))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertParseSuccess(parser, \"1 block/!breakfast\", expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * This method creates a set of indices using variable one-based indices in ints."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @param oneBased The variable number of one based indices."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * @return The HashSet of one based indices."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private Set\u003cIndex\u003e createIndexSetFrom(int... oneBased) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Set\u003cIndex\u003e indices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        for (int i : oneBased) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            indices.add(Index.fromOneBased(i));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    private class DefaultMeetCommandBuilder {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private DateTime startDateTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private DateTime endDateTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Label label;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        private Block block;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.indices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.venue \u003d DEFAULT_VENUE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.startDateTime \u003d DEFAULT_START_TIME;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.endDateTime \u003d DEFAULT_END_TIME;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.label \u003d DEFAULT_LABEL;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.duration \u003d DEFAULT_DURATION;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.block \u003d DEFAULT_BLOCK;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withIndices(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.indices \u003d indices;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withName(Name name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withDescription(Description description) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withVenue(Venue venue) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withLabel(Label label) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.label \u003d label;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        DefaultMeetCommandBuilder withBlock(Block block) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            this.block \u003d block;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * Builds the MeetCommand based on the attributes provided."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         * @return The resulting MeetCommand."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        MeetCommand build() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "            return new MeetCommand(this.indices,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.name,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.description,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.venue,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.startDateTime,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.endDateTime,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.label,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.duration,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.tags,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                    this.block);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 253
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReminderCheckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderCheckTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return reminders;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        public ReminderList getReminderListTest() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            //System.out.println(\"in addressbook line 148\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            return (ReminderList) reminders;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 14,
      "jwl1997": 7,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 3,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/BlockTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "public class BlockTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void keywordsTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.morning(false), new Block(LocalTime.parse(\"06:00\"), LocalTime.parse(\"12:00\"), false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.afternoon(false), new Block(LocalTime.parse(\"12:00\"), LocalTime.parse(\"18:00\"), false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.evening(false), new Block(LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\"), false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.night(false), new Block(LocalTime.parse(\"20:00\"), LocalTime.parse(\"00:00\"), false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.midnight(false), new Block(LocalTime.parse(\"00:00\"), LocalTime.parse(\"06:00\"), false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.school(false), new Block(LocalTime.parse(\"08:00\"), LocalTime.parse(\"18:00\"), false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.breakfast(false), new Block(LocalTime.parse(\"07:00\"), LocalTime.parse(\"10:00\"), false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.lunch(false), new Block(LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"), false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.dinner(false), new Block(LocalTime.parse(\"17:00\"), LocalTime.parse(\"20:00\"), false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.supper(false), new Block(LocalTime.parse(\"21:00\"), LocalTime.parse(\"01:00\"), false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.brunch(false), new Block(LocalTime.parse(\"10:00\"), LocalTime.parse(\"13:00\"), false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void negationTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.morning(true), new Block(LocalTime.parse(\"12:00\"), LocalTime.parse(\"06:00\"), false));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(Block.morning(true), new Block(LocalTime.parse(\"06:00\"), LocalTime.parse(\"12:00\"), true));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertNotEquals(Block.morning(true), Block.morning(false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void nonBlockTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new Block(LocalTime.of(1, 1), LocalTime.of(1, 1), false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), true),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new Block(LocalTime.of(1, 1), LocalTime.of(1, 1), false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), true),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                new Block(LocalTime.of(1, 1), LocalTime.of(1, 1), true));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void testWithin() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block nonBlock \u003d new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(nonBlock.isWithinBlock(LocalDateTime.MIN, LocalDateTime.MAX));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block anotherBlock \u003d new Block(LocalTime.of(9, 0), LocalTime.of(19, 0), false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 1, 9, 0),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 1, 19, 0)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 1, 8, 59),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 1, 19, 0)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 1, 9, 0),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 1, 19, 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 1, 9, 0),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 2, 19, 0)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        anotherBlock \u003d new Block(LocalTime.of(22, 0), LocalTime.of(2, 0), false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 1, 22, 0),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 2, 2, 0)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(anotherBlock.isWithinBlock(LocalDateTime.of(1, 1, 2, 2, 0),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "                LocalDateTime.of(1, 1, 2, 22, 0)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block nonBlock \u003d new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertTrue(nonBlock.equals(nonBlock));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(nonBlock.equals(new Object()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block anotherBlock \u003d new Block(LocalTime.of(9, 0), LocalTime.of(19, 0), false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertFalse(nonBlock.equals(anotherBlock));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block nonBlock \u003d new Block(LocalTime.of(0, 0), LocalTime.of(0, 0), false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(nonBlock.toString(), \"any time\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block anotherBlock \u003d new Block(LocalTime.of(9, 0), LocalTime.of(19, 0), false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(anotherBlock.toString(), \"09:00 to 19:00\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        anotherBlock \u003d new Block(LocalTime.of(2, 0), LocalTime.of(22, 0), true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(anotherBlock.toString(), \"22:00 to 02:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public void getFirst() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        Block block \u003d new Block(LocalTime.of(12, 34), LocalTime.of(23, 45), false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(block.getFirst(), LocalTime.of(12, 34));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        block \u003d new Block(LocalTime.of(12, 34), LocalTime.of(23, 45), true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertEquals(block.getFirst(), LocalTime.of(23, 45));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // Keywords match phone, email and address and tag, but does not match name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"family\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"family\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 24,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhotoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhotoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Photo(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void constructor_invalidPhoto_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String invalidPhoto \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Photo(invalidPhoto));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/DuplicateReminderExceptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class DuplicateReminderExceptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void createException_getMessage_checkCorrectness() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        thrown.expect(NotFoundException.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Exception exception \u003d new DuplicateReminderException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"Operation would result in duplicate reminders\", exception.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/IntervalTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class IntervalTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final Interval interval \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void constructor_test() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Interval interval1 \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"2\", interval1.getIntervalInt());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"min\", interval1.getUnit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void isValidInterval_test() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Interval.isValidInterval(\"2\", \"min\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Interval.isValidInterval(\"2\", \"MIN\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Interval.isValidInterval(\"3\", \"Hour\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertFalse(Interval.isValidInterval(\"2\", \"random\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Interval interval1 \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"2min\", interval1.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/NotFoundExceptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class NotFoundExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void createException_toString_checkCorrectness() throws Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Exception exception \u003d new NotFoundException();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"Reminder not found\", exception.getMessage());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/ReminderListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static Interval interval1 \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final Reminder reminder \u003d new Reminder(EVENT1, interval1, \"Reminder message\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void add_hasDuplicate_checkCorrectness() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        thrown.expect(DuplicateReminderException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ReminderList list \u003d new ReminderList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        list.add(reminder);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        list.add(reminder);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void equals_checkCorrectness() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ReminderList list1 \u003d new ReminderList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        ReminderList list2 \u003d new ReminderList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(list1, list1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(list1, list2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotEquals(list1, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotEquals(list1, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/ReminderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.EVENT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static Event event1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static String message1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static Interval interval1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static boolean show1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static boolean notShow1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        event1 \u003d new Event(EVENT1.getName(), EVENT1.getDescription(), EVENT1.getVenue(), EVENT1.getStartDateTime(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                EVENT1.getEndDateTime(), EVENT1.getLabel());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        message1 \u003d \"Reminder: You have an Event!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        interval1 \u003d new Interval(\"2\", \"min\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void createReminder_checkCorrectness() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotNull(reminder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(event1, reminder.getEvent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(message1, reminder.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void createReminder2_checkCorrectness() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotNull(reminder);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(event1, reminder.getEvent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(message1, reminder.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(interval1, reminder.getInterval());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void copyReminder_testing() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder1 \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder2 \u003d new Reminder(reminder1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(reminder1, reminder2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder1 \u003d new Reminder((Event) EVENT1, message1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder2 \u003d new Reminder((Event) EVENT1, message1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(reminder1, reminder2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void setMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotNull(reminder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        reminder.setMessage(\"testing set message method\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"testing set message method\", reminder.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void toString_testing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotNull(reminder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        builder.append(\" Message: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getMessage())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getEvent().getDescription())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getEvent().getVenue())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Label: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getEvent().getLabel())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Start Date Time: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getEvent().getStartDateTime())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" End Date Time: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getEvent().getEndDateTime())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(\" Interval: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                .append(reminder.getInterval());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        String expected \u003d builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(expected, reminder.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void hashCode_testing() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Reminder reminder \u003d new Reminder(event1, interval1, message1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertNotNull(reminder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(Objects.hash(reminder.getEvent(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "                reminder.getInterval(), reminder.getMessage()), reminder.hashCode());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/UnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class UnitTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private static final Unit unit \u003d new Unit(\"min\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void constructor_test() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Unit unit2 \u003d new Unit(\"min\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(\"min\", unit2.getUnit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void isValidTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"min\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"mIn\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"YEar\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertTrue(Unit.isValidUnit(\"YEAR\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertFalse(Unit.isValidUnit(\"random\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public void equalTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Unit unit2 \u003d new Unit(\"min\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        Unit unit3 \u003d new Unit(\"Min\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(unit2, unit);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        assertEquals(unit3, unit);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private static final String INVALID_PHOTO \u003d \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new JsonAdaptedPerson("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new JsonAdaptedPerson("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                new JsonAdaptedPerson("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, null, INVALID_PHOTO, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PHOTO, invalidTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 18,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Adds a new {@code Event} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public AddressBookBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 9,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.logic.commands.EditECommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * A utility class to help with building EditEventDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EditEventDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private EditEventDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.descriptor \u003d new EditEventDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder(Event event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setName(event.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setDescription(event.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setVenue(event.getVenue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setStartDateTime(event.getStartDateTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setEndDateTime(event.getEndDateTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setLabel(event.getLabel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setReminders(event.getReminders());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setPersons(event.getPersons());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Name} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Description} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setVenue(new Venue(venue));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setStartDateTime(new DateTime(startDateTime));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code EndDateTime} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setEndDateTime(new DateTime(endDateTime));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Label} of the {@code EditEventDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptorBuilder withLabel(String label) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        descriptor.setLabel(new Label(label));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EditEventDescriptor build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public EditPersonDescriptorBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        descriptor.setPhoto(new Photo(photo));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 11,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.event.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2103 project meeting\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"quick meeting\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"COM1 LEVEL2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_STARTDATETIME \u003d \"2019-01-31 14:00:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_ENDDATETIME \u003d \"2019-01-31 16:00:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final String DEFAULT_LABEL \u003d \"important\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private DateTime endDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private Set\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private ReminderList reminders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        startDateTime \u003d new DateTime(DEFAULT_STARTDATETIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        endDateTime \u003d new DateTime(DEFAULT_ENDDATETIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        label \u003d new Label(DEFAULT_LABEL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        reminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        name \u003d eventToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        venue \u003d eventToCopy.getVenue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        startDateTime \u003d eventToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        endDateTime \u003d eventToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        label \u003d eventToCopy.getLabel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        persons \u003d eventToCopy.getPersons();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        reminders \u003d eventToCopy.getReminders();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Name} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Venue} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code StartDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.startDateTime \u003d new DateTime(startDateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code EndDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.endDateTime \u003d new DateTime(endDateTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Sets the {@code Label} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public EventBuilder withLabel(String label) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        this.label \u003d new Label(label);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new Event(name, description, venue, startDateTime, endDateTime, label, persons, reminders);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jwl1997": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final String DEFAULT_PHOTO \u003d \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photo \u003d new Photo(DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photo \u003d personToCopy.getPhoto();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public PersonBuilder withPhoto(String photo) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        this.photo \u003d new Photo(photo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        return new Person(name, phone, email, address, photo, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 13,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        sb.append(PREFIX_PHOTO + person.getPhoto().getPath() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 2,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Event EVENT1 \u003d new EventBuilder().withName(\"event1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withDescription(\"CS2103 lecture\").withVenue(\"LT16\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-01-01 14:00:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-01-01 16:00:00\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withLabel(\"important\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Event EVENT2 \u003d new EventBuilder().withName(\"event2\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withDescription(\"CS2103 tutorial\").withVenue(\"com1 b1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-01-21 14:00:00\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-01-21 15:00:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withLabel(\"urgent\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Event EVENT3 \u003d new EventBuilder().withName(\"event3\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withDescription(\"CS2103 lab\").withVenue(\"com1 level1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-01-31 14:00:00\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-01-31 16:00:00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withLabel(\"noturgent\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Event EVENT4 \u003d new EventBuilder().withName(\"event4\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withDescription(\"CS2103 project meeting\").withVenue(\"central library\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-02-01 14:00:00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-02-01 16:00:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            .withLabel(\"highpriority\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    private TypicalEvents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        for (Person person : TypicalPersons.getTypicalPersons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EVENT1, EVENT2, EVENT3, EVENT4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwl1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 17,
      "jwl1997": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwl1997"
        },
        "content": "    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwl1997": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withPhoto(\"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Person YINYA \u003d new PersonBuilder().withName(\"Chen Yinya\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withAddress(\"Utown\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"yinya@example.com\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withTags(\"teammate\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public static final Person KAI \u003d new PersonBuilder().withName(\"Kai Song\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withAddress(\"PGP\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withEmail(\"kai@example.com\").withPhone(\"67890\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            .withTags(\"owesMoney\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 24,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalReminders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Interval;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Event EVENT1 \u003d new EventBuilder().withName(\"event1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withDescription(\"CS2103 lecture\").withVenue(\"LT16\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-01-01 14:00:00\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-01-01 16:00:00\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withLabel(\"important\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Event EVENT2 \u003d new EventBuilder().withName(\"event2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withDescription(\"CS2103 tutorial\").withVenue(\"com1 b1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withStartDateTime(\"2020-01-21 14:00:00\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withEndDateTime(\"2020-01-21 15:00:00\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            .withLabel(\"urgent\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Reminder REMINDER1 \u003d new Reminder(EVENT1, new Interval(\"2\", \"min\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Reminder REMINDER2 \u003d new Reminder(EVENT1, new Interval(\"3\", \"min\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static final Reminder REMINDER3 \u003d new Reminder(EVENT2, new Interval(\"2\", \"min\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            \"Reminder: You have an Event!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    private TypicalReminders() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (Event event : TypicalEvents.getTypicalEvents()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (Person person : TypicalPersons.getTypicalPersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        for (Reminder reminder : getTypicalReminders()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(REMINDER1, REMINDER2, REMINDER3));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 2,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Photo photo \u003d new Photo(\"D;dir/file.jpg\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, photo, Collections.emptySet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 3,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ReminderCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderCardTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ReminderListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "public class ReminderListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JillWangJill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JillWangJill": 5
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_AMY + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC + PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + PHOTO_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 25,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "import guitests.guihandles.PersonInfoHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     *     return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    public PersonInfoHandle getPersonInfo() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        return mainWindowHandle.getPersonInfo();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 20,
      "-": 270
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 1,
      "-": 297
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KAI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.YINYA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String expectedResultMessage \u003d \"3 persons listed:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Benson Meier, Daniel Meier, \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Elle Meyer, \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                .setFilteredList(expectedModel, BENSON, ELLE, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"1 persons listed:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Carl Kurz, \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"2 persons listed:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Benson Meier, Daniel Meier, \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 2 person found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, ELLE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"2 persons listed:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Daniel Meier, \\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Elle Meyer, \\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find person in address book,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        keyword is same as name but of different case -\u003e 2 person found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"2 persons listed:\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Daniel Meier, \\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Elle Meyer, \\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"0 persons listed:\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: fuzzy search, name is substring of keyword -\u003e 1 persons found*/"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"1 persons listed:\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Daniel Meier, \\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"0 persons listed:\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"1 persons listed:\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Daniel Meier, \\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find address of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find email of person in address book -\u003e 2 persons found */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"2 persons listed:\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Daniel Meier, \\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Elle Meyer, \\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 2 persons found */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, ALICE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"2 persons listed:\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Alice Pauline, Daniel Meier, \\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"1 persons listed:\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Daniel Meier, \\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedResultMessage \u003d \"0 persons listed:\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Exact Search:\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \" Fuzzy Search:\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + \"Wildcard Search:\\n\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in all fields if there\u0027s no prefix -\u003e 2 persons found*/"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" yinya PGP\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, YINYA, KAI);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search multiple keywords in same fields -\u003e 4 persons found*/"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" t/friends teammate\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, ALICE, YINYA);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in different fields -\u003e 1 persons found*/"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" t/friends n/daniel\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: search keywords in different fields -\u003e 0 persons found*/"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" a/utown t/owesMoney\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Also verifies that the status bar remains unchanged,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * and the command box has the default style class, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 148,
      "-": 158
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "// import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        getPersonInfo().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yonggqiii"
        },
        "content": "        // assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yonggqiii": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/systemtests/PhotoCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yinya998"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHOTO_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yinya998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yinya998"
        },
        "content": "public class PhotoCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    public void addPhoto() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yinya998"
        },
        "content": "         * -\u003e added*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                + PHOTO_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String photoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // change photo image"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        path \u003d \"docs/images/user_photo.png\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photoCommand \u003d PhotoCommand.COMMAND_WORD + \" \" + index + \" \" + path;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        getMainWindowHandle().getCommandBox().run(photoCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertEquals(\"Added photo to person: data/user_photo.png\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                getMainWindowHandle().getResultDisplay().getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // input invalid photo image path"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        path \u003d \"docs/images/test6.pn1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photoCommand \u003d PhotoCommand.COMMAND_WORD + \" \" + index + \" \" + path;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        getMainWindowHandle().getCommandBox().run(photoCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertEquals(\"The path of the photo is invalid\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                getMainWindowHandle().getResultDisplay().getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // input invalid photo image path"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        path \u003d \"docs/diagrams/ArchitectureDiagram.pptx\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photoCommand \u003d PhotoCommand.COMMAND_WORD + \" \" + index + \" \" + path;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        getMainWindowHandle().getCommandBox().run(photoCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertEquals(\"The file is not an image\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                getMainWindowHandle().getResultDisplay().getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        // delete photo"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        photoCommand \u003d PhotoCommand.COMMAND_WORD + \" \" + index + \" clear\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        getMainWindowHandle().getCommandBox().run(photoCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertEquals(PhotoCommand.MESSAGE_CLEAR_PHOTO_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                getMainWindowHandle().getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yinya998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yinya998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yinya998"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yinya998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yinya998": 103
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yinya998"
        },
        "content": "        Path filePath \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                TestUtil.getFilePathInSandboxFolder("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yinya998"
        },
        "content": "                        \"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yinya998": 3,
      "-": 50
    }
  },
  {
    "path": "test/data/JsonAddressBookStorageTest/testingName.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"photo\" : \"src/main/resources/images/userPhoto/DEFAULT_PHOTO.png\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "    \"modelPhoto\" : null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"events\" : [ ],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "  \"reminders\" : [ ]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daDangminh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daDangminh": 61
    }
  }
]
