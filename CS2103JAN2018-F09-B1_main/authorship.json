[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Your TA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-F09-B1/main[image:https://travis-ci.org/CS2103JAN2018-F09-B1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-F09-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F09-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop \"Your TA\" application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* It is an address book cum scheduler targeted at making tracking students for NUS student teaching assistants\u0027 easier."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* This application was adapted from https://github.com/nus-cs2103-AY1718S2/addressbook-level4[AddressBook Level-4]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Application icon made by http://www.freepik.com[Freepik] from https://www.flaticon.com[Flaticon]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Default display picture made by https://www.flaticon.com/authors/iconnice[Iconnice] from https://www.flaticon.com[Flaticon]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Alaru": 5,
      "-": 34
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    archiveName \u003d \"yourta.jar\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00272.12\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 206
    }
  },
  {
    "path": "collated/functional/Alaru-reused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "# Alaru-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\commons\\util\\HashUtil.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static String toHex(byte[] hashValue) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (byte b : hashValue) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            sb.append(Integer.toString((b \u0026 0xff) + 0x100, 16).substring(1));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 12,
      "Pearlissa": 1
    }
  },
  {
    "path": "collated/functional/Alaru.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Alaru"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\commons\\util\\DeleteUtil.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DeleteUtil {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteUtil.class);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Goes through the list of files to be deleted and only deletes those that are not in use"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param itemsToDelete List of items (files) to delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param persons List of Person objects in the addressbook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void clearImageFiles(List\u003cString\u003e itemsToDelete, ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (String item : itemsToDelete) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            boolean notUsed \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            for (Person p : persons) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                if (p.getDisplayPic().toString().equals(item) || item.equals(DisplayPic.DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    notUsed \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (notUsed) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                if (deleteFile(item)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    logger.info(\"Successfully deleted image at \" + item + \" from disk.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    logger.info(\"Unsuccessful in deleting image at \" + item + \" from disk.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Delete a file at the given filepath."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filepath where the file is located."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean deleteFile(String filepath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toDelete \u003d new File(filepath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return toDelete.delete();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\commons\\util\\FileUtil.java"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String getFileType(String filePath) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        int lastDot \u003d trimmedFilePath.lastIndexOf(\u0027.\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (lastDot \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(\"THE FILE MUST HAVE A FILE EXTENSION.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return trimmedFilePath.substring(lastDot + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Copies a file over. The new file will be binary equivalent to the original."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void copyFile(String origFile, File outputFile) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        byte[] buffer \u003d new byte[4096];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        createIfMissing(outputFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        BufferedInputStream bis \u003d new BufferedInputStream(new FileInputStream(origFile));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        BufferedOutputStream bos \u003d new BufferedOutputStream(new FileOutputStream(outputFile));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        int fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        while (fileBytes !\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bos.write(buffer, 0, fileBytes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bis.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bos.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Copies an image from the filepath provided to the specified destination"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void copyImage(String image, File toSave) throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            copyFile(image, toSave);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(\"IMAGE FILE COULD NOT BE COPIED.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\commons\\util\\HashUtil.java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class HashUtil {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * This method uses SHA-256 to hash the 2 input strings and returns it."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String generateUniqueName(String details) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            byte[] hashValue \u003d digest.digest(details.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return toHex(hashValue);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchAlgorithmException nae) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return details;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Turns a byte array into a string hex code"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * toHex() code referenced from:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * https://stackoverflow.com/questions/36162622/how-do-i-generate-a-hash-code-with-hash-sha256-in-java"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param hashValue is a byte array"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return A hex encode of a byte array"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommand.java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markPart\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the participation for a student \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_MARK_PARTICIPATION + \"[MARKS]\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MARK_PARTICIPATION + \"50\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Participation marked for %1$s!\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER_VALUE \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The marks/ field cannot be empty and it must be an integer from 0 to 100 inclusive\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Integer marks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person personToMark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person updatedPerson;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates an MarkCommand to add the participation marks of {@code marks}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public MarkCommand(Index index, Integer marks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            model.updatePerson(personToMark, updatedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"There cannot be a duplicate when adding participation\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToMark.getName().toString()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        personToMark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updatedPerson \u003d createUpdatedPerson(personToMark);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToMark}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * edited with the new marks."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person createUpdatedPerson(Person personToMark) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assert personToMark !\u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Integer newMarks \u003d marks + personToMark.getParticipation().getMarks();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        newMarks \u003d (newMarks \u003e 100) ? 100 : newMarks;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Participation updatedPart \u003d new Participation(newMarks);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(personToMark.getName(), personToMark.getMatricNumber(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToMark.getPhone(), personToMark.getEmail(), personToMark.getAddress(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToMark.getDisplayPic(), updatedPart, personToMark.getTags());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof MarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MarkCommand) other).targetIndex)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 marks.equals(((MarkCommand) other).marks));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UpdateDisplayCommand.java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateDP\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the display picture for a student \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_DISPLAY_PIC + \"[PATH TO IMAGE]\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DISPLAY_PIC + \"C:\\\\Users\\\\Name\\\\Desktop\\\\John.png\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display Picture successfully updated for %1$s!\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //private final EditCommand.EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final DisplayPic dp;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person personToUpdate;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person updatedPerson;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates an MarkCommand to add the participation marks of {@code marks}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UpdateDisplayCommand(Index index, DisplayPic dp) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(dp);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.dp \u003d dp;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            model.updatePerson(personToUpdate, updatedPerson);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"There cannot be a duplicate when just updating the display pic\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToUpdate.getName().toString()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        personToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updatedPerson \u003d createUpdatedPerson(personToUpdate, dp);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToUpdate}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * edited with the new Display Pic."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person createUpdatedPerson(Person personToUpdate, DisplayPic dp)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assert personToUpdate !\u003d null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Name updatedName \u003d personToUpdate.getName();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MatriculationNumber updatedMatricNumber \u003d personToUpdate.getMatricNumber();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Phone updatedPhone \u003d personToUpdate.getPhone();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Email updatedEmail \u003d personToUpdate.getEmail();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Address updatedAddress \u003d personToUpdate.getAddress();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic updatedDisplay \u003d DisplayPicStorage.toSaveDisplay(dp,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToUpdate.getDisplayPic(), personToUpdate.getDetails());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Participation updatedPart \u003d personToUpdate.getParticipation();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToUpdate.getTags();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(updatedName, updatedMatricNumber, updatedPhone, updatedEmail, updatedAddress, updatedDisplay,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updatedPart, updatedTags);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof UpdateDisplayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UpdateDisplayCommand) other).targetIndex)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 dp.equals(((UpdateDisplayCommand) other).dp));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManager.java"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears the data folder of redundant images"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearRedundantImages() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        logger.info(\"Deleting any unused display pictures\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteUtil.clearImageFiles(model.getItemList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        model.clearDeleteItems();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MarkCommandParser.java"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an MarkCommand object for execution."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MARK_PARTICIPATION);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Integer marks \u003d ParserUtil.parseMarks(argMultimap.getValue(PREFIX_MARK_PARTICIPATION).get());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            checkArgument(Participation.isValidParticipation(Integer.toString(marks)),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    Participation.MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new MarkCommand(index, marks);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalArgumentException | IllegalValueException ie) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code String displayPic} into an {@code DisplayPic}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException if the given {@code displayPic} is invalid."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static DisplayPic parseDisplayPic(String displayPic)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (displayPic.equals(\"\")) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new DisplayPic();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String trimmedDisplayPath \u003d displayPic.trim();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidPath(trimmedDisplayPath)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                throw new IllegalValueException(DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidImage(trimmedDisplayPath)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                throw new IllegalValueException(DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new DisplayPic(displayPic);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e displayPic} into an {@code Optional\u003cDisplayPic\u003e}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * if {@code displayPic} is present."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cDisplayPic\u003e parseDisplayPic(Optional\u003cString\u003e displayPic) throws IllegalValueException {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (displayPic.isPresent()) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.of(parseDisplayPic(displayPic.get()));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e displayPic} into an {@code Optional\u003cDisplayPic\u003e}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * if {@code displayPic} is present."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cDisplayPic\u003e parseEditDisplayPic(Optional\u003cString\u003e displayPic) throws IllegalValueException {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(displayPic);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return displayPic.isPresent() ? Optional.of(parseDisplayPic(displayPic.get())) : Optional.empty();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses {@code String marks} into a {@code Integer marks}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Integer parseMarks(String marks) throws IllegalValueException {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Integer.parseInt(marks);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e marks} into an {@code Optional\u003cInteger\u003e} if {@code marks} is present."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param marks are the marks to add"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cInteger\u003e parseMarks(Optional\u003cString\u003e marks) throws IllegalValueException {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return marks.isPresent() ? Optional.of(parseMarks(marks.get())) : Optional.empty();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\UpdateDisplayCommandParser.java"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandParser implements Parser\u003cUpdateDisplayCommand\u003e {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an MarkCommand object for execution."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UpdateDisplayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DISPLAY_PIC);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            DisplayPic dp \u003d ParserUtil.parseEditDisplayPic(argMultimap.getValue(PREFIX_DISPLAY_PIC)).get();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new UpdateDisplayCommand(index, dp);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an item to be scheduled to be deleted to the address book."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDeleteItem(String filepath) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        itemList.add(filepath);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes all items to be scheduled to be deleted to the address book."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearItems() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        itemList.clear();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        return itemList.getItemList();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\item\\UniqueItemList.java"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UniqueItemList {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final ArrayList\u003cString\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if the list contains an equivalent item/filepath as the given argument."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Adds a filepath to the list."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void add(String toAdd) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!contains(toAdd)) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Removes the equivalent item/filepath from the list."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void remove(String toRemove) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void setItemList(List\u003cString\u003e replacement) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (String item : replacement) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!this.internalList.contains(item)) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                this.internalList.add(item);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Puts all the display picture paths into the UniqueItemList"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param persons is a UniquePersonList which contains all the people in the application"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void updateItemList(ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            add(p.getDisplayPic().toString());"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.internalList.clear();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        List\u003cString\u003e toReturn \u003d new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Collections.unmodifiableList(toReturn);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public synchronized void clearDeleteItems() {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.clearItems();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Collections.unmodifiableList(filteredDeleteItems);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\DisplayPic.java"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPic {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_DISPLAY_PIC \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_IMAGE_LOCATION \u003d \"data/displayPic/\";"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should lead to a file that exists.\";"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NOT_IMAGE \u003d"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should point to a valid image file.\";"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NO_EXTENSION \u003d"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should point to a file with an extension.\";"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public final String originalFilePath;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public DisplayPic() {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d originalFilePath \u003d DEFAULT_DISPLAY_PIC;"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an {@code DisplayPic}."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath A valid string containing the path to the file."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public DisplayPic(String filePath) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.isValidPath(filePath), MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.hasValidExtension(filePath), MESSAGE_DISPLAY_PIC_NO_EXTENSION);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.isValidImage(filePath), MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d originalFilePath \u003d filePath;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates the duplicated image filename."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String getSaveDisplay(String personDetails) throws IllegalValueException {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (value.equals(DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String fileType \u003d FileUtil.getFileType(value);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String uniqueFileName \u003d DisplayPicStorage.generateDisplayPicName(personDetails, value, fileType);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d DEFAULT_IMAGE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return uniqueFileName;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Saves the display picture to the specified storage location."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void saveDisplay(String uniqueName) throws IllegalValueException {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (value.equals(DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String fileType \u003d FileUtil.getFileType(value);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPicStorage.saveDisplayPic(uniqueName, originalFilePath, fileType);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d DEFAULT_IMAGE_LOCATION + uniqueName + \u0027.\u0027 + fileType;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void updateToDefault() {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d DEFAULT_DISPLAY_PIC;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value.equals(DEFAULT_DISPLAY_PIC);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof DisplayPic // instanceof handles nulls"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.value.equals(((DisplayPic) other).value)); // state check"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\exceptions\\IllegalMarksException.java"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class IllegalMarksException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public IllegalMarksException() {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        super(\"Mark values are not allowed\");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Participation.java"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PARTICIPATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Participation marks cannot be negative or over 100!\";"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String UI_DISPLAY_HEADER \u003d \"Participation marks: \";"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public final Integer threshold;"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Integer value;"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs a {@code Participation}."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d 0;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation(String value) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(isValidParticipation(value), MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation(Integer value) {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(isValidParticipation(Integer.toString(value)), MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Integer getMarks() {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean overThreshold() {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return (value \u003e\u003d threshold);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates the participation mark"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param value"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if it is valid"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidParticipation(String value) {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Integer.parseInt(value) \u003c\u003d 100 \u0026\u0026 Integer.parseInt(value) \u003e -1;"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalMarksException();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toDisplay() {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return UI_DISPLAY_HEADER + Integer.toString(value);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof Participation // instanceof handles nulls"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.value.equals(((Participation) other).value)); // state check"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\storage\\DisplayPicStorage.java"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPicStorage {"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String SAVE_LOCATION \u003d \"data/displayPic/\";"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INTERNAL_DEFAULT_PIC_SAVE_LOCATION \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DisplayPicStorage.class);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if a given string points to a valid file."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidPath(String test) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (MainApp.class.getResourceAsStream(test) \u003d\u003d null) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            File file \u003d new File(test);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return FileUtil.isFileExists(file);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Checks if the image file provided can be opened properly as an image"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param test is a filepath to an image file"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return if the filePath it is pointing to is am image file that can be opened"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidImage(String test) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            InputStream imageStream \u003d ImageIO.class.getResourceAsStream(test);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (imageStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return openImage(test);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            BufferedImage image \u003d ImageIO.read(imageStream);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return image !\u003d null;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return openImage(test);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Attempts to open a file to see if it is an image"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filepath is the path to a file"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return whether the file located at the specified filepath is a valid image file"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static boolean openImage(String filepath) {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            BufferedImage image \u003d ImageIO.read(new File(filepath));"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return image !\u003d null;"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if a given string points to a valid file that has an extension."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean hasValidExtension(String test) {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            FileUtil.getFileType(test);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates a unique and unused file name to store the image file as"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param name is the unique details of a person"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath the filepath of the image to read from"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param fileType the extension of the imagefile"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return a String that will be used as the filename and is unique"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException the filepath is an illegal value"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String generateDisplayPicName(String name, String filePath, String fileType)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String uniqueFileName \u003d HashUtil.generateUniqueName(name);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toSave \u003d new File(SAVE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        while (FileUtil.isFileExists(toSave)) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            uniqueFileName \u003d HashUtil.generateUniqueName(uniqueFileName);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            toSave \u003d new File(SAVE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return uniqueFileName;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Tries to save a copy of the image provided by the user into a default location."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param uniqueName the name of the new image file"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath the location of the current image file"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param fileType the file extension of the current image file"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void saveDisplayPic(String uniqueName, String filePath, String fileType)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toSave \u003d new File(SAVE_LOCATION + uniqueName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        FileUtil.copyImage(filePath, toSave);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        logger.info(\"Successfully saved \" + uniqueName + \u0027.\u0027 + fileType + \" to disk.\");"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Fetches an image from the hard drive to display"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param dp is a DisplayPic object"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return An image to display"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Image fetchDisplay(DisplayPic dp) {"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (dp.toString().equals(INTERNAL_DEFAULT_PIC_SAVE_LOCATION)) {"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return AppUtil.getImage(INTERNAL_DEFAULT_PIC_SAVE_LOCATION);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String filePath \u003d dp.toString();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidPath(filePath) || !DisplayPicStorage.isValidImage(filePath)) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                logger.fine(\"Unable to open image at : \" + dp.toString()"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                        + \", retrieving default display picture.\");"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return AppUtil.getImage(INTERNAL_DEFAULT_PIC_SAVE_LOCATION);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            File input \u003d new File(dp.toString());"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new Image(input.toURI().toString());"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Checks whether the display picture filepath between 2 DisplayPic objects are the same."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * If they are not the same, the new display picture (in @code display1) will be updated and save."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static DisplayPic toSaveDisplay(DisplayPic display1, DisplayPic display2, String details) {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!display1.equals(display2)) {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                String uniqueName \u003d display1.getSaveDisplay(details);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                display1.saveDisplay(uniqueName);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return display1;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                display1.updateToDefault();"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return display1;"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return display1;"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedItem.java"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class XmlAdaptedItem {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Filepath is missing.\";"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an XmlAdaptedItem."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public XmlAdaptedItem() {}"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an {@code XmlAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public XmlAdaptedItem(String filepath) {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Converts this jaxb-friendly adapted Item object into a string"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (this.filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return filepath;"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!(other instanceof XmlAdaptedItem)) {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        XmlAdaptedItem otherTask \u003d (XmlAdaptedItem) other;"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Objects.equals(filepath, otherTask.filepath);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonCard.java"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private void initDisplay() {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Image image \u003d DisplayPicStorage.fetchDisplay(person.getDisplayPic());"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        displayPic.setFill(new ImagePattern(image));"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (this.person.getParticipation().overThreshold()) {"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic.setEffect(new DropShadow(+25d, 0d, +2d, Color.CHARTREUSE));"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic.setEffect(new DropShadow(+25d, 0d, +2d, Color.MAROON));"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\resources\\view\\PersonListCard.fxml"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Alaru"
        },
        "content": "  \u003cCircle fx:id\u003d\"displayPic\" fill\u003d\"chartreuse\" pickOnBounds\u003d\"true\" radius \u003d \"55.0\" \u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Alaru"
        },
        "content": "         \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   \u003c/Circle\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 700,
      "Pearlissa": 12,
      "-": 222
    }
  },
  {
    "path": "collated/functional/JoonKai1995.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JoonKai1995"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/CalendarTaskCard.fxml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"126.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"label-small\" prefHeight\u003d\"10.0\" prefWidth\u003d\"147.0\" scaleShape\u003d\"false\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/CalendarNode.fxml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cPane prefHeight\u003d\"95.0\" prefWidth\u003d\"147.0\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"90.0\" prefWidth\u003d\"146.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"Label\" styleClass\u003d\"label-date\" \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cListView fx:id\u003d\"tasks\" prefHeight\u003d\"20.0\" prefWidth\u003d\"70.0\" styleClass\u003d\"list-view-calendar\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"1.0\" left\u003d\"2.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/Pane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "###### /resources/view/CalendarView.fxml"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox id\u003d\"calendarVBox\" fx:id\u003d\"calendarVBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "       \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cButton fx:id\u003d\"previousMonth\" styleClass\u003d\"button\" onAction\u003d\"#handlePreviousButtonAction\" text\u003d\"\u0026lt;\u0026lt;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cLabel fx:id\u003d\"calendarTitle\" styleClass\u003d\"calendar_title\" text\u003d\"\\$calendarTitle\" HBox.hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cButton fx:id\u003d\"nextMonth\" styleClass\u003d\"button\" onAction\u003d\"#handleNextButtonAction\" text\u003d\"\u0026gt;\u0026gt;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "       \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cGridPane alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"calendar_text\" text\u003d\"Sunday\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"Monday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"Tuesday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"18.0\" left\u003d\"18.0\" right\u003d\"18.0\" top\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Wednesday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"Thursday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"Friday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"23.0\" right\u003d\"23.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"Saturday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendar\" alignment\u003d\"CENTER\" styleClass\u003d\"calendar-grid-pane\" gridLinesVisible\u003d\"true\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/CalendarView.java"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": " * The Calendar of the app."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cAnchorPane\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cTask\u003e[][] tasks;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentMonth \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox calendarVBox;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private GridPane calendar;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button previousMonth;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button nextMonth;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label calendarTitle;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the calendar of the app"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public CalendarView(ObservableList\u003cTask\u003e[][] tasksArray) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasksArray;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        initCalendar(yearMonth);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                ap.setPrefSize(300, 300);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.add(ap, j, i);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        setCalendarDays(yearMonth);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the days of the calendar to display the correct date"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param yearMonth year and month of the current month"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCalendarDays(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AnchorPane ap : allCalendarDays) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                ap.getChildren().clear();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            String txt \u003d String.valueOf(calendarDate.getDayOfMonth());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                if (calendarDate.getMonthValue() \u003d\u003d currentYearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (calendarDate.getMonthValue() \u003e currentYearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth + 1][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth - 1][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException oob) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                CalendarNode node \u003d new CalendarNode(txt, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Refreshes the calendar with new information."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void refreshCalendar() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        initCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePreviousButtonAction() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        currentMonth--;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        setCalendarDays(currentYearMonth);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNextButtonAction() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        currentMonth++;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        setCalendarDays(currentYearMonth);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cAnchorPane\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cAnchorPane\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/CalendarTaskCard.java"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": " * A UI component that displays compressed information of a {@code Task} on the calendar."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CalendarTaskCard.fxml\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public CalendarTaskCard(Task task) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        title.setText(task.getTitle().toString());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getPriority().value \u003d\u003d 1) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().add(\"label-small-green\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (task.getPriority().value \u003d\u003d 2) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().add(\"label-small-yellow\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            title.getStyleClass().add(\"label-small-red\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CalendarTaskCard)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarTaskCard card \u003d (CalendarTaskCard) other;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        return task.equals(card.task);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/CalendarNode.java"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarNode extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CalendarNode.fxml\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cCalendarTaskCard\u003e tasks;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create a calendar node."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param txt the date of the node"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the task list linked to it"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public CalendarNode(String txt, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        date.setText(txt);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cCalendarTaskCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList, (task) -\u003e new CalendarTaskCard(task));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.setItems(mappedList);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.setCellFactory(listView -\u003e new TasksCell());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CalendarTaskCard}."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    class TasksCell extends ListCell\u003cCalendarTaskCard\u003e {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(CalendarTaskCard task, boolean empty) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(task.getRoot());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/AddTaskCommandParser.java"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TASK_DESC,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                        PREFIX_DEADLINE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_TASK_DESC,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_DEADLINE, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            Title title \u003d ParserUtil.parseTaskTitle(argMultimap.getValue(PREFIX_TITLE)).get();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            TaskDescription taskDescription \u003d ParserUtil"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                .parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESC)).get();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            Deadline deadline \u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                    ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d new Task(title, taskDescription, deadline, priority);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/parser/ParserUtil.java"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String matricNumber} into a {@code MatriculationNumber}."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code matricNumber} is invalid."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    public static MatriculationNumber parseMatricNumber(String matricNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedMatricNumber \u003d matricNumber.trim();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!MatriculationNumber.isValidMatricNumber(trimmedMatricNumber)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MatriculationNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        return new MatriculationNumber(trimmedMatricNumber);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e matricNumber} into an {@code Optional\u003cMatriculationNumber\u003e}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code matricNumber} is present."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cMatriculationNumber\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        parseMatricNumber(Optional\u003cString\u003e matricNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        return matricNumber.isPresent() ? Optional.of(parseMatricNumber(matricNumber.get())) : Optional.empty();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/commands/AddTaskCommand.java"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a task to the To-do list and calendar."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"at\";"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the todo list and calendar. \""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TASK_DESC + \"TASK \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY LEVEL\\n\""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TITLE + \"Dance \""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TASK_DESC + \"Dance till I drop \""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DEADLINE + \"20-03-2018 \""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PRIORITY + \"1\";"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/logic/LogicManager.java"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarTaskLists() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getCalendarTaskLists();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlAdaptedTask.java"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTask() {}"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTask(String title, String taskDescription, String deadline, String priority) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTask (Task source) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        taskDescription \u003d source.getTaskDesc().value;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline \u003d source.getDeadline().dateString;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        priority \u003d source.getPriority().priority;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.title \u003d\u003d null) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "                Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Title.isValidTitle(this.title)) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        final Title title \u003d new Title(this.title);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.taskDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "                    TaskDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskDescription.isValidDescription(this.taskDescription)) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(TaskDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        final TaskDescription taskDesc \u003d new TaskDescription(this.taskDescription);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Deadline.isValidDeadline(this.deadline)) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        final Deadline deadline \u003d new Deadline(this.deadline);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Priority.isValidPriority(this.priority)) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        final Priority priority \u003d new Priority(this.priority);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Task(title, taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(title, otherTask.title)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDescription, otherTask.taskDescription)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline, otherTask.deadline)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(priority, otherTask.priority);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlSerializableAddressBook.java"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        final ObservableList\u003cTask\u003e tasks \u003d this.tasks.stream().map(p -\u003e {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                return p.toModelType();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/XmlSerializableAddressBook.java"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarList() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                return t.toModelType();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tags);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public ObservableList\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        final ObservableList\u003cString\u003e items \u003d this.items.stream().map(it -\u003e {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return it.toModelType();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return FXCollections.unmodifiableObservableList(items);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/MatriculationNumber.java"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s matriculation number in the address book."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "public class MatriculationNumber {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MATRIC_NUMBER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The first character of the matriculation number should be either an \u0027A\u0027 or \u0027U\u0027,\""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" followed by 7 digits and end with a capital letter.\";"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_FIRST \u003d \"[AU]{1}\";"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_SECOND \u003d \"\\\\d{7}\";"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_LAST \u003d \"[A-Z]{1}\";"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code MatriculationNumber}."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param matricNumber A valid matriculation number."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    public MatriculationNumber(String matricNumber) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d matricNumber;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person matriculation number."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidMatricNumber(String test) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        if (test.length() !\u003d 9) {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        String firstCharacter \u003d test.substring(0, 1);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        String nextCharacters \u003d test.substring(1, test.length() - 1);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastCharacter \u003d test.substring(test.length() - 1, test.length());"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        return firstCharacter.matches(MATRIC_NUMBER_VALIDATION_REGEX_FIRST)"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 nextCharacters.matches(MATRIC_NUMBER_VALIDATION_REGEX_SECOND)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 lastCharacter.matches(MATRIC_NUMBER_VALIDATION_REGEX_LAST);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof MatriculationNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((MatriculationNumber) other).value)); // state check"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addTask(Task task) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/ModelManager.java"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/DeadlineIsCurrentMonthPredicate.java"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Task}\u0027s month matches the value of month given."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineIsCurrentMonthPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlineIsCurrentMonthPredicate(int month) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        return task.getDeadlineMonth() \u003d\u003d month;"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeadlineIsCurrentMonthPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.month \u003d\u003d ((DeadlineIsCurrentMonthPredicate) other).month); // state check"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/Task.java"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TaskDescription taskDesc;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(Title title, TaskDescription taskDesc, Deadline deadline, Priority priority) {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(title, taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskDescription getTaskDesc() {"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskDesc;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDeadlineDay() {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline.day;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDeadlineYear() {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline.year;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDeadlineMonth() {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline.month;"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof seedu.address.model.task.Task)) {"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        seedu.address.model.task.Task otherTask \u003d (seedu.address.model.task.Task) other;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        return  otherTask.getTitle().equals(this.getTitle())"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getTaskDesc().equals(this.getTaskDesc())"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(this.getDeadline())"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(this.getPriority());"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Task TaskDescription: \")"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getTaskDesc())"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Calculated Priority: \")"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/UniqueTaskList.java"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Task#equals(Object)"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e[][] calendarList \u003d new ObservableList[7][32];"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateNow \u003d new Date();"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate now \u003d dateNow.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "    private int monthNow \u003d now.getMonthValue();"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueTaskList() {"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c 32; j++) {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                calendarList[i][j] \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        int diff \u003d toAdd.getDeadline().diff;"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarList[diff][toAdd.getDeadlineDay()].add(toAdd);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(calendarList[diff][toAdd.getDeadlineDay()]);"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/UniqueTaskList.java"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c 32; j++) {"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "                calendarList[i][j].setAll(replacement.calendarList[i][j]);"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/UniqueTaskList.java"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTaskList replacement \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Task task : tasks) {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(task);"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        setTasks(replacement);"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e asObservableList() {"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the calendarList array for tasks"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] asCalendarList() {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        return calendarList;"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/TaskDescription.java"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a short description of a todo task"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskDescription {"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Task description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String shortDesc;"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code TaskDescription}."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A valid address."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskDescription(String description) {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        assert description !\u003d null : MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        if (value.length() \u003c\u003d 20) {"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            shortDesc \u003d value;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            shortDesc \u003d value.substring(0, 20) + \"...\";"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TaskDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((TaskDescription) other).value)); // state check"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/Deadline.java"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Task\u0027s deadline in the address book."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Deadline should be a valid date that exists in the format dd-mm-yyyy. Tasks cannot be scheduled in the\""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" past. And can only be scheduled at most 6 months in advance. (Based on months: tasks cannot be\""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" scheduled on 1st August 2018 if the current date is 31st January 2018).\";"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String dateString;"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int diff;"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int day;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int month;"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int year;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        dateString \u003d deadline;"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate deadlineDate \u003d LocalDate.parse(deadline, formatter);"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d deadlineDate;"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "        this.diff \u003d calculateDifference(deadlineDate, now);"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        this.day \u003d deadlineDate.getDayOfMonth();"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        this.month \u003d deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        this.year \u003d deadlineDate.getYear();"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "            dateFormat.parse(test.trim());"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(test, formatter);"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadlineDate.getYear() \u003c now.getYear()) {"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadlineDate.getMonthValue() \u003c now.getMonthValue() \u0026\u0026 deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadlineDate.getMonthValue() \u003d\u003d now.getMonthValue()"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 deadlineDate.getYear() \u003d\u003d now.getYear() \u0026\u0026 deadlineDate.getDayOfMonth() \u003c now.getDayOfMonth()) {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isWithinSixMonths(deadlineDate, now)) {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "     * checks and see if the deadline is within 6 months of the current date."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isWithinSixMonths(LocalDate deadlineDate, LocalDate now) {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        int difference;"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            difference \u003d deadlineDate.getMonthValue() - now.getMonthValue();"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (deadlineDate.getYear() - now.getYear() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            difference \u003d 12 - now.getMonthValue() + deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            difference \u003d 100;"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        return difference \u003c\u003d 6;"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates the value of the difference in months between the deadline and the current date."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "    private int calculateDifference(LocalDate deadlineDate, LocalDate now) {"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "        int diff;"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            diff \u003d deadlineDate.getMonthValue() - now.getMonthValue();"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            diff \u003d 12 - now.getMonthValue() + deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "        return diff;"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/Priority.java"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Task\u0027s priority in the todo list and calendar."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Priority value input can only be a value from 1 to 3. 1 being lowest priority and 3 being highest.\";"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[1-3]{1}\";"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String priority;"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param priorityValue A valid priority value."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "    public Priority(String priorityValue) {"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(priorityValue);"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPriority(priorityValue), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d priorityValue;"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d Integer.parseInt(priorityValue);"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid task priority."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.priority.equals(((Priority) other).priority)); // state check"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "        return priority.hashCode();"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 5,
      "Pearlissa": 122,
      "-": 1094
    }
  },
  {
    "path": "collated/functional/Pearlissa.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "# Pearlissa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\SortCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List is sorted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        model.sortPersons();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        case SortTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SortTaskCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\Login.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The API of the Login component."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public interface Login {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /** Adds the given user. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void addUser(String username, String password) throws DuplicateUserException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Checks if user entered (username and password included) is valid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws UserNotFoundException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void authenticate(String username, String password) throws UserNotFoundException, DuplicateUserException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Loads addressbook storage of the user and initializes addressbook."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void loginUser(String filepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\LoginManager.java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents the in-memory model of the login data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManager extends ComponentManager implements Login {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginManager.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UniqueUserList userList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Initializes a LoginManager with the given username and password."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setUserPrefsStorage(UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setPrimaryStage(Stage primaryStage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setConfig(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setUserPrefs(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds user into the userList hashmap."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Username addUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Password addPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            User toAdd \u003d new User(addUsername, addPassword);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            userList.add(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(User user) throws DuplicateUserException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList.add(user);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void authenticate(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Authenticating user: \" + username);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String filepath \u003d username + \".xml\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (userList.getUserList().get(username).getPassword().getPassword().equals(password)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                loginUser(filepath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            addUser(username, password);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginUser(filepath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ObservableList\u003cUser\u003e getUserList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.asObservableList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void loginUser(String filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String properFilePath \u003d username + \"/\" + userPrefs.getAddressBookFilePath() + filePath;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(properFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, username);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs, username);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof LoginManager // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.userList.equals(((LoginManager) other).userList));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\exceptions\\DuplicateUserException.java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Signals that the operation will result in duplicate User objects."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class DuplicateUserException extends DuplicateDataException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public DuplicateUserException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super(\"Operation would result in duplicate users\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\exceptions\\UserNotFoundException.java"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Signals that the operation is unable to find the specified user."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UserNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\Password.java"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User\u0027s stored password in the address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d \"Password should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Password must only consist of alphanumeric characters.\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Minimum length: 8 characters.\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Maximum length: 30 characters.\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Should not contain any of the special characters: ( \" + SPECIAL_CHARACTERS + \" ).\\n\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String PASSWORD_REGEX \u003d \"[^\\\\W_]{8,30}$\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d PASSWORD_REGEX;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public final String password;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param password A valid password."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns if a given string is a valid password."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.password.equals(((Password) other).password)); // state check"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password.hashCode();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\UniqueUserList.java"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A list of users that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * @see User#equals(Object)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UniqueUserList implements Iterable\u003cUser\u003e {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final HashMap\u003cString, User\u003e userList \u003d new HashMap\u003cString, User\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns true if the list contains a equivalent user as the given argument."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.containsKey(toCheck);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds a user to the hashmap"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws DuplicateUserException"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void add(User toAdd) throws DuplicateUserException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.containsKey(toAdd.getUsername().getUsername())) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList.put(toAdd.getUsername().getUsername(), toAdd);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof UniqueUserList // instanceof handles nulls"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueUserList) other).internalList));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.hashCode();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ObservableList\u003cUser\u003e asObservableList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public HashMap\u003cString, User\u003e getUserList() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Iterator\u003cUser\u003e iterator() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\User.java"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User registered in the address book."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class User implements Comparable\u003cUser\u003e {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User(Username username, Password password) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password; }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        User otherUser \u003d (User) other;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return otherUser.getUsername().equals(this.getUsername())"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 otherUser.getPassword().equals(this.getPassword());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return Objects.hash(username, password);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        builder.append(\"Username: \")"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(getPassword());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int compareTo(User otherUser) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.username.toString().compareTo(otherUser.username.toString());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\Username.java"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User\u0027s stored username in the address book."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d \"Username should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Username must only consist of alphanumeric characters.\\n\""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Minimum length: 3 characters.\\n\""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Maximum length: 15 characters.\\n\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Should not contain any of the special characters: ( \" + SPECIAL_CHARACTERS + \" ).\\n\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String USERNAME_REGEX \u003d \"[^\\\\W_]{3,15}$\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d USERNAME_REGEX;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public final String username;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param username A valid username."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns if a given string is a valid username."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.username;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.username.equals(((Username) other).username)); // state check"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username.hashCode();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\util\\SampleLoginDataUtil.java"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Contains utility methods for populating {@code LoginManager} with sample data users."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SampleLoginDataUtil {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static LoginManager getSampleLoginManager() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager sampleLoginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return sampleLoginManager;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\LoginStorageManager.java"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginStorageManager extends ComponentManager {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginStorageManager.class);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private XmlLoginStorage xmlLoginStorage;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginStorageManager(XmlLoginStorage xmlLoginStorage) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.xmlLoginStorage \u003d xmlLoginStorage;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getLoginFilePath() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return \"login.xml\";"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return readLogin(xmlLoginStorage.getLoginFilePath());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return xmlLoginStorage.readLogin(filePath);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveLogin(LoginManager login) throws IOException {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        saveAddressBook(login, xmlLoginStorage.getLoginFilePath());"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param login"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveAddressBook(LoginManager login, String filePath) throws IOException {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        xmlLoginStorage.saveLogin(login, filePath);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedUser.java"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * JAXB-friendly version of the User."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlAdaptedUser {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs an XmlAdaptedUser."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser() {}"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser(String username, String password) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Converts a given User into this class for JAXB use."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedUser"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser(User source) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d source.getUsername().getUsername();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d source.getPassword().getPassword();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Converts this jaxb-friendly adapted user object into the model\u0027s User object."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (this.username \u003d\u003d null) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    Username.class.getSimpleName()));"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!Username.isValidUsername(this.username)) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final Username username \u003d new Username(this.username);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (this.password \u003d\u003d null) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!Password.isValidPassword(this.password)) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final Password password \u003d new Password(this.password);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new User(username, password);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof XmlAdaptedUser)) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlAdaptedUser otherUser \u003d (XmlAdaptedUser) other;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return Objects.equals(username, otherUser.username)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherUser.password);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlLoginFileStorage.java"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlLoginFileStorage {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static void saveDataToFile(File file, XmlSerializableLogin login)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            XmlUtil.saveDataToFile(file, login);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static XmlSerializableLogin loadDataFromSaveFile(File file) throws DataConversionException,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlLoginStorage.java"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A class to access Login data stored as an xml file on the hard disk. \u003c- READ THIS :)"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlLoginStorage {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlLoginStorage.class);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlLoginStorage(String filePath) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getLoginFilePath() {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Optional\u003cLoginManager\u003e readLogin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return readLogin(filePath);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Similar to {@link #readLogin()}"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        File loginFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!loginFile.exists()) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.info(\"AddressBook file \"  + loginFile + \" not found\");"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin xmlSerializableLogin \u003d XmlLoginFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return Optional.of(xmlSerializableLogin.toModelType());"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.info(\"Illegal values found in \" + loginFile + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void saveLogin(LoginManager loginManager) throws IOException {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        saveLogin(loginManager, filePath);"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Similar to {@link #saveLogin(LoginManager)}"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveLogin(LoginManager loginManager, String filePath) throws IOException {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(loginManager);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlLoginFileStorage.saveDataToFile(file, new XmlSerializableLogin(loginManager));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlSerializableLogin.java"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlSerializableLogin {"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private List\u003cXmlAdaptedUser\u003e users;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlSerializableLogin() {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        users \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlSerializableLogin(LoginManager src) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        users.addAll(src.getUserList().stream().map(XmlAdaptedUser::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (XmlAdaptedUser u : users) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginManager.addUser(u.toModelType());"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return loginManager;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof XmlSerializableLogin)) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin otherLogin \u003d (XmlSerializableLogin) other;"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return users.equals(otherLogin.users);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\ui\\Login.java"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "public class Login extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"Login.fxml\";"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "    private final LoginManager login;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField username;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "    private PasswordField password;"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button loginButton;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label info;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "    public Login(LoginManager login) {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        this.login \u003d login;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        loginButton.setDefaultButton(true);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "            login.authenticate(username.getText(), password.getText());"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateUserException e) {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "            info.setText(\"[Existing user: Incorrect password entered]\""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"[New User: Password must contain 8-30 characters]\");"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\ui\\LoginMainWindow.java"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String FXML \u003d \"LoginMainWindow.fxml\";"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Login login;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private StackPane loginPlaceholder;"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginMainWindow(Stage primaryStage, LoginManager loginManager) {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d loginManager;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login \u003d new Login(loginManager);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginPlaceholder.getChildren().add(login.getRoot());"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\ui\\LoginUiManager.java"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginUiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginMainWindow loginMainWindow;"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginUiManager(LoginManager login) {"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d login;"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow \u003d new LoginMainWindow(primaryStage, loginManager);"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginMainWindow.hide();"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showAlertDialogAndWait(loginMainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\LightTheme.css"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    background-color: #c7c7c7; /* Used in the default.html file */"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #ababab;"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ".label-info {"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #ababab;"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-date {"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small {"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-red {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#d26a6a, 20%);"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-yellow {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e4d858, 20%);"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-green {"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#8ac973, 20%);"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-control-inner-background: #e3e3e3;"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: transparent transparent transparent #b3b3b3;"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .scroll-bar:horizontal ,"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar  .scroll-bar:vertical{"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "list-view-calendar .list-cell {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .list-cell:filled:even {"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .list-cell:filled:odd {"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c1c2c3;"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c2c5c7;"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #9faabc;"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: #6daac0;"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #e3e3e3;"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #fbfefd;"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #fbfefd;"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ".calendar_text {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ".calendar_title {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".calendar-grid-pane {"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-border-color: grey;"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: derive(#e3e3e3, 25%);"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 50%);"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: darkgrey, darkgrey;"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: darkgrey;"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #262626;"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c4c4c4;"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "  -fx-text-fill: #e3e3e3;"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 25%);"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 50%);"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #f20713;"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent #c7c7c7 transparent #c7c7c7;"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: #c7c7c7 #c7c7c7 #000000 #c7c7c7;"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #6daac0;"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #cbd2dc;"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #cbd2dc;"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-tab-min-width:150px;"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #bfbfbf;"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #97a1a1;"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #0d0d0d;"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\Login.fxml"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"600.0\" text\u003d\"Welcome!\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"50.0\" prefWidth\u003d\"250.0\" text\u003d\"Username:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cTextField fx:id\u003d\"username\" promptText\u003d\"username\"\u003e"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" top\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox prefHeight\u003d\"70.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"70.0\" prefWidth\u003d\"250.0\" text\u003d\"Password:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cPasswordField fx:id\u003d\"password\" promptText\u003d\"password\"\u003e"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" top\u003d\"23.0\" /\u003e"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/PasswordField\u003e"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cLabel fx:id\u003d\"info\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"605.0\" styleClass\u003d\"label-info\" text\u003d\"Please enter credentials\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cFont size\u003d\"9.0\" /\u003e"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cButton fx:id\u003d\"loginButton\" alignment\u003d\"CENTER_RIGHT\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCommandInputChanged\" text\u003d\"Login\"\u003e"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"440.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/Pane\u003e"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\LoginMainWindow.fxml"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003cStackPane fx:id\u003d\"loginPlaceholder\"\u003e"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 979,
      "-": 646
    }
  },
  {
    "path": "collated/functional/WoodySIN.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# WoodySIN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\model\\TaskBookChangedEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\TodoPanelSelectionChangedEvent.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the TodoList Panel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TodoCard newSelection;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoPanelSelectionChangedEvent(TodoCard newSelection) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoCard getNewSelection() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.newSelection;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\DeleteTaskCommand.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a task identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_SIGN \u003d \"-t\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the task identified by the index number used in the last task listing.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task taskToDelete;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(taskToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TaskNotFoundException tnfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target task cannot be missing\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteTaskCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.taskToDelete, ((DeleteTaskCommand) other).taskToDelete));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditTaskCommand.java"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTask\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"et\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Note: Deadline cannot be modified by editTask command.\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TASK_DESC + \"TASK DESCRIPTION] \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"TASK DEADLINE] \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TITLE + \"notes \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TASK_DESC + \"Send lab notes to students.\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DEADLINE + \"05-05-2018\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PRIORITY + \"50. \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided except deadline.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task taskToEdit;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task editedTask;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TaskNotFoundException tnfe) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target task cannot be missing\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskDescription updatedDesc \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getTaskDesc());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Task(updatedTitle, updatedDesc, updatedDeadline, updatedPriority);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(taskToEdit, e.taskToEdit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        private TaskDescription desc;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            setDescription(toCopy.desc);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.title, this.desc, this.deadline, this.priority);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDescription(TaskDescription desc) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cTaskDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ImportCommand.java"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": " * Imports data from a xml file and overwrites the current data stored"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports data from an external xml data file with \""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the provided path and overwrites the current data stored.\\n\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ~/DOWNLOADS/NewDataSet.xml\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Data imported successfully\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"File not found\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE \u003d \"Data configuration failed\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public ImportCommand(String filePath) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            ReadOnlyAddressBook newDataSet \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            model.resetData(newDataSet);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FILE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListCurrentTaskCommand.java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all tasks due by the current month stored in the address book."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCurrentTaskCommand extends Command {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listCurrentTask\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lct\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks due this month\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_CURRENT_TASKS);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListTaskCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all tasks stored in the address book."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTask\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lt\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\SortTaskCommand.java"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all tasks stored in the address book in date order."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortTask\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"stt\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Todo List is sorted\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        model.sortTasks();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\SwitchTabCommand.java"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switchTab\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"swt\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches between tabs of Person List and Todo List. \";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tab switched.\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PERSON_TAB \u003d 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int TASK_TAB \u003d 1;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    public SwitchTabCommand(TabPane tabPane) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        int selectedTab \u003d selectionModel.getSelectedIndex();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionModel.select(selectAnotherTab(selectedTab));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     * Alternates the tab index"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param currentTab index"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return alternated tab index"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    private int selectAnotherTab(int currentTab) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentTab \u003d\u003d PERSON_TAB) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            return TASK_TAB;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        return PERSON_TAB;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManager.java"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTabPane(TabPane tabPane) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser.setTabPane(tabPane);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTabPane(TabPane tabPane) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects Person List tab before executing list command"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tabPane"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selectPersonTab(TabPane tabPane) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tabPane !\u003d null) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            selectionModel.select(PERSON_TAB);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\DeleteTaskCommandParser.java"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditTaskCommandParser.java"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String PLACE_HOLDER_HASH \u003d \"EDITED_DISPLAY\";"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TASK_DESC, PREFIX_DEADLINE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseTaskTitle(argMultimap.getValue(PREFIX_TITLE)).ifPresent(editTaskDescriptor::setTitle);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESC))"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                    .ifPresent(editTaskDescriptor::setDescription);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).ifPresent(editTaskDescriptor::setDeadline);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).ifPresent(editTaskDescriptor::setPriority);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ImportCommandParser.java"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new ImportCommandParser object"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an Import Command object for execution."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    public ImportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedInput.isEmpty()) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(exceptionMessage);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ImportCommand(userInput);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String taskTitle} into a {@code TaskTitle}."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code taskDescription} is invalid."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Title parseTaskTitle(String taskTitle) throws IllegalValueException {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(taskTitle);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTaskTitle \u003d taskTitle.trim();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Title.isValidTitle(trimmedTaskTitle)) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Title(trimmedTaskTitle);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e taskDescription} into an {@code Optional\u003cTaskDescription\u003e}"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code TaskDscription} is present."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cTitle\u003e parseTaskTitle(Optional\u003cString\u003e title) throws IllegalValueException {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        return title.isPresent() ? Optional.of(parseTaskTitle(title.get())) : Optional.empty();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws TaskNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removeTask(Task key) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tasks.remove(key)) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(Task target) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeTask(target);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTasks() {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.sortTaskList();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\task\\Task.java"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Task task) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        int yearDiff \u003d this.getDeadlineYear() - task.getDeadlineYear();"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        int monthDiff \u003d this.getDeadlineMonth() - task.getDeadlineMonth();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        int dayDiff \u003d this.getDeadlineDay() - task.getDeadlineDay();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareDate(yearDiff, monthDiff, dayDiff);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compares the dates"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param yearDiff difference in year"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param monthDiff difference in month"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayDiff difference in day"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    private int compareDate (int yearDiff, int monthDiff, int dayDiff) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "        if (yearDiff !\u003d 0) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "            return yearDiff;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        if (monthDiff !\u003d 0) {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "            return monthDiff;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayDiff;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\task\\Title.java"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task\u0027s title in the TodoList."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Task title should contain alphanumeric characters and it should not be blank.\";"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param title A valid name."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d title;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid task title."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TITLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\task\\UniqueTaskList.java"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws TaskNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        remove(target);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        add(editedTask);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws TaskNotFoundException if no such task could be found in the list."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Task toRemove) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove)"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 calendarList[toRemove.getDeadline().diff][toRemove.getDeadlineDay()].remove(toRemove);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!taskFoundAndDeleted) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskFoundAndDeleted;"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sorts the tasks in the list in date order"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(internalList);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\task\\UniqueTaskList.java"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\util\\SampleDataUtil.java"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains utility methods for populating {@code AddressBook} with sample data tasks."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(new Title(\"Prepare Tut\"), new TaskDescription(\"Prepare tutorial contents for friday Tutorial\"),"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(tutorialDeadline), new Priority(\"1\")),"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(new Title(\"2106 assignment\"), new TaskDescription(\"Start doing CS2106 term assignment\"),"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(assignmentDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(new Title(\"Sem report\"), new TaskDescription(\"Prepare for end of semester report\"),"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(tutorialDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(new Title(\"Bidding\"), new TaskDescription(\"Prepare for bidding modules for the coming semester\"),"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(biddingDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(new Title(\"Revise 2010\"), new TaskDescription(\"Revise the contents for CS2010\"),"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                new Deadline(reviseDeadline), new Priority(\"2\"))"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\ui\\TodoCard.java"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": " * A UI component that displays information of a {@code task} in TodoList."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String FXML \u003d \"todoListCard.fxml\";"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "        title.setText(\"Title: \" + task.getTitle().value);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "        priority.setText(\"Priority: \" + task.getPriority().toString());"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.setText(\"Deadline: \" + task.getDeadline().dateString);"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        description.setText(\"Description: \" + task.getTaskDesc().value);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof TodoCard)) {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "        TodoCard card \u003d (TodoCard) other;"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\ui\\TodoListPanel.java"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of tasks shown in TodoList."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "public class  TodoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"todoListPanel.fxml\";"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TodoListPanel.class);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cTodoCard\u003e todoListView;"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "    public TodoListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cTodoCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList, (task) -\u003e new TodoCard(task, taskList.indexOf(task) + 1));"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        todoListView.setItems(mappedList);"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        todoListView.setCellFactory(listView -\u003e new TodoListViewCell());"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        todoListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new TodoPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code TodoCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "            todoListView.scrollTo(index);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "            todoListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "    class TodoListViewCell extends ListCell\u003cTodoCard\u003e {"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(TodoCard task, boolean empty) {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(task.getRoot());"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\DarkTheme.css"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #232A34;"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #232A34;"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-tab-min-width:150px;"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #404040;"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #5F6A6A;"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #f3f3f3;"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\todoListCard.fxml"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\"/\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"/\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\resources\\view\\todoListPanel.fxml"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.141\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"todoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 2,
      "Pearlissa": 33,
      "-": 981
    }
  },
  {
    "path": "collated/test/Alaru.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "# Alaru"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditPersonDescriptorTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //different display picture -\u003e returns false"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDisplayPic(VALID_DISPLAY_BOB).build();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //different participation -\u003e returns false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withParticipation(VALID_PARTICIPATION_MARK).build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MarkCommandTest.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_correctFieldSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //Rest of the fields must be the same as the typicaladdressbook"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updateMarkPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withMatriculationNumber(\"A1234567X\").withParticipation(VALID_PARTICIPATION_MARK).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MarkCommand markCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_INT_PART_MARK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updateMarkPerson.getName().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updateMarkPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns an {@code MarkCommand} with parameters {@code index} and {@code marks}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private MarkCommand prepareCommand(Index index, Integer marks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(index, marks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        markCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return markCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UpdateDisplayCommandTest.java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_correctFieldSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //Rest of the fields must be the same as the typicaladdressbook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person editedDisplayPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withMatriculationNumber(\"A1234567X\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic editedDisplay \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedDisplay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateDisplayCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                editedDisplayPerson.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedDisplayPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(updateDisplayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder(personInFilteredList).withDisplayPic(VALID_DEFAULT_DISPLAY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                new DisplayPic(VALID_DEFAULT_DISPLAY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateDisplayCommand.MESSAGE_SUCCESS, updatedPerson.getName()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updatedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(updateDisplayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex, displayPic);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                new DisplayPic(VALID_DEFAULT_DISPLAY));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToUpdate \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder(personToUpdate).withDisplayPic(VALID_DEFAULT_DISPLAY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, displayPic);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updateDisplayCommand.execute();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        undoRedoStack.push(updateDisplayCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(personToUpdate, updatedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex, displayPic);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns an {@code UpdateDisplayCommand} with parameters {@code index} and {@code editedDisplay}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private UpdateDisplayCommand prepareCommand(Index index, DisplayPic editedDisplay) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d new UpdateDisplayCommand(index, editedDisplay);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updateDisplayCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return updateDisplayCommand;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddCommandParserTest.java"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // multiple display paths - last display accepted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DISPLAY_DESC_AMY + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddCommandParserTest.java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no display picture"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person expectedPersonNoDisplay \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMatriculationNumber(VALID_MATRIC_NUMBER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withParticipation(VALID_PARTICIPATION_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonNoDisplay));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddCommandParserTest.java"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid display pic - missing file"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_DISPLAY_DESC"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid display pic - not image file"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_DISPLAY_TYPE_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parseCommand_email() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand command \u003d (EmailCommand) parser.parseCommand("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                EmailCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEquals(new EmailCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MarkCommandParserTest.java"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandParserTest {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private MarkCommandParser parser \u003d new MarkCommandParser();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validArgs_returnsMarkCommand() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, \"1\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PARTICIPATION_DESC_MARK, new MarkCommand(INDEX_FIRST_PERSON, VALID_INT_PART_MARK));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidMarksArg_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_MARK,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidMissingMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_alphabetMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ALPHABET_MARK_DESC, MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_overLimitMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OVER_MARK_DESC, MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\UpdateDisplayCommandParserTest.java"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandParserTest {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private UpdateDisplayCommandParser parser \u003d new UpdateDisplayCommandParser();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DISPLAY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"0\" + DISPLAY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid (non existent) image"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DISPLAY_DESC, DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid (not image) file"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DISPLAY_TYPE_DESC, DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic display \u003d new DisplayPic(VALID_DISPLAY_AMY);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand expectedCommand \u003d new UpdateDisplayCommand(targetIndex, display);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_multipleRepeatedField_acceptsLast() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DISPLAY_DESC_AMY + DISPLAY_DESC_BOB;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic display \u003d new DisplayPic(VALID_DISPLAY_BOB);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand expectedCommand \u003d new UpdateDisplayCommand(targetIndex, display);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\DisplayPicTest.java"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPicTest {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_PATH \u003d \"src/test/resources/images/displayPic/missing\"; //Missing file"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_TYPE_PATH \u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"src/test/resources/images/displayPic/wrong.txt\"; //not image file"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_NO_EXT_PATH \u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"src/test/resources/images/displayPic/missingExt\"; //file missing extension"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DisplayPic(null));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidMissingPath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_PATH));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidImageFile_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_TYPE_PATH));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidMissingExtension_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_NO_EXT_PATH));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\ParticipationTest.java"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class ParticipationTest {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Participation((String) null));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Participation((Integer) null));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidEmptyMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"abcde\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaNegativeMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"-100\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaOverLimitMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"500\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void isValidParticipation() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // null participation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Participation.isValidParticipation(null));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid participation"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"\"));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        // spaces only"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\" \"));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        // only non-alphanumeric characters"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"^\"));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // contains alpha characters"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"abcd\"));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"peter*\"));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"101\")); // over limit"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"-500\")); // below limit"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // valid participation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"100\")); // numbers only within 0 to 100"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\UniqueItemListTest.java"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Alaru"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void asUnmodifiableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        uniqueItemList.getItemList().remove(0);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void noDuplicateItems() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList otherItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        uniqueItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        otherItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        otherItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEquals(uniqueItemList, otherItemList);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Alaru"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 276,
      "Pearlissa": 13,
      "-": 123
    }
  },
  {
    "path": "collated/test/JoonKai1995.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JoonKai1995"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/CalendarTaskCardTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarTaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Task normalTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarTaskCard taskCard \u003d new CalendarTaskCard(normalTask);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(taskCard, normalTask);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarTaskCard calendarTaskCard \u003d new CalendarTaskCard(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarTaskCard copy \u003d new CalendarTaskCard(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(calendarTaskCard.equals(copy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(calendarTaskCard.equals(calendarTaskCard));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(calendarTaskCard.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(calendarTaskCard.equals(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(CalendarTaskCard taskCard, Task expectedTask) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarTaskCardHandle calendarTaskCardHandle \u003d new CalendarTaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCalendarCardTask(expectedTask, calendarTaskCardHandle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/ui/CalendarViewTest.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarViewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cTask\u003e[][] lists \u003d new ObservableList[1][1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        lists[0][0] \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarView calendar \u003d new CalendarView(lists);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(calendar);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String correctTitle \u003d yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCalendarTitle(calendar, correctTitle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCalendarTitle(CalendarView calendar, String expectedTitle) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarViewHandle calendarViewHandle \u003d new CalendarViewHandle(calendar.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTitle, calendarViewHandle.getCalendarTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/storage/LoginStorageManagerTest.java"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "public class LoginStorageManagerTest {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private LoginStorageManager loginStorageManager;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlLoginStorage loginStorage \u003d new XmlLoginStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        loginStorageManager \u003d new LoginStorageManager(loginStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().getPath() + fileName;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Checks if the info on the 2 Login Managers are the same."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager2"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private boolean checkUsers(LoginManager loginManager1, LoginManager loginManager2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (loginManager1.getUserList().size() !\u003d loginManager2.getUserList().size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (int i \u003d 0; i \u003c loginManager1.getUserList().size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (!loginManager1.getUserList().get(i).getUsername().getUsername()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getUsername().getUsername())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    || !loginManager1.getUserList().get(i).getPassword().getPassword()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getPassword().getPassword())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loginReadSave() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        LoginManager original \u003d getTypicalLoginManager();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        loginStorageManager.saveLogin(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        LoginManager retrieved \u003d loginStorageManager.readLogin().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(checkUsers(original, retrieved));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(loginStorageManager.getLoginFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/person/MatriculationNumberTest.java"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "public class MatriculationNumberTest {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MatriculationNumber(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidMatricNumber \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MatriculationNumber(invalidMatricNumber));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidMatricNumber() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null matric number"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MatriculationNumber.isValidMatricNumber(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid matric numbers"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"91\")); // only numbers"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"matricNumber\")); // non-numeric"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"E0000000I\")); // first letter is not A or U"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"A00000000E\")); // More than 8 digits"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"a0000000I\")); // first character not capitalised"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"A00000000t\")); // last character not capitalised"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid matric numbers"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatricNumber(\"A0156672X\")); // Starting with A"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatricNumber(\"U4812163G\")); // Starting with U"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/PriorityTest.java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPriority_throwsNumberFormatException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid priority values"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"911\")); // more than 1 number"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid priority values"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\")); //only 3 unique cases for priority"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/TaskDescriptionTest.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskDescriptionTest {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsAssertionError() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TaskDescription(null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskDescription(invalidDescription));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskDescription.isValidDescription(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(TaskDescription.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(TaskDescription.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long desc"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/DeadlineTest.java"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate yesterday \u003d now.minusDays(1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate tomorrow \u003d now.plusDays(1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dateYesterday \u003d yesterday.toString();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private String correctDateYesterday \u003d dateYesterday.substring(8, 10) + \"-\" + dateYesterday.substring(5, 7)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"-\" + dateYesterday.substring(0, 4);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dateTomorrow \u003d tomorrow.toString();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private String correctDateTomorrow \u003d dateTomorrow.substring(8, 10) + \"-\" + dateTomorrow.substring(5, 7)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"-\" + dateTomorrow.substring(0, 4);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidDeadline_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"91\")); // numbers"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"02/04/2017\")); // / instead of -"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(correctDateYesterday)); // scheduled yesterday"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(correctDateTomorrow));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/seedu/address/model/task/TitleTest.java"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsAssertionError() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long titles"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "###### /java/guitests/guihandles/CalendarViewHandle.java"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarViewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CALENDAR_TITLE_ID \u003d \"#calendarTitle\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label calendarTitleLabel;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public CalendarViewHandle(Node calendarViewNode) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        super(calendarViewNode);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarTitleLabel \u003d getChildNode(CALENDAR_TITLE_ID);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCalendarTitle() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        return calendarTitleLabel.getText();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 24,
      "-": 318
    }
  },
  {
    "path": "collated/test/Pearlissa.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "# Pearlissa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\SortCommandTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private SortCommand sortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        sortCommand \u003d new SortCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsNotFiltered_sortsList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsFiltered_sortsList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsFiltered_sortsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_nullList_sortsList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof SortCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void parseCommand_sort_alias() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_ALIAS) instanceof SortCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_ALIAS + \" 3\") instanceof SortCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author Wu Di"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select_alias() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\LoginManagerTest.java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManagerTest {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(loginManager.equals(loginManager));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(loginManager.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(loginManager.equals(5));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\UniqueUserListTest.java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UniqueUserListTest {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        UniqueUserList uniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        uniqueUserList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\PasswordTest.java"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String invalidPass \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidPass));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null password"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john doe\")); // contains whitespace"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"abcdefg\")); // contains less than 7 characters"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"abcde12345abcde12345abcde12345a\")); // contains more than 30 characters"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john_doe\")); // contains underscore"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // valid password"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"johndoe1\")); // alphabets only"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"12345678\")); // numbers only"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"JohnDoe1\")); // with capital letters"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"abcdefgh\")); // at least 8 characters"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"abcde12345abcde12345abcde12345\")); // at most 30 characters"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\UsernameTest.java"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String invalidUser \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUser));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null username"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\")); // empty string"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\" \")); // spaces only"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john doe\")); // contains whitespace"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"ab\")); // contains less than 3 characters"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"abcdefghijklmnop\")); // contains more than 15 characters"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john_doe\")); // contains underscore"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // valid username"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"johndoe\")); // alphabets only"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"JohnDoe\")); // with capital letters"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"abc\")); // at least 3 characters"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"abcde12345abcde\")); // at most 3 characters"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlSerializableLoginTest.java"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlSerializableLoginTest {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableLoginTest/\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final File TYPICAL_USERS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalUsersLogin.xml\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final File INVALID_USER_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidUserLogin.xml\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void toModelType_typicalUsersFile_success() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_USERS_FILE,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager typicalUsersLogin \u003d TypicalUsers.getTypicalLoginManager();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(checkUsers(loginFromFile, typicalUsersLogin));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Checks if the info on the 2 Login Managers are the same."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager1"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager2"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private boolean checkUsers(LoginManager loginManager1, LoginManager loginManager2) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (loginManager1.getUserList().size() !\u003d loginManager2.getUserList().size()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (int i \u003d 0; i \u003c loginManager1.getUserList().size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (!loginManager1.getUserList().get(i).getUsername().getUsername()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getUsername().getUsername())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    || !loginManager1.getUserList().get(i).getPassword().getPassword()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getPassword().getPassword())) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void toModelType_invalidUserFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_USER_FILE,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\LoginManagerBuilder.java"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class to help with building LoginManager objects."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *     {@code LoginManager lm \u003d new LoginManagerBuilder().withUser(\"JOHNDOE\").build();}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManagerBuilder {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder(LoginManager loginManager) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d loginManager;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds a new {@code User} to the {@code LoginManager} that we are building."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder withUser(User user) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginManager.addUser(user);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (DuplicateUserException due) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalArgumentException(\"user is expected to be unique.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager build() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return loginManager;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalUsers.java"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in tests."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class TypicalUsers {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User JOHNDOE \u003d new UserBuilder().withUsername(\"JOHNDOE\")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"12345678\").build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User ALICE \u003d new UserBuilder().withUsername(\"ALICE\")"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"abcdefgh\").build();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User BENSON \u003d new UserBuilder().withUsername(\"BENSON\")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1234ABCDE\").build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User CARL \u003d new UserBuilder().withUsername(\"CARL\")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1a2b3c4d5e\").build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User DANIEL \u003d new UserBuilder().withUsername(\"DANIEL\")"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"password\").build();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User ELLE \u003d new UserBuilder().withUsername(\"ELLE\")"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"elleelle\").build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User FIONA \u003d new UserBuilder().withUsername(\"FIONA\")"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1223334444\").build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User GEORGE \u003d new UserBuilder().withUsername(\"GEORGE\")"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"george123\").build();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User HOON \u003d new UserBuilder().withUsername(\"HOON\")"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"meehoonkueh\").build();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User IDA \u003d new UserBuilder().withUsername(\"IDA\")"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"idanotaho\").build();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private TypicalUsers() {} // prevents instantiation"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns a {@code LoginManager} with all the typical users."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static LoginManager getTypicalLoginManager() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager lm \u003d new LoginManager();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (User user : getTypicalUsers()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                lm.addUser(user);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } catch (DuplicateUserException e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return lm;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static List\u003cUser\u003e getTypicalUsers() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOHNDOE, ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\UserBuilder.java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class to help with building User objects."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UserBuilder {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"JOHNDOE\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"12345678\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Initializes the UserBuilder with the data of {@code userToCopy}."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder(User userToCopy) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d userToCopy.getUsername();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d userToCopy.getPassword();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sets the {@code Userame} of the {@code User} that we are building."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sets the {@code Userame} of the {@code User} that we are building."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Builds the User object"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return A User object"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new User(username, password);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 322,
      "-": 52
    }
  },
  {
    "path": "collated/unused/Alaru-unused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Alaru-unused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\EmailCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MAIL_SYNTAX \u003d \"mailto:\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \": Email the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_EMAIL_PERSON_SUCCESS \u003d \"Email Person: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EmailCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String emailAddress \u003d personToEmail.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String emailName \u003d personToEmail.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Desktop.getDesktop().mail(new URI(MAIL_SYNTAX + emailAddress));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (HeadlessException hlError) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new UnsupportDesktopException(Messages.MESSAGE_UNSUPPORTED_DESKTOP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (URISyntaxException | IOException error) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MAIL_APP_ERROR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EMAIL_PERSON_SUCCESS, emailName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof EmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((EmailCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\EmailCommandParser.java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new EmailCommand(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\EmailCommandParserTest.java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandParserTest {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private EmailCommandParser parser \u003d new EmailCommandParser();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validArgs_returnsEmailCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, \"1\", new EmailCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\EmailCommandTest.java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(EmailCommand.MESSAGE_EMAIL_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToEmail.getName().toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEmailSuccess(expectedMessage, emailCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(emailCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(EmailCommand.MESSAGE_EMAIL_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToEmail.getName().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEmailSuccess(expectedMessage, emailCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(emailCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns a {@code EmailCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private EmailCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        emailCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return emailCommand;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * - the result message matches {@code expectedResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * - the {@code expectedResult} matches {@code testCommand}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static void assertEmailSuccess(String expectedResult, EmailCommand testCommand) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            CommandResult result \u003d testCommand.execute();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            assertEquals(expectedResult, result.feedbackToUser);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (UnsupportDesktopException de) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            // Code is running on unsupported OS"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            assertEquals(de.getMessage(), Messages.MESSAGE_UNSUPPORTED_DESKTOP);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\FileUtil.java"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Unused due to other teammate\u0027s feature breaking the original intention, originally from FileUtil"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public static boolean isSameFile(File file1, File file2) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    if (file1.length() !\u003d file2.length()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    BufferedInputStream bisO \u003d new BufferedInputStream(new FileInputStream(file1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    BufferedInputStream bisN \u003d new BufferedInputStream(new FileInputStream(file2));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    byte[] bufferO \u003d new byte[4096];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    byte[] bufferN \u003d new byte[4096];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    int fileBytes1 \u003d bisO.read(bufferO);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisN.read(bufferN);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    while (fileBytes1 !\u003d -1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!Arrays.equals(bufferO, bufferN)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bisO.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bisN.close();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        fileBytes1 \u003d bisO.read(bufferO);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bisN.read(bufferN);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisO.close();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisN.close();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\UnsupportDesktopException.java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UnsupportDesktopException extends CommandException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UnsupportDesktopException(String message) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Alaru": 147,
      "-": 59
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA was developed by the https://github.com/CS2103JAN2018-F09-B1[F09-B1] team. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Wu Di"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::wudi.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "{empty}[https://github.com/WoodySIN[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Daniel Tan"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::joonkai1995.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "{empty}[http://github.com/JoonKai1995[github]]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Pearlissa Taim"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::pearlissa.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "{empty}[http://github.com/Pearlissa[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Ellery Chia"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::ellery.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "{empty}[http://github.com/Alaru[github]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Alaru": 20,
      "Pearlissa": 1,
      "-": 24
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Your TA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": ":toc-title: Table of Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F09-B1/main/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "By: `F09-B1`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Your TA is an address book application designed to enhance the capabilities of a university Teaching Assistant (TA) or tutor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It aims to provide all the essential functions needed to manage the administrative duties of handling a class as well as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "to aid the tutor to better connect with the class. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It includes a calendar, scheduling capabilities, as well as the ability to mark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "attendance and participation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d How to Contribute to Your TA"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d New developers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "You may wish to refer to Section 3: \u003c\u003cSetting up, Setting up\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "to properly set up the *Your TA* project file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Read through the rest of the guide to familiarise yourself with how *Your TA* components functions together."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Try making some enhancements or edits to a component and make a pull request (PR) to our repo! We will take a look at your PR and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "give you some feedback or even merge your code if it\u0027s a good working enhancement."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Experienced developers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The developer guide contains the design of the models that make up the program. Each section also details how each and every functionality"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "is implemented and how it interacts with the different components. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "We would greatly appreciate your help in fine-tuning the components and also"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "welcome any suggestions or feedback to improve *Your TA*."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This section contains the steps needed to properly set up the required files to work on the program source code and to ensure the application runs properly."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following are essential programs and libraries needed to start developing Your TA."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Sufficient *Java* and *Javafx* knowledge"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "This application is written in Java and Javafx. A good amount of experience with the language (about 10k lines of code written in *Java* and *Javafx*) is required to understand and work in the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Please follow the steps below to download and set up the project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repository, and clone the fork to your computer."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Run the following steps to ensure that you successfully set up the project."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "You should see in the console that all the tests have been successfully completed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following configurations should be set up before you start coding to ensure a uniform coding style."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `CS2103JAN2018-F09-B1/main` repository. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-F09-B1/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "When you are ready to start coding, you may:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This section will go through the design aspect of Your TA. It contains the architecture of the application and how the components that make up the program function and interact with one another in more detail."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 1 below is the architecture diagram explains the high-level design of the application. It shows all of the components of the application and how they interact with one another."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Initializing the components in the correct sequence at the app launch, and connects them up with each other."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Shutting down the components and invokes cleanup method where necessary when the application exits."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The classes can be found in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the app\u0027s log file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The rest of the App consists of the following five components:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* \u003c\u003cDesign-Login, *`Login`*\u003e\u003e: Authenticates access to app."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the app."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the app in-memory."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Do note that each of the components"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the component."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "For example, the `Logic` component (see Figure 2 given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA\u0027s design is based on an event driven architecture. This allows the different components to communicate with another by utilizing events."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The _Sequence Diagram_ (Figure 3) below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when Your TA data is changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 4 below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[[Design-Login]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Login component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Before access to the application is granted, the user is required to log in with their `Username` and `Password` (see Figure 5)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Interactions for Login Component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::Login.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Upon launching the app, the Login component takes in two inputs from the user: `Username` and `Password`, creates an account, then stores the user\u0027s login credentials into a `.xml` file. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If that `.xml` file already exists (`Username` entered is existing `Username`), it authenticates the User then loads in data previously saved by that User. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[Optional] `.xml` file is encrypted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The login credentials are therefore immutable (cannot be changed)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The same username and password have to be used every time the user wishes to access the app."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "`Username` and `Password` are case-sensitive."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Only upon successful authentication will the app load data from the `Storage` Component."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The UI component handles to interaction between Your TA and the user. It itself contains other smaller components that build up to form the entire UI."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The figure below shows what makes up the structure of the UI component."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alaru"
        },
        "content": "As seen in Figure 6, the UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `TodoListPanel`, `StatusBarFooter`, `CalendarView` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component loads the layout of each part from the `.fxml` file and then does the bindings to various variables in the address book model in the corresponding `.java` file."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It may be difficult to edit the `.fxml` file directly. *Javafx* http://gluonhq.com/products/scene-builder/[Scene Builder] is recommended to be used to edit or create new `.fxml` files."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The logic component controls how Your TA functions upon the different commands that it supports."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 7 below shows how the `LogicManager` functions in the application."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 8 below shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[fig-LogicCommandClassDiagram]]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Logic Command Class Diagram"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following steps are a brief overview of how a command is handled by the logic component."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".  This results in the creation of a `Command` object which is executed by the `LogicManager`. The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".  The `UI` then displays to the user the changes and the result of the command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 9 below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The model component tackles how Your TA maintains the data it holds and how the data is communicated between each major component."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Figure 10 shows the different components and interfaces that make up the `Model` component."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `Model`:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* Stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Stores the data used by Your TA."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Does not depend on any of the other four major components."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following are details of the purpose and function of the different classes that make up the entire `Model`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `Person` Class:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Stores the information of a specific person (student) in Your TA."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Information includes: Name, Matriculation Number, Phone Number, Email, Address, DisplayPic, Participation and different tags to associate with that person."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Implements `UniquePersonList` that enforces uniqueness of its elements and disallows nulls."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `Name`: Object that stores the name of the `Person` object."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Person\u0027s name should only contain alphanumeric characters, and should not be null."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `Matriculation Number`: Object that stores the matriculation number of the `Person` object."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Matriculation number should start with either \u0027A\u0027 or \u0027U\u0027, followed by 7 digits and ending with an alphabet (A-Z)."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `Phone Number`: Object that stores the phone number of the `Person` object."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `Email`: Object that stores the email address of the `Person` object."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Email address should be of the format _local-part@domain_."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `DisplayPic`: Object that contains the filepath to the display picture used by the `Person` object."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* `Participation`: Object that stores the participation marks of the `Person` object."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The `User` Class:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Stores the information of a specific user (TA/Lecturer/Professor) in the application."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Information includes: Username and Password."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Implements `UniqueUserList` that enforces uniqueness of its elements and disallows nulls."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* `Username`: Object that stores the username of the `User` Object and contains the regex requirements for a valid username."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "User\u0027s username should only contain alphanumeric characters, be between 3 and 15 characters long and should not be null."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* `Password`: Object that stores the password of the `User` Object and contains the regex requirements for a valid password."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "User\u0027s password should only contain alphanumeric characters, be between 8 and 30 characters long and should not be null."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `Tag` Class:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* An immutable object that has to be valid."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Checks are implemented to guarantee validity."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "For every `Person` object, there can be multiple (or zero) tags."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "The `Task` Class:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* Stores the information of a specific Task in Your TA."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* Information includes: Title, Description, Deadline, Priority."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* Implements `UniqueTaskList` that enforces uniqueness of its elements and disallows nulls."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* `Title` \u0026 `TaskDescription`: Object that stores the title and description of the `Task` Object."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Tasks title and description should only contain alphanumeric characters, and should not be null."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* `Deadline`: Object that stores the deadline of the `Task` Object."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Deadline should be a valid date that exists and in the format dd-mm-yyyy. Tasks cannot be scheduled in the past. And can only be scheduled at most 6 months in advance. (Based on months: tasks cannot be scheduled on 1st August 2018 if the current date is 31st January 2018)."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* `Priority`: Object that stores the priority of the `Task` Object."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Priority value input can only be a value from 1 to 3. 1 being lowest priority and 3 being highest."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The storage component maintains the reading and writing of data used by Your TA. It allows the application to save and read files on the user\u0027s computer."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* can save data used by Your TA in xml format and read it back."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* can save images used by Your TA."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* can save the user data in xml format and read it back."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* can save list of `User` objects for login authentication."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Login feature"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The login feature is initialized upon startup of the application, through `LoginStorage` and `LoginManager` and is facilitated by the `LoginUi`. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It supports multiple accounts whereby one user cannot access the application content of another user by creating multiple `.xml` storage files. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Structure of the Login System"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::LoginDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "As seen from the Figure 12, upon opening the application, the user is prompted to enter their `Username` and `Password`. The `LoginManager` fetches the data of existing `User` objects, before putting them into a Hashmap\u003cUsername, User\u003e as shown below. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Username addUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Password addPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            User toAdd \u003d new User(addUsername, addPassword);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            userList.add(toAdd);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "`Username` and `Password` are case-sensitive."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The credentials entered by the user are then checked against the HashMap to authenticate the account. Upon successful login, the user\u0027s file is retrieved from the `Storage` component and is loaded up with the application. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void authenticate(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Authenticating user: \" + username);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String filepath \u003d username + \".xml\";"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (userList.getUserList().get(username).getPassword().getPassword().equals(password)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                loginUser(filepath);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            addUser(username, password);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                File file \u003d new File(\"data/login/\" + filepath);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginUser(filepath);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If the user is a new (username does not exist), they should simply enter their desired `Username` and `Password` into the respective fields, and the account will be created with the default data of the application."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementing new `User`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: Using same login window, create new `User` if `Username` entered does not exist"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Use of only 1 window, no need to implement additional UI functionalities."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Not the most user-friendly or the most conventional way a login works."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Create a registration button, which brings the user to a registration UI for the creation of `User` object"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: More user-friendly, able to implement a username field, along with a password field and, especially a field for password confirmation."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need to further add onto UI."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Managing existing users"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `User` is immutable"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Easier to keep track of `User`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Highly inflexible, not user-friendly."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: `User` to be mutable, can be edited or deleted"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Users can change their usernames/passwords if they feel their credentials may be insecure."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need for rigorous salting/hashing if repeated usernames/passwords are allowed."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `User` identification"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `Username` is case-sensitive"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: \"Johndoe\" and \"johndoe\" are different usernames and different accounts with the same name can be created."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: If a user makes a typo in the `Username` field, another account is created instead of correctly logging on to their account."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: `Username` to be made case-insensitive"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Users will not have to worry about whether they signed up with a different `Username`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Less usernames are available."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `Username` and `Password` representation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `Username` and `Password` only allow alphanumeric characters"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Easy authentication, no need to worry about corner cases."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Less room for different usernames and passwords, not as secure."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Include special characters in `Username` and `Password` Regex"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: More secure, less prone to security issues."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need for more rigorous testing to ensure no corner cases are left out."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Salting passwords/encryption of files"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: No encryption/salting implemented"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Ease of editing information by administrator."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Security issues, easy to find data path and retrieve files."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Encrypt files and salt passwords before encryption"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Increases security of software, less prone to be used for malicious purposes."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Large amount of coding and implementation required, prerequisites also include knowledge of security issues and safeguards."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Alaru"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It would then proceed to restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::matricuationNumber[]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Matriculation number"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "This feature allows the user to keep track of the matriculation number of a `Person`. The matriculation number in this case"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "has to start with an \"A\" or \"U\" followed by 7 digits and end with a capital letter. A new class, `Matriculation Number`, is created and is associated to the `Person` class."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "This is integrated into the `AddCommand` and `EditCommand` commands to update the participation marks of a `Person`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "The user will input an AddCommand or EditCommand, with the additional parameter `m/MATRICULATION_NUMBER`, to the application to update the marks."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Should 2 people be allowed to have to same matriculation number"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** No, no 2 people can have the same matriculation number, DuplicateUserException will be thrown when trying to add a person with a matriculation number already inside Your TA."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It makes sense as no 2 students would have the same matriculation number, it alerts the user when they\u0027ve most likely typed in the wrong matriculation number."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The user will not be able to add 2 different instances of the same student."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Duplicate matriculation numbers are allowed"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: User have more freedom to add anyone."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Duplicate matriculation numbers will cause messiness when dealing with many students."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "** Link matriculation number to the students IVLE account info."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "// end::matriculationNumber[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::participation[]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Participation"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This feature allows the user to keep track of participation marks of a `Person`. The participation marks in this case is limited to an integer value of 0 to 100 inclusive. A new class, `Participation`, is created and is associated to the `Person` class."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This utilizes the `MarkCommand` command to update the participation marks of a `Person`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The user will input a command, `markPart INDEX marks/DIGITS`, to the application to update the marks."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following figure 13 and paragraph below shows the sequence of how the `MarkCommand` command functions:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".MarkCommand Sequence Diagram"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::MarkCommandSequenceDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The user will enter the command `markPart INDEX marks/DIGITS` to the application."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The application will then pass the arguments to `AddressBookParser` which in turns passes it to  `MarkCommandParser` to parse the argument."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The `MarkCommandParser` would then create a `MarkCommand` with the data from the arguments."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The `LogicManager` will then execute the `preprocessUndoableCommand()` in `MarkCommand`."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The `preprocessUndoableCommand()` will then execute the `createUpdatedPerson()` to create a new `Person` object with a new `Participation` object containing the new total marks."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Finally, this new `Person` object created in step 3 will replace the original `Person` object with the old `Participation` object stored in the `Model` through the `updatePerson()` method."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the marks"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 1 (current choice):** Create an entire new `Person` object"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: It is similar to the rest of the `Logic` commands."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: This uses more memory when executing."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 2:** Make the `value` in the `Participation` class editable"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: It uses less memory, and only the value has to be updated."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: The implementation will require the writing of more methods."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Setting a limit to the number of marks"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 1 (current choice):** Set the limit of participation marks to 100"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: Maintain a fixed value, prevents unforeseen issues such as \u003c\u003cinteger-overflow,integer overflows\u003e\u003e."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: The user is restricted to only 100 marks total, and has to be more careful in the amount of marks they wish to add."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 2:** Do not set a limit for the amount of participation marks"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: It is more flexible, and allows more variation in the marks the user wishes to add"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: This requires more validation checks to prevent issues like an integer overflow."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Support for setting a threshold and easily seeing how many students made the cut over the threshold."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// end::participation[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::display[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Display picture"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Users are able to add a display picture for any person within the application. The user can utilise 3 different commands (`add`, `edit` and `updateDP`) to create and specify a display image for the person."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It fully supports the `undo` and `redo` commands. It adds a drop shadow around the frame to indicate the level of participation (see above \u003c\u003cParticipation, section 5.4 Participation\u003e\u003e) of the person."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This feature allows the user to enter a path to their selected image file when entering any of the above 3 commands and copies the image into the `data/displayPic` folder."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It utilises the `DisplayPicStorage` class to handle all image storage related operations."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It also makes use of the `Participation` feature to display a colored shadow around the display picture."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This image will be shown in the application next to the details of the person as seen in figure 14 below."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Display Picture example"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::displaypic_personcard.PNG[width\u003d\"250\"]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Alaru"
        },
        "content": "An additional class, `DisplayPic`, is added to the `Person` class. This class contains the filepath to the stored image file."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It uses validation checks to ensure that the image meets the following requirements:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** It is a file that exists and has a file extension."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** It is a valid image file that can be opened as an image."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Alaru"
        },
        "content": "If it passes the checks, then a new `DisplayPic` object will be created with the filepath to the image stored as its value."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Alaru"
        },
        "content": "It will then proceed to duplicate the image. After duplicating the image, the value will be further updated with the duplicate image\u0027s filepath."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding a display picture when creating a new person"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `add` command supports a new field `dp/`, where the user will provide the filepath of the image and the newly created `Person` will have that specified image as the display picture."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Alaru"
        },
        "content": "For persons that were not specified a `dp/` during the `add` command, the `DisplayPic` object associated to them would contain the value of the default display picture."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing a display picture"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The display picture can also be changed by using the `edit` or `updateDP` commands."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The implementation of the UpdateDisplayCommand (`updateDP`) command closely follows the `edit` command, hence we will only showcase the implementation of the `UpdateDP` command."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following figure 15 is the sequence diagram of the `updateDP` command to show how it functions:"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".UpdateDisplayCommand Sequence Diagram"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::UpdateDisplayCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The user input will be passed in and parsed by the `AddressBookParser` and `UpdateDisplayCommandParser`."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The `UpdateDisplayCommandParser` then creates a new `UpdateDisplayCommand` where the `LogicManager` executes the `preprocessUndoableCommand()`."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". The `preprocessUndoableCommand()` will execute the `createUpdatedPerson()` to create a new `Person` object with the updated `DisplayPicture` object which contains the new filepath."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Finally, this new `Person` object created in step 3 will replace the original `Person` object with the old `DisplayPic` object stored in the `Model` through the `updatePerson()` method."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting a display picture"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Alaru"
        },
        "content": "To fully support the `undo` and `redo` commands, image files cannot be immediately deleted when it is not in use by the `UI`."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Alaru"
        },
        "content": "To work around this, a new class `UniqueItemList` was added to the model of the `AddressBook` as seen below in Figure 16."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".AddressBook Class Diagram"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::AddressBookClass.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The `UniqueItemList` consists of an `ArrayList` of unique `String` objects. These `String` objects represent the filepaths of all images that have been added or are used by the application during its runtime."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Upon every launch of the application, during the initialization of the `LogicManager` class, it will run through the `UniqueItemList` and delete"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Alaru"
        },
        "content": "any unused image files from the `data` folder. It does this by looping through the `UniquePersonList` as well and checks if the image file is used. If it is not used, it will be deleted."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following code fragment shows the deletion process:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Alaru"
        },
        "content": "----"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public static void clearImageFiles(List\u003cString\u003e itemsToDelete, ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    for (String item : itemsToDelete) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        boolean notUsed \u003d true;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (p.getDisplayPic().toString().equals(item) || item.equals(DisplayPic.DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                notUsed \u003d false;"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (notUsed) {"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            //deletion of file occurs here"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Alaru"
        },
        "content": "----"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The list is then cleared for the next usage of the application."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storing the image file for the display picture"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The application will take in an argument for the 3 commands mentioned above through `dp/ [PATH TO IMAGE]`. The `[PATH TO IMAGE]` can be the absolute or relative path to the image file."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Alaru"
        },
        "content": "An example of a `[PATH TO IMAGE]` would be C:\\Users\\Desktop\\Image.jpg for Windows."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Alaru"
        },
        "content": "If this `[PATH TO IMAGE]` leads to a non-existent file or a non-image file, it will utilise the default profile picture"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Alaru"
        },
        "content": "which is stored in `src/resources/images/displayPic` as `default.png`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Alaru"
        },
        "content": "If a valid path to an image is provided, the image will be processed and copied over to the `data` folder where the `addressbook.xml` is stored as well."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The filename of the image copied over will be a \u003c\u003csha-256,SHA-256\u003e\u003e hash. This hash is calculated over the `Person` object\u0027s details (i.e Name, Phone and Email) to ensure a unique filename."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following activity diagram in Figure 17 shows how the files are saved:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Activity diagram for storing image files"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::StoreDisplayPictureActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Due to the possibility that display pictures for a `Person` can be updated, this could lead to clashing of the same file names. In order to prevent overwriting of files, the new image filename"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Alaru"
        },
        "content": "will be the SHA-256 hash of the previous image filename."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The code utilised to duplicate the image file copies the file byte for byte, ensuring that they are binary equivalent. The code used is implemented as follows:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Alaru"
        },
        "content": "----"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public static void copyFile(String origFile, File outputFile) throws IOException {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //initialize buffer"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //open bis/bos as the buffered input and output streams respectively"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        int fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        while (fileBytes !\u003d -1) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bos.write(buffer, 0, fileBytes);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //close IO streams"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Alaru"
        },
        "content": "----"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Finally, the `DisplayPic` object will then be updated to store the relative filepath to this new duplicated image."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Fetching and displaying the image file"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The following activity diagram shows the flow of how an image file is retrieved to be displayed."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Activity diagram for fetching image files"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::FetchDisplayPictureActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The image file will then be utilized by JavaFX and displayed on the UI. The drop shadow of the image is determined by the `Participation` of the `Person`."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Filepath to the image"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 1 (current choice):** Copy the image file over to a designated location."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: The user does not need to maintain the image file, as the application does so itself."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: Duplication of the image file will take up more space on the user\u0027s storage."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 2:** Use the location of the file the user enters into the application."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: This would mean that there would always be only one copy of the image, hence less space used."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: The user needs to ensure the original image file is not moved or deleted."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Filename of the image"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 1 (current choice):** Use a hashing algorithm to name the file."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: SHA-256 provides \u003c\u003ccollision-resistance,collision resistance\u003e\u003e which means the filename would be unique majority of the time and it is easy to implement."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: It is difficult to manually check which `Person` the image file belongs to."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 2:** Use the name of the `Person` to name the file."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: Image files can be easily identified separately and easy to implement."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: This could lead to potential image files overwriting each other without additional checks."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Deletion of the image"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 1 (current choice):** Store the filepath in the `AddressBook` and delete it afterwards."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: Fully supports `undo` and `redo` even if the user moves or deletes the original image file."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: It is difficult to manually check which `Person` the image file belongs to."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* **Alternative 2:** Delete the image file immediately when the associated `Person` is removed."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Pros: This allows a simple implementation of immediately deleting the image file."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Cons: The image file could be lost forever if the user moves or deletes the original image file, thus causing `undo` and `redo` to malfunction."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Support for online URLs to download images."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// end::display[]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::task[]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Task list"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "Users are able to add, edit and remove tasks (with command `addTask`, `editTask` and `deleteTask`) in order to schedule their tasks within the application."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Tasks scheduled in this application will be stored in `addressbook.xml` and displayed in the `Todo List` tab and `Calender` view respectively."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "`Todo List` displays tasks with all fields (title, description, deadline and priority) in a list view whereas `Calender` displays tasks with only task titles in their respective date cells determined by their deadline."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "Tasks displayed in a date cell are color coded according to their priorities -- Green being lowest, yellow being medium and red being highest . Tasks are displayed in `Todo List` and `Calender` as shown in figure 19."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ".Tasks displayed in the application."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "image::displayTask.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "An additional class, `UniqueTaskList` is added to the `AddressBook` class. This class contains an `ObservableList` of tasks and a 2-dimensional `ObservableList` of tasks."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "The previous is the actual copy of tasks stored in `addressbook.xml` while the latter is a copy of reorganized tasks for displaying in `Calendar`."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding a task"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "The `addTask` command requires fields of `title/`, `desc/`, `by/` and `priority/` to be present."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "Any missing field will cause a built-in exception thrown when creating the `Task` object as the `addTaskCommandParser` validates the presence of all required fields."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "The exception prevents the invalid task from being created and added into `UniqueTaskList`."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "Multiple of same field is allowed but all are discarded except the last entry of that field by `ArgumentTokenizer` called in `AddTaskCommandParser`."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "After successful creating the `Task` object, `ModelManager` will help add the object into `Addressbook`."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "The `deleteTask` command requires a positive task index which specifies the task to be deleted. The `DeleteTaskCommandParse` validates this index with accordance to the current displayed `Todo List` size."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "If the index is valid, the `DeleteTaskCommand` will delete the corresponding `Task` object from `UniqueTaskList`."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "The `editTask` command requires a positive task index and desired edit fields indicated by prefix `title/`, `desc/`, `by/` and `priority/`. The `EditTaskCommandParser` validates that there is at least one field specified in the command."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "`EditTaskCommand` then creates a new `Task` object with modified fields and other unmodified fields identical."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "The `AddressBook` will be called by `ModelManager` to delete the original `Task` object from the `UniqueTaskList` and add the newly created task to the `UniqueTaskList`."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "Add task, delete task and edit task commands support `undo` and `redo` commands."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Add task, delete task and edit task commands have similar sequence behavior. Below is an example of the overview how components interact during deletion of a task."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ".Dlete a task."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteTaskCommandSequenceDiagram.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing tasks"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "The execution of `listTask` command parses a predicate argument PREDICATE_SHOW_ALL_TASK to `ModelManager` which updates the task list based on this predicate."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "This will extract all tasks saved in the data file `addressbook.xml`."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing current month tasks"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "The execution of `listCurrentTask` command parses the predicate argument PREDICATE_SHOW_ALL_CURRENT_TASK to `Model`. `ModelManager` then updates the task list based on this predicate."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "This is similar to Listing tasks but it will only extract tasks with deadlines due in the current month."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Sorting tasks"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "`Task` class implements Java `Comparable\u003c\u003e` class which enables sorting without writing the actual sorting algorithm. Thus,the execution of `sortTask` command relies on it."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "`Model` then calls `AddressBook` which sorts the tasks in `UniqueTaskList`."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "The sorting is done by comparing the year, month and date sequentially. This is specified in the compareTo() method in `Task`."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "listing and sorting tasks do not support `undo` and `redo` commands."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design consideration"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `EditTaskCommand` executes"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1(current choice): ** Adds a new Task and deletes the original task"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement, no need to worry about the change of deadline shown in `Calendar`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to maintain the original task list order."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2: ** Edits the field of original task"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Maintains the task list order"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Difficult to implement as a new mechanism to sync the `Calendar` cells is needed."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "// end::task[]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Tasks on calendar view"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** This feature allows the user to see the calendar on the UI and see the scheduled `Task` deadlines on the calendar."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "The user will enter a command `addTask title/TITLE desc/DESCRIPTION by/DEADLINE priority/PRIORITY` to the application. The application will then rely on `AddressBookparser` and"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "parse the argument. The argument will be passed into the AddTaskCommand to be executed. From there, it will create a new `Task` object that will be"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "added to the `calendarList` of the `UniqueTaskList` which in turn will be displayed on the date of the deadline, on the calendar."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to link specific tasks to the correct calendar nodes"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a 7 by 32, 2D `Array` to store the tasks to be added into the calendar."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Separate from the Task list (less prone to bugs). Faster run time (does not need to iterate through all tasks)."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Higher memory usage constraint, can only schedule tasks up to 6 months in advance to prevent high memory usage that will affect the speed and performance of the app."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use the task list itself to be displayed in the calendar."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easier to program and less memory usage (only 1 task list is used without another 2D array for the calendar), tasks can be scheduled as far ahead as desired."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Needs to iterate through the entire task list for every calendar node when loading the calendar view (slows performance when dealing with tasks)."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Viewing the calendar only by month"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a monthly only calendar view."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy view of the current tasks that are due on that month."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Not much choice for the user as only the monthly view is provided."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Give the user a choice to switch between weekly, monthly or yearly, e.g. _calendarfx_."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: User has more choice and freedom to control their UI."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Difficult to implement, also if 3rd party programs such at _calendarfx_ is used, certain features in those programs are redundant (e.g. map) and would only slow the app down."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Link specific key-press or select actions to the todo list such that a click on either side will display the selected task on the other."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//end::calendar[]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Alaru"
        },
        "content": "We utilize `java.util.logging` package for logging. The `LogsCenter` class manages the logging levels and logging destinations."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file. (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Certain properties of the application can be controlled (e.g app name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Data encryption (coming in v2.0)"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".  Click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* To run the tests, You need to open a console or terminal and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Detailed information on how to run tests using Gradle is specified in \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. _Unit Tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Alaru"
        },
        "content": "..  _Unit Tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Alaru"
        },
        "content": "..  _Integration Tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Alaru"
        },
        "content": "..  Hybrids of Unit and Integration Tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Alaru"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for Build Automation."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Alaru"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Alaru"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Alaru"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. +"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Alaru"
        },
        "content": "See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Alaru"
        },
        "content": "When there are changes to asciidoc files in a pull request, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Alaru"
        },
        "content": "See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Product Scope and Features"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Product scope"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*: Tech-Savvy University Teachers/Tutors"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "* have the need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer typing over mouse input"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "* are reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app, includes to-do"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    list features (with prioritization, etc.) and scheduling (with calendar)"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Feature contribution"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*Wu Di*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Major*: Implement the todo list"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Support adding, editing and deleting of tasks"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Works with undo/redo functions"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This enables the tutor to view all tasks in one glance so that he/she is able to stay organized and productive."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor*: Import feature to migrate data from an external file"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Imports data anywhere in any OS"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor work on different devices with the unique data set."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor*: add the alias feature to some of the commands"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Support majority of commands"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor remember the commands intuitively and type them more efficiently."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*Daniel*"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Major*: Calendar and Scheduler for user"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Supports adding of new tasks that will be slotted into the calendar(if it has a deadline)"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Also assigns a priority value to each task based on parameters keyed in when task is added"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor to keep track of what needs to be done and which task to focus on."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor*: Person has new parameter - Matriculation number"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Person now stores matriculation number of the person"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Add command supports adding person with matriculation number(compulsory parameter)"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Find command supports search by matriculation number"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor to easily search for a certain student by their unique matriculation number instead of just"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Alaru"
        },
        "content": "their names (e.g. easier than searching for a common name such as Daniel)."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor*: Toggle between dark and light theme"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "** The app can now be toggled between 2 different themes."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "This allows the tutor to customise their GUI so that they do not have to be restricted to 1 set layout throughout the entire time they use the app."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*Pearlissa*"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Major*: Login feature"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Implements new User package"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This allows multiple tutors to store their data in separate accounts, which can only be accessed by them."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor*: Sorting of contacts based on selected parameters"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Any number of parameters (at least 1), and in order of priority"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This allows tutors to be better able to go through their lists of students."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*Ellery*"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Major*: Display picture for all students entered"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Support adding, editing and deleting of picture"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Also shows a quick glance on student\u0027s participation (related to minor)"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Also works with the redo/undo function"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor keep track of his students, and be able to easily remember them better."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor*: Participation marks to keep track of student participation"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Add and keep track of participation marks for the student"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This helps the tutor to keep track of the student\u0027s participation."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |get error messages/prompts |better adapt to commands to use them properly"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |better manage all my contacts at one go"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by matriculation number/email |identify people easily"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |sort contacts based on name/address/email/tags |work with specific groups of people"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |assign a to-do list to each person in address book |know what I need to do for them"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add individual items to the to-do lists |update additional tasks"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |remove entire to-do lists or items in it |remove completed tasks"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add events to the schedule |better manage work/students"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a deadline to tasks/items |know what needs to be done and by when"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |prioritize tasks/items |efficiently get tasks/items done on time"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |import students/people from a text file |it is easier to enter large numbers of people"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |add profile pictures |know who the people I am working with are"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |mass email students/people based on a tag |easily email/inform a class of students of announcements"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |set reminders for certain events |have an email sent to me before the actual event so that I don\u0027t forget"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |combine groups/tags |better work with people who have similar interests/work"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Alaru"
        },
        "content": "(For all use cases below, the *System* is `Your TA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Alaru"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Alaru"
        },
        "content": "2.  Your TA shows a list of persons."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Alaru"
        },
        "content": "3.  User requests to delete a specific student in the list."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Alaru"
        },
        "content": "4.  Your TA deletes the student and all related entries (if any)."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** 3a1. Your TA shows an error message."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Use case: Updating the display picture"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Alaru"
        },
        "content": "1.  User requests to update the display picture of a person with an image file filepath."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Alaru"
        },
        "content": "2.  Your TA shows a list of persons that match the search query."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Alaru"
        },
        "content": "3.  Your TA reads the image file, duplicates it and updates the display picture of the person."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* 3a. The filepath provided does not lead to any valid image file. +"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** 3a1. Your TA shows an error message."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Alaru"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Use case: Find a person by name"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Alaru"
        },
        "content": "1.  User requests to find a person by name."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Alaru"
        },
        "content": "2.  Your TA shows a list of persons that match the search query."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be intuitive or easily understood after reading the User Guide."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should not exceed the size of 100 MB."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should respond to any requests within 3 seconds."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should not modify and copy any user\u0027s personal data on the computer."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".  A user\u0027s data should be password protected."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[collision-resistance]] Collision resistance::"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Two different inputs to a function will very unlikely provide the same output."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[deadline]] Deadline::"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The date for which certain tasks are due to be done."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[feature]] Feature::"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A specific function of the program."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[import]] Import::"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Bring into the application from an external source."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[integer-overflow]] Integer overflow::"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Alaru"
        },
        "content": "When the value of the integer exceeds the maximum possible value value that can be stored."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[logic]] Logic::"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The set of commands that can be executed by the application."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[model]] Model::"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The internal memory used when application is running."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[parser]] Parser::"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A converting function or class that takes in raw input and separates it into its usable components for other methods."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[sha-256]] SHA-256::"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A cryptographic hash that is akin to a \u0027signature\u0027 for a text or a data file."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Alaru"
        },
        "content": "SHA-256 generates an almost-unique 256-bit (32-byte) signature for a text."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[[storage]] Storage::"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "The set of instructions to store specific states and data of the application when application is not running so that it"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "can be loaded back into the application when application is started again."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "[[tags]] Tags::"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Keywords tied to categories or people."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[tasks]] Tasks::"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A command to be executed."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[to-do-list]]To-do list::"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Alaru"
        },
        "content": "A list of things to do."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[[ui]] User interface::"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The visible interface that the user will be seeing when using the application."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Initial launch"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Saving window preferences"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The corresponding display picture image to the person deleted is expected to be deleted upon next application start up and log in (to same account)."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Adding participation marks for a person"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Adding participation marks to a person while all persons are listed."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 1 marks/50` +"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: First person is updated with the addition of the marks. Success message shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 0 marks/50` +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: No marks are added to anyone. Error details shown in the status message. Status bar remains the same. +"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 1` +"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: No marks are added to anyone. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Other incorrect markPart commands to try: `markPart`, `markPat x marks/50` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Adding participation marks to a person when you searched for a person using `find`"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: Find a person using the `find` command. At least one person in the list returned."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 1 marks/50` +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: First person is updated with the addition of the marks. Success message shown in the status message. Timestamp in the status bar is updated. List is still filtered."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 0 marks/50` +"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: No marks are added to anyone. Error details shown in the status message. Status bar remains the same. List is still filtered. +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `markPart 1` +"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: No marks are added to anyone. Error details shown in the status message. Status bar remains the same. List is still filtered."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Adding/Updating display picture for a person"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Adding display picture when adding a new (non-duplicate) person while all persons are listed."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: List all persons using the `list` command. Multiple persons in the list. Not adding a duplicate person."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Assumptions: There is a valid image file at the specified location. +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `add n/John Doe m/A1234567J p/98765432 e/johnd@example.com a/COM1 B#1-04 dp/C:\\Users\\Hello\\Desktop\\picture.jpg` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: John Doe is added with the specified details and image. Success message shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `add n/John Doe m/A1234567J p/98765432 e/johnd@example.com a/COM1 B#1-04 dp/C:\\Users\\Hello\\Desktop\\picture.jpg` +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: John Doe is added with the specified details and has the default display picture. Success message shown in the status message. Timestamp in the status bar is updated. +"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Adding display picture to an already existing person while all persons are listed."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Assumptions: There is a valid image file at the specified location. +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `updateDP 1 dp/C:\\Users\\Hello\\Desktop\\picture.jpg` +"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: First person\u0027s display picture is updated with the image. Success message shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: `updateDP 1 dp/` +"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: First person\u0027s display picture is updated to the default display picture. Success message shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Saving and loading of the image files"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Deleting image files while the application is still running."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: There exists some persons already added and are utilizing a display picture."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: Delete all images from the `data/displayPic` folder. +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: Upon next refresh of the list that causes changes, the affected persons will be reset back to the default profile picture."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Checking proper deletion of image files"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: None of the existing persons in Your TA have a display picture."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case:"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Adding multiple images using the `updateDP` or `edit` command. E.g executing `updateDP 1 dp/C:\\Users\\Hello\\Desktop\\picture.jpg` twice."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Open the `data/displayPic` folder to note that there are 2 image files created."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "Alaru"
        },
        "content": ". Close and restart the application and log back in to the same account. +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Expected: Unused image files will be deleted, only one image file remains."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Deleting image files while the application is not running."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Prerequisites: There exists some persons already added and are utilizing a display picture."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".. Test case: Delete all images from the `data/displayPic` folder. +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   Expected: Upon loading up the application, the affected persons will be reset back to the default profile picture."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding a task while all tasks are listed."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Adding a Task"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "** Prerequisites: List all tasks using the `listTask` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addTask title/meeting desc/there is team meeting for CS2103 by/20-04-2018 priority/3`"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: a task is added with title, description, deadline and priority stated in the command. Details of the added task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: \u0027addTask title/meeting`"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No task is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect addTask commands to try: `addTask title/meeting priority/1`, `addTask by/20-04-2018 priority/3`"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: similar to previous."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding a task while current month tasks are listed."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "** Prerequisites: List all current month tasks using the `listCurrentTask` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addTask title/meeting desc/there is team meeting for CS2103 by/20-04-2018 priority/3`"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: a task is added with title, description, deadline and priority stated in the command. All tasks again are shown in the list. Details of the added task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: \u0027addTask title/meeting`"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No task is added. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect addTask commands to try: `addTask title/meeting priority/1`, `addTask by/20-04-2018 priority/3`"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: similar to previous."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a Task"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a task while all tasks are listed."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "** Prerequisites: List all tasks using the `listTask` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `deleteTask 1` +"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `deleteTask 0` +"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect deleteTask commands to try: `deleteTask`, `deleteTask x` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: similar to previous."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a Task"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ". Editing a task while all tasks are listed."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "** Prerequisites: List all tasks using the `listTask` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `editTask 1 title/meeting priority/3`"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First task is edited with title meeting and priority 3. It is shown last in the list. Details of the edited task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: \u0027editTask 1`"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No task is edited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect addTask commands to try: `editTask title/meeting priority/1`, `editTask x by/20-04-2018 priority/3` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: similar to previous."
      }
    ],
    "authorContributionMap": {
      "Alaru": 584,
      "Pearlissa": 159,
      "-": 784
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Your TA - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title: Table of Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F09-B1/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `F09-B1`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*Your TA* is for university Teaching Assistants (TAs) who prefer using a desktop application to manage student contacts and plan schedules. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Its features include a login system, tools to manage students\u0027 information, task schedulers linked to a calendar and many more! +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It is optimized for those who prefer to work with a *Command Line Interface* (CLI) while still having the benefits of a *Graphical User Interface* (GUI). +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This means if you prefer using the keyboard over the mouse and can type fast, it can get your contact management and scheduling done faster than traditional GUI applications. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This user guide will take you through the features and commands available for use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Before you can use *Your TA*, follow these steps to set up the application and its necessary tools:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Ensure that you have Java version `1.8.0_60` or later installed on your Computer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `YourTA.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the application. The Login GUI should appear in a few seconds, as shown in Figure 1 below."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Login GUI upon startup"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image::Login.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Enter your `Username` and `Password` to log in. _Refer to \u003c\u003cFeatures\u003e\u003e for details of the feature._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you\u0027re a first-time user without an account, enter your desired `Username` and `Password` and an account will be created and you will be logged in automatically."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "After logging in, you should now see the main Application GUI appear. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The key parts of the GUI (as shown in Figure 2 below) are: +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Person List (displays all contacts)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Todo List (displays all outstanding tasks)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Calendar"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Command Box (field where you input your commands)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Results Display Panel (field where results of commands appear)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Parts of the GUI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::UiParts.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Tips on using the command box:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*  The command box is where you type in commands followed by pressing kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "For instance, typing `help` and pressing kbd:[Enter] will open the help window for the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*  Some example commands you can try:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "** *`list`* : lists all contacts."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** **`add`** `n/John Doe` `m/A0167352F` `p/98765432` `e/johnd@example.com` `a/John street, block 123, #01-01` : adds `John Doe` as a contact with their respective details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "** **`delete`** `3` : deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "** *`exit`* : exits the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "*  Refer to \u003c\u003cContact Features\u003e\u003e and \u003c\u003cTaskList_Feature\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Login Feature"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Before you are able to access the application, login is required."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Enter your `Username` and `Password` in the respective fields. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Click on the `login` button."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* If you have entered either of those incorrectly, the text \"[Existing user: Incorrect password entered] [New User: Password must contain 8-30 characters]\" will be displayed. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " This means that if you are an existing user (i.e. have logged in before), you have entered your password incorrectly, and if you are a new user, your password does not meet the specified requirements for a creation of a password."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": " You have an unlimited number of tries to log in. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Upon successful login, the application will load with your previously (if applicable) saved data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "When creating a username and password, they need to be alphanumeric (contain only numbers and alphabets)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Both `Username` and `Password` fields are case-sensitive."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you are a first-time user, create an account by entering your desired `Username` and `Password` in the username and password text fields respectively. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Then, press kbd:[ENTER] or click `Login`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Say you want to create an account with the following credentials."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Username: newUser +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Password: Iamanewuser"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Upon typing in the credentials, a new instance of *Your TA* will start up as seen in Figure 3 below."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Main Application GUI upon Login"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you log out then log back in with the same username (newUser) but an incorrect password (Iamnotanewuser, for instance), an error message will be displayed as seen in Figure 4 below."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Wrong Password"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::LoginFail.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Info"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "These are the guidelines on how the command format will be represented in the rest of this guide."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Commands have _aliases_, which are either shorter versions of the commands or their equivalent symbols. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `add` `n/John Doe`, \u0027a` `n/John Doe` or `+` `n/John Doe` all result in John Doe being added as a contact, where \"add\" is the command itself, and \"a\" and \"+\" are its aliases."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. in `add` `n/NAME`, `NAME` is a parameter which can be used as `add` `n/John Doe`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times (including zero). +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `[t/TAG]...` can be used as `t/friend`, `t/friend` `t/family`, or even not used at all."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME` `p/PHONE_NUMBER`, `p/PHONE_NUMBER` `n/NAME` is also acceptable."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Help Feature"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This guide can be opened in *Your TA* itself, with the use of the `help` command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Viewing help : `help`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `?` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "This opens a help window which explains what commands can be used, and how to use them."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Features"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This section shows an in-depth explanation of the commands available to be used on entries found in the *Person List*."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Adds a person (student) into the person list. +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `a` and `+` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `add` `n/NAME` `m/MATRICULATION NUMBER` `p/PHONE_NUMBER` `e/EMAIL` `a/ADDRESS` `dp/[IMAGE PATH]` `[t/TAG]...`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Both the display picture and tags fields are optional, and a person can have any number of tags (including zero)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The tags \"lecturer\", \"TA\" \"student\" and \"T1\" will appear red, yellow, blue and green respectively."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Do refrain from using high resolution images as display pictures, the optimum resolution is 500 x 500 pixels."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The name field of Your TA will allow duplicate names to be stored (but not duplicate people, where all fields are the same). +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "However, the matriculation number field does not allow duplicates."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with default inputs as displayed in Figure 5 below."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Default Address Book State +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiInitialClear.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Let\u0027s try entering a command. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `add` `n/John Doe` `m/A0111111X` `p/98765432` `e/johnd@example.com` `a/John street, block 123, #01-01` `dp/C:\\Users\\Name\\Desktop\\John.jpg` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The filepath after the `dp/` depends on where your image file is located."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will add \u0027John Doe\u0027 into the person list with his respective details (as seen in Figure 6)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".John Doe Added +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiAfterFirst.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Let\u0027s try another command. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `add` `n/Betsy Crowe` `t/friend` `m/A1234567C` `e/betsycrowe@example.com` `a/Newgate Prison` `p/1234567` `t/criminal` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will add \u0027Betsy Crowe\u0027 into the person list with her respective details (as seen in Figure 7)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Betsy Crowe Added +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiAfterSecond.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "You may leave the `dp/` portion empty if you do not have a profile picture. The application will default to using the default profile picture."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Locating persons by name or matriculation number: `find`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Finds students whose names contain any of the given keywords or whose matriculation number corresponds to the given keyword and lists them as results. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `f` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `find KEYWORD` `[MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Only the name and the matriculation number are searched for keywords."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Only full words will be matched +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application starts with the following as shown in Figure 8 below."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Application before Find +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiAfterSecond.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Let\u0027s say you\u0027re looking for a person with the name \u0027John\u0027."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `find` `John` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The application searches for the keyword \u0027John\u0027 and returns 1 result (see Figure 9)."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Returns \u0027John Doe\u0027 +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindJohn.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The next command shows how to search using multiple keywords."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `find` `Betsy` `Tim` `John` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The application searches for the keywords \u0027Betsy\u0027, \u0027Tim\u0027 and \u0027John\u0027 and returns 2 results (see Figure 10)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Returns \u0027John Doe\u0027 and \u0027Betsy Crowe\u0027 +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindBTJ.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The next command shows how to search using matriculation number."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `find` `A0111111X` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The application searches for the person with the matriculation number as shown and returns 1 result (see Figure 11)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Returns \u0027John Doe\u0027, with Matriculation Number \u0027A0111111X\u0027 +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindMatric.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons: `list`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Displays a list of all persons in the application. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `ls` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `list` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Application lists all persons who have been added up until this point (see Figure 12)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".All People Listed +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image::AllListed.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person: `edit`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Edits an existing person (has already been added) in the application. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `e` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `edit` `INDEX` `[n/NAME]` `[m/MATRICULATION NUMBER]` `[p/PHONE]` `[e/EMAIL]` `[a/ADDRESS]` `[dp/IMAGE PATH]` `[t/TAG]...`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Edits the person at the specified `INDEX`. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Replaced display pictures will be removed from storage upon the logging in to the same account during the next start up of *Your TA*."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* When editing tags, the existing tags of the person will be removed +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* You can reset a person\u0027s display picture to default by typing `dp/` with no [IMAGE PATH] written after it."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Do refrain from using high resolution images as display pictures, the optimum resolution is 500 x 500 pixels."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Address book starts with the following as shown in Figure 13 below."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Application Before Edit +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::AllListed.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Say you wish to edit the details of \u0027Betsy Crowe\u0027."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `edit` `2` `p/91234567` `e/johndoe@example.com` `dp/C:\\Users\\Name\\Desktop\\betsy.jpg` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This changes the details of the person with index 2 (Betsy Crowe) and writes over her original saved details (Figure 14)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Phone, Email and Display Picture of 2nd Person (Betsy Crowe) Edited +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstEdit.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you find that you\u0027ve added someone with incorrect details, you can change the entry."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `edit` `1` `n/John Doeser` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This changes the details of the person with index 1 (originally John Doe) and updates his details (see Figure 15)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".Name Changed to \"John Doeser\" +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondEdit.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Sorting all entries: `sort`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Sorts all entries found in the person list in alphabetical order based on name. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Alias: `s` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::participation[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding participation marks: `markPart`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Adds to the participation marks of a person (student). The maximum limit for participation marks is 100"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "and the maximum amount that can be added per execution of the command is 100. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "i.e. if someone has 90 marks and you add 20, the participation marks will be capped at 100."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Alaru"
        },
        "content": "If the marks are below 50, there will be a red frame surrounding the person\u0027s profile picture. If the person has 50 or more marks, the colored frame around the user will change to green."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `markPart` `INDEX` `marks/DIGITS`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The `INDEX` refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The marks to be added must be a *integer* between 0 and 100 inclusive."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `list` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Lists all people in the application (see Figure 16)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".All People Listed"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::markPartlist.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `markPart` `1` `marks/50` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Adds 50 participation marks to the 1st person in Your TA (see Figure 17)."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Adds 50 Marks to Alex, Frame turns Green"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::markPartadd50.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `find` `David` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Returns David as a result (see Figure 18). +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Alaru"
        },
        "content": ".`find` Command returns David"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::markPart2David.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `markPart` `1` `marks/70` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Adds 70 marks to the 1st person in the results of the `find` command, in this case, David. +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Note that it has exceeded the cap of 100, hence the marks was set to 100 (see Figure 19)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".David\u0027s Marks Updated, Frame Updated"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::markPartupdateDavid.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// end::participation[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// tag::display[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Updating the display picture: `updateDP`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Updates a person\u0027s display picture in the application. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `updateDP` `INDEX` `dp/[IMAGE PATH]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The `INDEX` refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The index must be a *positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* Do note that unused display pictures will be deleted upon the next application startup when logging in to the same account that updated the display picture."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* You can reset a person\u0027s display picture to default by typing `dp/` with no [IMAGE PATH] written after it."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The aspect ratio of the image will be used to fill a circle for the display picture, thus using an image with an aspect ratio close to 1:1 pixels would be optimal."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Do refrain from using high resolution images as display pictures, the optimum resolution is 500 x 500 pixels."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `list` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Lists all people in Your TA (see Figure 20). +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "We can see that Alex Yeoh has a display picture. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".All People Listed"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::updateDPJack1.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `updateDP` `1` `dp/` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Deletes the display picture of the 1st person, returning it back to the default profile picture (see Figure 21)."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Resetting Alex\u0027s Display Picture"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::updateDPJack2.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `find` `Betsy`, `updateDP` `1` `dp/C:\\Users\\Betsy\\Desktop\\betsy.jpg` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Returns Betsy as a result and updates the display picture of the 1st person, in this case Betsy, to the picture specified in the `dp/` field."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Alaru"
        },
        "content": "// end::display[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person: `delete`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `d` and `-` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `delete` `INDEX`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The `INDEX` refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The index must be a *positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The display picture (if the person has one) will be deleted upon the next application start up."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Alaru"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The display picture that is stored on your hard disk will only be removed upon the next start up of *Your TA* when you log into the same account that created it."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Address book starts with the following as shown in Figure 22 below."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Application before Delete +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::UIFromDelete.png[width\u003d\"800\u0027]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `list`, `delete` `2` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The 2nd person listed in the address book is deleted (see Figure 23)."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".2nd Person Deleted +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstDelete.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `find` `John`, `delete` `1` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The 1st person listed in the person list, in this case, John is deleted (see Figure 24)."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ".1st Person from Find Command Deleted +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondDelete.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person: `select`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the last person listing. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `s` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `select` `INDEX`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The index must be a *positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Your TA starts with the following as shown in Figure 25 below."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Application before Select +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::UIFromDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `list`, `select` `1` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Lists all people in address book and selects the 1st person (see Figure 26)."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Selects 1st Person Listed +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstSelect.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `find` `Betsy`, `select` `1` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The 1st person in the results of the `find` command is selected, in this case, Betsy is selected (see Figure 27)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".1st Person from Find Command Selected +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondSelect.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[[TaskList_Feature]]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Task, To-do list and Calendar Features"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "To see how the task scheduling feature works on the `Todo List` and `Calendar`, select the `Todo List` tab located right beside the `Person List` tab."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Figure 28 below shows where the `Todo List` and `Calendar` are located"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ".Todo List and Calendar"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::TodoListandCalendar.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::switchTab[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Switching between tabs: `switchTab`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Switches between the *Person List* tab and *Todo List* tab. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `swt` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `switchTab`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Figure 29 below shows the result of entering command `switchTab` switching from Person List to Todo List and the display of command result."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Tabs Switched +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::switchTabs.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "// end::switchTab[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a task: `addTask`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Adds a task to the address book. +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `at` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addTask title/TITLE desc/TASK DESCRIPTION by/DEADLINE priority/PRIORITY`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "New tasks will be added into the *To-do list* and *Calendar*. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "`DEADLINE` must be in the format of DD-MM-YYYY, and has to be a date that exists."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The month value has to be a month no more than 6 months after the current month (Start counting to 6 from the next month)."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Tasks do not need to be unique, duplicate tasks are allowed."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with no tasks, as seen in Figure 30 below."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Initial Application View +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::UIFromDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `addTask` `title/Grade Exams` `desc/Grade mid-terms` `by/20-04-2018` `priority/2` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will add a task, \u0027Grade mid-terms\u0027 into the todo list with the respective details (see Figure 31)."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".New Task \"Grade Exams\" Added +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `addTask` `title/Submit Attendance` `desc/Submit tutorial attendance` `by/21-04-2018` `priority/3` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will add a task, \u0027Submit tutorial attendance\u0027 into the calendar and todo list with the respective details into the application (see Figure 32)."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".New Task \"Submit Attendance\" Added +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a task: `editTask`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Edits a task in the todo list. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `et` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `editTask` `INDEX` `[title/TASK TITLE] [desc/TASK DESCRIPTION]` `[by/DEADLINE]` `[priority/PRIORITY]`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Not all fields are required, you may only pick the fields that you want to edit."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "The specified tasks will be edited in the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The `INDEX` refers to the index number shown in the last task listing. +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The index must be a *positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with 2 tasks (see Figure 33)."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Initial Application View +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `editTask` `1` `priority/1` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This edits the task at index 1, and change its priority to 1 (see Figure 34)."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 1 Priority Changed to 1 +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `editTask` `2` `by/23-04-2018` +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This edits the task at index 2, and change its deadline to 23-04-2018 (see Figure 35)."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 2 Deadline Changed to 23-04-2018 +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a task: `deleteTask`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Deletes a task in the todo list. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `dt` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `deleteTask` `INDEX`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "The specified indexed task will be deleted from the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with 2 tasks as seen in Figure 36 below."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Initial Application View +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `deleteTask` `1` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will delete the task at index 1, as shown in Figure 37 below."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 1 Removed +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::displayTask[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all tasks: `listTask`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all tasks in application. +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `lt` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listTask`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "All the tasks stored in application will be listed in the *Todo List*."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Listing current month\u0027s tasks: `listCurrentTask`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Shows a list of tasks that have their deadlines in the current month. +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `lct` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listCurrentTask`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Only the tasks due within current month will be listed in the *Todo List*."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Figure 38 below illustrates the change in tasks displayed after listCurrentTask is entered."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Behavior of Executing listCurrentTask"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::listTasks.png[width \u003d \u0027800\u0027]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sorting tasks: `sortTask`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts all entries displayed in *Todo List* in date order. +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `stt`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sortTask`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "// end::displayTask[]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[[otherCommands]]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Miscellaneous Commands"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands: `history`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `h` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command: `undo`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `u` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Undoable commands: those that modify the application\u0027s content +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "(i.e. `add`, `delete`, `edit`, `markPart`, `updateDP`, and `clear`)."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Address book starts with the following as shown in Figure 39 below."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Application Before any Commands +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Alaru"
        },
        "content": "image::UIFromDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `delete` `1`, `list`, `undo` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The `delete` `1` command will be reversed. +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "End result should look the same as Figure 39."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `select` `1`, `list`, `undo` +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The `undo` command fails as there are no undoable commands executed previously. +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "End result should look the same as Figure 39."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `delete` `1`, `clear`, `undo`, `undo` +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: Both commands reversed. +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "End result should look the same as Figure 39."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command: `redo`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `r` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application starts with the same one in Figure 39."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `delete` `1`, `undo`, `redo` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The delete command is reversed, then reapplied (see Figure 40)."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".`delete` Command Reapplied +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstRedo.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `delete` `1`, `redo` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: The `redo` command fails as there are no `undo` commands executed previously. +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "End result should look the same as in Figure 39."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command(s) entered: `delete` `1`, `clear`, `undo`, `redo` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: `clear` command and `delete` command are reversed. `clear` command and `delete` command are subsequently reapplied (see Figure 41)."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Both Commands Reversed, Reapplied, Application Cleared +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondRedo.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries: `clear`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This command will also clear all the display picture images stored."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `c` +"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Alaru"
        },
        "content": "This command clears ALL the data from the application (both people and tasks). The display pictures files will be cleared as well upon the next application startup."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This is a dangerous command. If unintentionally applied, simply use the command `undo` to revert it. Otherwise, if application is closed without reverting, all data will be lost."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Importing data from another file: `import`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Extracts data from an xml formatted file and"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "replaces the current stored data. +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `import` `FILEPATH`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "`import ~/download/NewData.xml`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Application data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Additional Information on Features"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This section provides more information on certain features of *Your TA*."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add command"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "The `add` command adds a person into the application. +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This command has specific compulsory (must-have) and non-compulsory fields. +"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "Compulsory fields:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* Matriculation Number"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "* Phone Number"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* Email Address"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* Address"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Non-Compulsory fields:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* Tags"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "* Display Picture"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual field has a specific format requirement. +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "e.g the NAME field must only contain letters."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "If the wrong format is detected, the application will prompt you of the correct input format in the results display panel right underneath the command input line."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo command"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "As stated in section 8.2, certain commands (not all) can be undone."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that cannot be undone:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* `sort`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* `find`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The calendar fills up based on the day of the first day of the month, and since the calendar only allows 35 days to be displayed, this will cause some months (e.g. September 2018) to be cut off."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "* The unfilled nodes of the calendar will be filled with the days of either the previous or next month. (Depending on the layout of the current month)."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "To see the last few days of the final month, click on the `\u003e\u003e` button to navigate to the next month\u0027s calendar. +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The last days of that month will be displayed there, with its tasks."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the data file of your previous *Your TA* folder."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do i keep my information safe? +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*A*: A login feature has already been implemented as of v1.5, which ensures that a user can only access their own accounts via authentication."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Contact commands"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Add* `add` `n/NAME` `m/MATRICULATION_NUMBER p/PHONE_NUMBER` `e/EMAIL` `a/ADDRESS` `dp/DISPLAY_PICTURE` `[t/TAG]...` +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `add` `n/James Ho` `m/A2345678J` `p/22224444` `e/jamesho@example.com` `a/123, Clementi Rd, 1234665` `t/friend` `t/colleague`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Delete* : `delete` `INDEX` +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `delete` `3`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Edit* : `edit` `INDEX` `[n/NAME]` `[m/MATRICULATION_NUMBER]` `[p/PHONE_NUMBER]` `[e/EMAIL]` `[a/ADDRESS]` `[dp/DISPLAY_PICTURE]` `[t/TAG]...` +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `edit` `2` `n/James Lee` `e/jameslee@example.com`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Find* : `find KEYWORD` `[MORE_KEYWORDS]...` +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `find James` `Jake`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *MarkParticipation* : `markPart` `INDEX` `marks/DIGIT`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g `markPart` `1` `marks/50`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Select* : `select` `INDEX` +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g.`select` `2`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Sort* : `sort`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *UpdateDP* : `updateDP` `INDEX` `dp/[IMAGE PATH]` +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g `updateDP` `1` `dp/C:\\Users\\Betsy\\Desktop\\betsy.jpg`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tasks, To-do list and Calendar commands"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Add Task* : `addTask` `desc/TASK DESCRIPTION` `by/DEADLINE` `priority/PRIORITY` +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `addTask` `title/Grade Exams` `desc/Grade mid-terms` `by/04-04-2018` `priority/2`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Delete Task* : `deleteTask` `INDEX` +"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `deleteTask` `1`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Edit Task* : `editTask` `INDEX` `[title/TASK TITLE]` `[desc/TASK DESCRIPTION]` `[by/DEADLINE]` `[priority/PRIORITY]`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "e.g. `editTask` `1` `title/Eat Dinner` +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *List Task*: `listTask` +"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *List Current month tasks*: `listCurrentTask` +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Sort tasks by date*: `sortTask`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Switch tabs*: `switchTab`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Miscellaneous Commands"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "Alaru": 81,
      "Pearlissa": 339,
      "-": 442
    }
  },
  {
    "path": "docs/team/Alaru.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d Chia Kah Sheng Ellery - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F09-B1/main"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d PROJECT: Your TA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA is an application designed to fulfill the needs of a university tutor. It helps them to manage their students and tasks that they have to do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA uses a graphical user interface built using JavaFX and the user interacts with the application mostly through a command line interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA is written in Java and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA is build upon https://github.com/se-edu/addressbook-level4[AddressBook - Level 4]."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Major enhancement*: Added a display picture/status to all persons in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** What it does: It allows the user to save a display picture to any student in the application. It also allows the tutor to have a quick glance to check if the student has been participating enough."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Justification: This feature provides the tutor with a visual stimulus on how the student looks. This way, the tutor would be able to quickly associate the student\u0027s name and their face"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "which in turn allow the tutor to remember their students better. This would encourage a more holistic environment for teaching and learning as it would make it more"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "personal between the tutor and the student. It utilizes a drop shadow frame which shows whether the student has at least participated sufficiently in classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Highlights: This enhancement fully supports the existing undo and redo even though image files are stored outside the `AddressBook` memory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "The existing commands (add, edit, delete and clear) were also updated to support the adding and changing of display pictures."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Additional changes: Had to modify the codebase to ensure that `add`, `edit`, and `clear` works with the display picture field as well. Relevant tests were updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Credits: https://stackoverflow.com/users/2970947/elliott-frisch[Elliott Frisch] from stackoverflow on the SHA-256 hash algorithm used to generate the name of the image file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Minor enhancement*: Added a `Participation` attribute to `Person` to keep track of a student\u0027s participation level. It supports the addition of marks to the `Person` object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/functional/Alaru.md[Functional code]] [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/functional/Alaru-reused.md[Functional(re-used) code]] [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/test/Alaru.md[Test code]] [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/unused/Alaru-unused.md[Unused code]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Managed the Issue Tracker, assigned issues and created/added labels to the issues. Also managed the milestones."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Help resolve merge conflict for teammate. (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/104[#104])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Set up Travis for the organization repo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Help update README (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/66[#66]), changed application icon (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/108[#108]) and name (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/123[#123])."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Updated screenshots used in the User Guide: (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/57[#57], PR https://github.com/CS2103JAN2018-F09-B1/main/pull/130[#130])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Edited the developer guide for English usage, added prefaces, updated images, made explanations clearer (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/123[#123]) and added manual testing cases (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/130[#130])."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Sequence diagram was added (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/108[#108]) and was edited and used by teammate (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/124[#124])."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "*** Reported bugs and suggestions for another team in the class (examples:  https://github.com/CS2103JAN2018-F12-B2/main/issues/83[1], https://github.com/CS2103JAN2018-F12-B2/main/issues/80[2], https://github.com/CS2103JAN2018-F12-B2/main/issues/76[3])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|_Given below are main sections I contributed to the User Guide. Updates were also made to existing User Guide portions such as the add, edit, delete and clear commands.  They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "include::../UserGuide.adoc[tag\u003dparticipation]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplay]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. Additional manual test cases were also added. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dparticipation]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddisplay]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alaru": 72,
      "-": 1
    }
  },
  {
    "path": "docs/team/JoonKai1995.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tan Joon Kai, Daniel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F09-B1/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project: Your TA"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Your TA is a desktop contact and task manager application used to manage the many students and deadlines that a university teaching assistant (TA) has. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major feature*: Added *tasks* that can be scheduled and a *calendar* that scheduled task would appear in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: Allows the user to schedule specific tasks into *Your TA*. The scheduled task will then be displayed on the calendar with a colour code based on the tasks *priority* level."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature is an entirely new function for the user to manage the deadlines of the array of tasks and deadlines that comes with the job of being a teaching assistant. This makes it such that *Your TA* not only helps manage particulars of students, but also the user\u0027s (TA) personal tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This feature is brand new that adds a significant amount of functionality to *Your TA*. It required an in-depth planning process of design. The implementation too was challenging as it required the creation of a fully functional calendar, and linking tasks to the calendar such that only tasks with deadlines scheduled on that day would be displayed on that calendar node."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: Most of the base code of the `Task` class were adapted from the existing `Person` class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor feature*: Added matriculation number field to the people added to *Your TA*. And `find` command now finds matching matriculation numbers to the keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: *Your TA* is made for teaching assistants in universities, the matriculation number field and the `find` command supporting this field provides more user friendliness when searching for a student."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/functional/JoonKai1995.md[Functional]] [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/test/JoonKai1995.md[Test]]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Crisis management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Fixed repository during 2 major repo crashes https://github.com/CS2103JAN2018-F09-B1/main/pull/63[#63] https://github.com/CS2103JAN2018-F09-B1/main/pull/98[#98]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote key tasks classes for teammates todo list feature https://github.com/CS2103JAN2018-F09-B1/main/pull/45[#45]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to the user guide https://github.com/CS2103JAN2018-F09-B1/main/pull/128[#128]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added graphical images to provide a visual aid to the user reading the user guide https://github.com/CS2103JAN2018-F09-B1/main/pull/44[#44]."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*****"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*****"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Task, To-do list and Calendar Features"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "To see how the task scheduling feature works on the `Todo List` and `Calendar`, select the `Todo Lit` tab located right beside the `Person List` tab."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a task: `addTask`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Adds a task to the address book. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `at` +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addTask title/TITLE desc/TASK DESCRIPTION by/DEADLINE priority/PRIORITY`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "New tasks will be added into the *To-do list* and *Calendar*. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* `DEADLINE` must be in the format of dd-MM-YYYY."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Deadline has to be a date that exists."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* The month value has to be a month no more than 6 months after the current month (Start counting to 6 from the next month)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Tasks do not need to be unique (in any field title, description, dealine or priority). Duplicate tasks are allow."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The application initially starts with no tasks:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".Initial application view. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::UIFromDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `addTask title/Grade Exams desc/Grade mid-terms by/20-04-2018 priority/2` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "This will add a task, \u0027Grade mid-terms\u0027 into the list with his respective details into the application (Figure 30)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".New task \"Grade Exams\" added. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `addTask title/Submit Attendance desc/Submit tutorial attendance by/21-04-2018 priority/3` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "This will add a task, \u0027Submit tutorial attendance\u0027 into the calendar and to-do list with the respective details into the application (Figure 31)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".New task \"Submit Attendance\" added. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a task: `editTask`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Edits a task to the address book. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `et` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `editTask INDEX [title/TASK TITLE] [desc/TASK DESCRIPTION] [by/DEADLINE] [priority/PRIORITY]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Not all fields are required, you may only pick the fields that you want to edit."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The specified tasks will be edited in the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": "* The index refers to the index number shown in the last task listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "****"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The application initially starts with 2 tasks:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".Initial application view. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `editTask 1 priority/1` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "This will add a task, \u0027Grade mid-terms\u0027 into the list with his respective details into the application (Figure 33)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".Task at index 1 priority changed to 1. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image::FirstEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `editTask 2 by/23-04-2018` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "This will add a task, \u0027Submit tutorial attendance\u0027 into the calendar and to-do list with the respective details into the application (Figure 34)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Task at index 2 deadline changed to 23-04-2018. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a task: `deleteTask`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a task in the address book. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `dt` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteTask INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The specified indexed task will be deleted from the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The application initially starts with 2 tasks:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".Initial application view. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Command entered: `deleteTask 1` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "This will add a task, \u0027Grade mid-terms\u0027 into the list with his respective details into the application (Figure 36)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Task at index 1 removed. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tasks, To-do list and Calendar commands"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "*Add Task* `addTask desc/TASK DESCRIPTION by/DEADLINE priority/PRIORITY` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addTask title/Grade Exams desc/Grade mid-terms by/04-04-2018 priority/2`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "*Delete Task* `deleteTask INDEX` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleteTask 1`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*Edit Task* `editTask INDEX [title/TASK TITLE] [desc/TASK DESCRIPTION] [by/DEADLINE] [priority/PRIORITY]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `editTask 1 title/Eat Dinner`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer guide"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `Task` Class:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Stores the information of a specific task in the AddressBook"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Information includes: Task Description, Deadline, Priority."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Implements `UniqueTaskList` that enforces uniqueness of its elements and disallows nulls."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `Task Description`: Object that stores the task description of the `Task` Object."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Task\u0027s name can contain any alphanumeric characters, but should not be null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `Deadline`: Object that stores the deadline of the `Task` Object."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Deadline should not be dates of the past and should only be in the format dd-mm-yyyy."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* `Priority`: Object that stores the priority of the `Task` Object."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Priority should only be a value from 1 to 3, 1 being the lowest and 3 being the highest."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::matricuationNumber[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Matriculation number"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This feature allows the user to keep track of the matriculation number of a `Person`. The matriculation number in this case"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "has to start with an \"A\" or \"U\" followed by 7 digits and end with a capital letter. A new class, `Matriculation Number`, is created and is associated to the `Person` class."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "This is integrated into the `AddCommand` and `EditCommand` commands to update the participation marks of a `Person`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The user will input an AddCommand or EditCommand, with the additional parameter `m/MATRICULATION_NUMBER`, to the application to update the marks."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Should 2 people be allowed to have to same matriculation number"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** No, no 2 people can have the same matriculation number, DuplicateUserException will be thrown when trying to add a person with a matriculation number already inside Your TA."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It makes sense as no 2 students would have the same matriculation number, it alerts the user when they\u0027ve most likely typed in the wrong matriculation number."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The user will not be able to add 2 different instances of the same student."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Duplicate matriculation numbers are allowed"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: User have more freedom to add anyone."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Duplicate matriculation numbers will cause messiness when dealing with many students."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Link matriculation number to the students IVLE account info."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// end::matriculationNumber[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tasks on calendar view"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** This feature allows the user to see the calendar on the UI and see the scheduled `Task` deadlines on the calendar."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "The user will enter a command `addTask title/TITLE desc/DESCRIPTION by/DEADLINE priority/PRIORITY` to the application. The application will then rely on `AddressBookparser` and"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "parse the argument. The argument will be passed into the AddTaskCommand to be executed. From there, it will create a new `Task` object that will be"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "added to the `calendarList` of the `UniqueTaskList` which in turn will be displayed on the date of the deadline, on the calendar."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to link specific tasks to the correct calendar nodes"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a 7 by 32, 2D `Array` to store the tasks to be added into the calendar."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Separate from the Task list (less prone to bugs). Faster run time (does not need to iterate through all tasks)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Higher memory usage constraint, can only schedule tasks up to 6 months in advance to prevent high memory usage that will affect the speed and performance of the app."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use the task list itself to be displayed in the calendar."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easier to program and less memory usage (only 1 task list is used without another 2D array for the calendar), tasks can be scheduled as far ahead as desired."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Needs to iterate through the entire task list for every calendar node when loading the calendar view (slows performance when dealing with tasks)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Viewing the calendar only by month"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a monthly only calendar view."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy view of the current tasks that are due on that month."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Not much choice for the user as only the monthly view is provided."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Give the user a choice to switch between weekly, monthly or yearly, e.g. _calendarfx_."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: User has more choice and freedom to control their UI."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Difficult to implement, also if 3rd party programs such at _calendarfx_ is used, certain features in those programs are redundant (e.g. map) and would only slow the app down."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Future enhancements (Coming in v2.0)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alaru"
        },
        "content": "** Link specific key-press or select actions to the todo list such that a click on either side will display the selected task on the other."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//end::calendar[]"
      }
    ],
    "authorContributionMap": {
      "Alaru": 14,
      "-": 251
    }
  },
  {
    "path": "docs/team/WoodySIN.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Wu Di - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Your TA"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Your TA is a desktop application designed to meet the needs of university tutors. It helps them to keep track of their students and schedule their tasks that they have to do."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA uses a graphical user interface built using JavaFX and the user interacts with the application mostly through a command line interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA is written in Java and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "Your TA is build upon https://github.com/se-edu/addressbook-level4[AddressBook - Level 4]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Added Todo List that displays tasks in a list view in the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: It allows users to schedule tasks that they need to do and enables a glance view of tasks what they need to do in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature provides the tutor a quick view on how many tasks they have in hand. This way, the tutors would be better assisted with their time management and organization."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "*** Additionally, it can also assist the teaching of tutors to arrange help with the more needy students."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement well supports the implemented undo and redo feature."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "The existing commands are also updated to support the adding, deleting and editing tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a import command that enhances the mobility of users\u0027 data. Thus, with the data along it can be used anywhere with the application downloaded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/functional/Wu.md[Functional code]][https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/test/Wu.md[Test code]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.2` and `v1.5rc`(2 releases) on GitHub"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Manage and set up the organization repo, assigned issues and manage Pull Requests."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Set up Coverall for the organization repo."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** improved test coverage: https://github.com/CS2103JAN2018-F09-B1/main/pull/118[#118] https://github.com/CS2103JAN2018-F09-B1/main/pull/109[#109]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the screenshots used in the User Guide: https://github.com/CS2103JAN2018-F09-B1/main/pull/124[1]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the images and added the Task List section in the Developer Guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T15-B4/main/issues/125[1])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplayTask]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dswitchTab]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtask]"
      }
    ],
    "authorContributionMap": {
      "Alaru": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/pearlissa.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d Pearlissa Taim Qi Yah - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F09-B1/main"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Project: Your TA"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Your TA is a desktop contact, calendar and task manager application that caters to tech-savvy university Teaching Assistants (TAs) and/or Professors/Lecturers. +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It allows the user to manage their deadlines, as well as keep track of their students. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The user is mostly required to interact with the application through a Command Line Interface (CLI), along with minimal Graphical User Interface (GUI) features created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Major feature*: Implemented a *login* system"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** What it does: Requires users to log in to their accounts (and create accounts for first-time users) with a username and password to access their personal data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Justification: This feature makes the software much more accessible to multiple users as it ensures that each user only has access to their own personal information, and not those of other users."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Highlights: This feature precedes all the other functionalities upon starting up the application. It is the first attempt at improving data security of the software. It required an in-depth analysis of the `Model` and `Storage` components. The implementation too was challenging as it called for the creation of new model classes and storage classes from scratch."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Credits: The code was adapted from the study of the `Model` and `Storage` components, together with all their classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Minor feature*: Added *sort* which sorts the contacts alphanumerically by their name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Minor feature*: Added a new *theme* for the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Minor feature*: Added *default tag colours* for \"Lecturer\", \"TA\", \"student\" and \"T1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Code contributed*: https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/functional/Pearlissa.md[functional], https://github.com/CS2103JAN2018-F09-B1/main/blob/master/collated/test/Pearlissa.md[test]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*** Checked and improved consistency of User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*** Updated screenshots used in the User Guide: (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/136[#136])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*** Created images for Developer\u0027s Guide: (PR https://github.com/CS2103JAN2018-F09-B1/main/pull/104[#104])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*** Reported bugs in another group\u0027s application (Examples: https://github.com/CS2103JAN2018-T11-B4/main/issues/135[1], https://github.com/CS2103JAN2018-T11-B4/main/issues/130[2], https://github.com/CS2103JAN2018-T11-B4/main/issues/128[3], https://github.com/CS2103JAN2018-T11-B4/main/issues/116[4], https://github.com/CS2103JAN2018-T11-B4/main/issues/123[5])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*****"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*Your TA* is for university Teaching Assistants (TAs) who prefer using a desktop application to manage student contacts and plan schedules. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Its features include a login system, tools to manage students\u0027 information, task schedulers linked to a calendar and many more! +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It is optimized for those who prefer to work with a *Command Line Interface* (CLI) while still having the benefits of a *Graphical User Interface* (GUI). +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This means if you prefer using the keyboard over the mouse and can type fast, it can get your contact management and scheduling done faster than traditional GUI applications. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "This user guide will take you through the features and commands available for use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Enter your `Username` and `Password` to log in. _Refer to \u003c\u003cFeatures\u003e\u003e for details of the feature._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you\u0027re a first-time user without an account, enter your desired `Username` and `Password` and an account will be created and you will be logged in automatically."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "After logging in, you should now see the main Application GUI appear. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The key parts of the GUI (as shown in Figure 2 below) are: +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Person List (displays all contacts)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Todo List (displays all outstanding tasks)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Calendar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Command Box (field where you input your commands)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".  Results Display Panel (field where results of commands appear)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Parts of the GUI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::UiParts.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003d\u003d\u003d Sorting all entries : `sort`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts all entries from the address book in alphabetical order based on name. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Alias: `s` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Login Feature"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Before you are able to access the application, login is required."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Enter your `Username` and `Password` in the respective fields. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Click on the `login` button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* If you have entered either of those incorrectly, the text \"Wrong username or password entered\" will be displayed. You have an unlimited number of tries to log in. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Upon successful login, the application will load with your previously saved data."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Both `Username` and `Password` fields are case-sensitive."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If you are a first-time user, create an account by entering your desired `Username` and `Password` in the username and password text fields respectively. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Then, click on the `Login` button."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Editing a task: `editTask`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Edits a task in the todo list. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Alias: `et` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `editTask` `INDEX` `[title/TASK TITLE] [desc/TASK DESCRIPTION]` `[by/DEADLINE]` `[priority/PRIORITY]`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Not all fields are required, you may only pick the fields that you want to edit."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The specified tasks will be edited in the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* The `INDEX` refers to the index number shown in the last task listing. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The index must be a *positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with 2 tasks (see Figure 33)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Initial Application View +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::SecondTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `editTask` `1` `priority/1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This edits the task at index 1, and change its priority to 1 (see Figure 34)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 1 Priority Changed to 1 +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::FirstEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `editTask` `2` `by/23-04-2018` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This edits the task at index 2, and change its deadline to 23-04-2018 (see Figure 35)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 2 Deadline Changed to 23-04-2018 +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Deleting a task: `deleteTask`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Deletes a task in the todo list. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Alias: `dt` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Format: `deleteTask` `INDEX`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The specified indexed task will be deleted from the *Todo List* and *Calendar*."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Current date: 15-04-2018 +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The application initially starts with 2 tasks as seen in Figure 36 below."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Initial Application View +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::SecondEditTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Command entered: `deleteTask` `1` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Result: This will delete the task at index 1, as shown in Figure 37 below."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".Task at Index 1 Removed +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::DeleteTask.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the data file of your previous *Your TA* folder."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*Q*: How do i keep my information safe? +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*A*: A login feature has already been implemented as of v1.5, which ensures that a user can only access their own accounts via authentication."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d Contributions to the Developer guide"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "*****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The `User` Class:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Stores the information of a specific user (TA/Lecturer/Professor) in the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Information includes: Username and Password."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Implements `UniqueUserList` that enforces uniqueness of its elements and disallows nulls."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* `Username`: Object that stores the username of the `User` Object and contains the regex requirements for a valid username."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "User\u0027s username should only contain alphanumeric characters, be between 3 and 15 characters long and should not be null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* `Password`: Object that stores the password of the `User` Object and contains the regex requirements for a valid password."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "User\u0027s password should only contain alphanumeric characters, be between 8 and 30 characters long and should not be null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* Can save the user data in xml format and read it back."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* can save list of `User` objects for login authentication."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d Login feature"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The login feature is initialized upon startup of the application, through `LoginStorage` and `LoginManager` and is facilitated by the `LoginUi`. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "It supports multiple accounts whereby one user cannot access the application content of another user by creating multiple `.xml` storage files. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "image::LoginDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "As seen from the diagram, upon opening the application, the user is prompted to enter their `Username` and `Password`. The `LoginManager` fetches the data of existing `User` objects, before putting them into a Hashmap\u003cUsername, User\u003e as shown below. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Username addUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Password addPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            User toAdd \u003d new User(addUsername, addPassword);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            userList.add(toAdd);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "`Username` and `Password` are case-sensitive."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "The credentials entered by the user are then checked against the HashMap to authenticate the account. Upon successful login, the user\u0027s file is retrieved from the `Storage` component and is loaded up with the application. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void authenticate(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Authenticating user: \" + username);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String filepath \u003d username + \".xml\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (userList.getUserList().get(username).getPassword().getPassword().equals(password)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                loginUser(filepath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            addUser(username, password);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                File file \u003d new File(\"data/login/\" + filepath);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginUser(filepath);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "----"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "If the user is a new (username does not exist), they should simply enter their desired `Username` and `Password` into the respective fields, and the account will be created with the default data of the application."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementing new `User`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: Using same login window, create new `User` if `Username` entered does not exist"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Use of only 1 window, no need to implement additional UI functionalities."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Not the most user-friendly or the most conventional way a login works."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Create a registration button, which brings the user to a registration UI for the creation of `User` object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: More user-friendly, able to implement a username field, along with a password field and, especially a field for password confirmation."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need to further add onto UI."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Managing existing users"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `User` is immutable"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Easier to keep track of `User`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Highly inflexible, not user-friendly."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: `User` to be mutable, can be edited or deleted"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Users can change their usernames/passwords if they feel their credentials may be insecure."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need for rigorous salting/hashing if repeated usernames/passwords are allowed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `User` identification"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `Username` is case-sensitive"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: \"Johndoe\" and \"johndoe\" are different usernames and different accounts with the same name can be created."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: If a user makes a typo in the `Username` field, another account is created instead of correctly logging on to their account."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: `Username` to be made case-insensitive"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Users will not have to worry about whether they signed up with a different `Username`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Less usernames are available."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: `Username` and `Password` Representation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: `Username` and `Password` only allow alphanumeric characters"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Easy authentication, no need to worry about corner cases."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Less room for different usernames and passwords, not as secure."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Include special characters in `Username` and `Password` Regex"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: More secure, less prone to security issues."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Need for more rigorous testing to ensure no corner cases are left out."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Salting Passwords/Encryption of Files"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 1 (current choice)**: No encryption/salting implemented"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Ease of editing information by administrator."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Security issues, easy to find data path and retrieve files."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "* **Alternative 2**: Encrypt files and salt passwords before encryption"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Pros: Increases security of software, less prone to be used for malicious purposes."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "** Cons: Large amount of coding and implementation required, prerequisites also include knowledge of security issues and safeguards."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |new user |get error messages/prompts |better adapt to commands to use them properly"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |add a new person |better manage all my contacts at one go"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |find a person by matriculation number/email |identify people easily"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |sort contacts based on name/address/email/tags |work with specific groups of people"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |assign a to-do list to each person in address book |know what I need to do for them"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |add individual items to the to-do lists |update additional tasks"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |remove entire to-do lists or items in it |remove completed tasks"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |add events to the schedule |better manage work/students"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |add a deadline to tasks/items |know what needs to be done and by when"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* * *` |user |prioritize tasks/items |efficiently get tasks/items done on time"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* *` |user |import students/people from a text file |it is easier to enter large numbers of people"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* *` |user |add profile pictures |know who the people I am working with are"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* *` |user |mass email students/people based on a tag |easily email/inform a class of students of announcements"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`* *` |user |set reminders for certain events |have an email sent to me before the actual event so that I don\u0027t forget"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|`*` |user with many persons in the address book |combine groups/tags |better work with people who have similar interests/work"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "Pearlissa": 340,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.util.SampleLoginDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.storage.LoginStorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.storage.XmlLoginStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.ui.LoginUiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 5, 0, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static boolean isTest \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String LOGIN_FILEPATH \u003d \"data/login.xml\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    protected Ui loginUi;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    protected LoginStorageManager loginStorage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    protected LoginManager login;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        runInitSequence();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * runs the initialising sequence."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void runInitSequence() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlLoginStorage xmlLoginStorage \u003d new XmlLoginStorage(LOGIN_FILEPATH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginStorage \u003d new LoginStorageManager(xmlLoginStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login \u003d initLoginManager(loginStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login.setUserPrefsStorage(userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login.setConfig(config);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginUi \u003d new LoginUiManager(login);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * runs the test initialising sequence."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void runTestInitSequence() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager initLoginManager(LoginStorageManager storage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Optional\u003cLoginManager\u003e loginManagerOptional;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager initialData;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginManagerOptional \u003d storage.readLogin();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (!loginManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d loginManagerOptional.orElseGet(SampleLoginDataUtil::getSampleLoginManager);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d new LoginManager();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d new LoginManager();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login.setPrimaryStage(primaryStage);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginUi.start(primaryStage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.ui \u003d login.getUi();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (ui !\u003d null) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.stop();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginStorage.saveLogin(login);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            this.storage \u003d login.getStorage();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            this.userPrefs \u003d login.getUserPrefs();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (storage !\u003d null \u0026\u0026 userPrefs !\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 2,
      "Pearlissa": 70,
      "-": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String appTitle \u003d \"Your TA\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_MAIL_APP_ERROR \u003d \"Error opening the default mail app on this system\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_UNSUPPORTED_DESKTOP \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The client does not support desktop operations on this system\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TaskBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TaskBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "WoodySIN": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TodoPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.TodoCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Represents a selection change in the TodoList Panel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TodoPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final TodoCard newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoPanelSelectionChangedEvent(TodoCard newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCard getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this.newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "WoodySIN": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DeleteUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * A class for deleting unwanted storage files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DeleteUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteUtil.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Goes through the list of files to be deleted and only deletes those that are not in use"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param itemsToDelete List of items (files) to delete"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param persons List of Person objects in the addressbook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void clearImageFiles(List\u003cString\u003e itemsToDelete, ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (String item : itemsToDelete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            boolean notUsed \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            for (Person p : persons) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                if (p.getDisplayPic().toString().equals(item) || item.equals(DisplayPic.DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    notUsed \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (notUsed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                if (deleteFile(item)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    logger.info(\"Successfully deleted image at \" + item + \" from disk.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    logger.info(\"Unsuccessful in deleting image at \" + item + \" from disk.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Delete a file at the given filepath."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filepath where the file is located."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean deleteFile(String filepath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toDelete \u003d new File(filepath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return toDelete.delete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.BufferedOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(File file) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return file.exists() \u0026\u0026 file.isFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(File file) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if file is created, false if file already exists"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean createFile(File file) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the given directory along with its parent directories"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dir the directory to be created; assumed not null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the directory or a parent directory cannot be created"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createDirs(File dir) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"Failed to make directories of \" + dir.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(File file) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        File parentDir \u003d file.getParentFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            createDirs(parentDir);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(File file) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file.toPath()), CHARSET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(File file, String content) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file.toPath(), content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a string to a platform-specific file path"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPath(String pathWithForwardSlash) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(pathWithForwardSlash.contains(\"/\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return pathWithForwardSlash.replace(\"/\", File.separator);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String getFileType(String filePath) throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        int lastDot \u003d trimmedFilePath.lastIndexOf(\u0027.\u0027);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (lastDot \u003d\u003d -1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(\"THE FILE MUST HAVE A FILE EXTENSION.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return trimmedFilePath.substring(lastDot + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Copies a file over. The new file will be binary equivalent to the original."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void copyFile(String origFile, File outputFile) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        byte[] buffer \u003d new byte[4096];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        createIfMissing(outputFile);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        BufferedInputStream bis \u003d new BufferedInputStream(new FileInputStream(origFile));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        BufferedOutputStream bos \u003d new BufferedOutputStream(new FileOutputStream(outputFile));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        int fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        while (fileBytes !\u003d -1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bos.write(buffer, 0, fileBytes);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            fileBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bis.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bos.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Copies an image from the filepath provided to the specified destination"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void copyImage(String image, File toSave) throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            copyFile(image, toSave);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(\"IMAGE FILE COULD NOT BE COPIED.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 50,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HashUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * This class supports the naming of files to be stored."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * toHex() code referenced from:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * https://stackoverflow.com/questions/36162622/how-do-i-generate-a-hash-code-with-hash-sha256-in-java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class HashUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * This method uses SHA-256 to hash the 2 input strings and returns it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String generateUniqueName(String details) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            byte[] hashValue \u003d digest.digest(details.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return toHex(hashValue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchAlgorithmException nae) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Turns a byte array into a string hex code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * toHex() code referenced from:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * https://stackoverflow.com/questions/36162622/how-do-i-generate-a-hash-code-with-hash-sha256-in-java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param hashValue is a byte array"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return A hex encode of a byte array"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru-reused"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static String toHex(byte[] hashValue) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (byte b : hashValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            sb.append(Integer.toString((b \u0026 0xff) + 0x100, 16).substring(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.DeleteUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, String username) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        clearRedundantImages();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        clearRedundantImages();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Clears the data folder of redundant images"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void clearRedundantImages() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        logger.info(\"Deleting any unused display pictures\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DeleteUtil.clearImageFiles(model.getItemList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        model.clearDeleteItems();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            undoRedoStack.push(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarTaskLists() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return model.getCalendarTaskLists();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setTabPane(TabPane tabPane) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        addressBookParser.setTabPane(tabPane);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 10,
      "JoonKai1995": 11,
      "-": 72,
      "WoodySIN": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_SIGN \u003d \"+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"MATRIC_NUMBER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DISPLAY_PIC + \"[IMAGE TO DISPLAY PICTURE] \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"A1234567J \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_DISPLAY_PIC + \"C:\\\\Users\\\\Hello\\\\Desktop\\\\picture.jpg \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_IMAGE_ERROR \u003d \"Cannot open image file\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String uniqueImageName \u003d toAdd.getDisplayPic().getSaveDisplay(toAdd.getDetails());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            //Only save the display picture here"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            toAdd.getDisplayPic().saveDisplay(uniqueImageName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            toAdd.getDisplayPic().updateToDefault();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new CommandException(MESSAGE_IMAGE_ERROR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 10,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Adds a task to the To-do list and calendar."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class AddTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"at\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the todo list and calendar. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_TASK_DESC + \"TASK \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY LEVEL\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_TITLE + \"Dance \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_TASK_DESC + \"Dance till I drop \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_DEADLINE + \"20-03-2018 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            + PREFIX_PRIORITY + \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 48,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Deletes a task identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class DeleteTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_SIGN \u003d \"-t\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \": Deletes the task identified by the index number used in the last task listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Task taskToDelete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(taskToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (TaskNotFoundException tnfe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"The target task cannot be missing\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteTaskCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 Objects.equals(this.taskToDelete, ((DeleteTaskCommand) other).taskToDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "WoodySIN": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.storage.DisplayPicStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NUMBER + \"MATRICULATION NUMBER] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"[\" + PREFIX_DISPLAY_PIC + \"IMAGE PATH] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        MatriculationNumber updatedMatricNumber \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.getMatricNumber().orElse(personToEdit.getMatricNumber());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic updatedDisplay \u003d editPersonDescriptor.getDisplayPic().orElse(personToEdit.getDisplayPic());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updatedDisplay \u003d DisplayPicStorage.toSaveDisplay(updatedDisplay, personToEdit.getDisplayPic(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updatedName.toString() + updatedPhone.toString() + updatedEmail.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Participation updatedPart \u003d editPersonDescriptor.getParticipation().orElse(personToEdit.getParticipation());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(updatedName, updatedMatricNumber, updatedPhone, updatedEmail, updatedAddress, updatedDisplay,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updatedPart, updatedTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private MatriculationNumber matricNumber;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        private DisplayPic displayPic;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        private Participation participation;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setMatricNumber(toCopy.matricNumber);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            setDisplayPic(toCopy.displayPic);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            setParticipation(toCopy.participation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.matricNumber, this.phone, this.email,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                this.address, this.displayPic, this.tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setMatricNumber(MatriculationNumber matricNumber) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cMatriculationNumber\u003e getMatricNumber() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(matricNumber);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public void setDisplayPic(DisplayPic displayPic) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            this.displayPic \u003d displayPic;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public Optional\u003cDisplayPic\u003e getDisplayPic() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.ofNullable(displayPic);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public void setParticipation(Participation participation) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            this.participation \u003d participation;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public Optional\u003cParticipation\u003e getParticipation() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.ofNullable(participation);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getMatricNumber().equals(e.getMatricNumber())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    \u0026\u0026 getDisplayPic().equals(e.getDisplayPic())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    \u0026\u0026 getParticipation().equals(e.getParticipation())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 34,
      "-": 252
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class EditTaskCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTask\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"et\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Note: Deadline cannot be modified by editTask command.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"[\" + PREFIX_TASK_DESC + \"TASK DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"TASK DEADLINE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + PREFIX_TITLE + \"notes \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + PREFIX_TASK_DESC + \"Send lab notes to students.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + PREFIX_DEADLINE + \"05-05-2018\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + PREFIX_PRIORITY + \"50. \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided except deadline.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Task taskToEdit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Task editedTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (TaskNotFoundException tnfe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"The target task cannot be missing\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        TaskDescription updatedDesc \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getTaskDesc());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new Task(updatedTitle, updatedDesc, updatedDeadline, updatedPriority);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 Objects.equals(taskToEdit, e.taskToEdit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        private TaskDescription desc;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            setDescription(toCopy.desc);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.title, this.desc, this.deadline, this.priority);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void setDescription(TaskDescription desc) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public Optional\u003cTaskDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "WoodySIN": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Keyword matching is not case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"the specified keywords (not case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InfoContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(InfoContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_SIGN \u003d \"?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Imports data from a xml file and overwrites the current data stored"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports data from an external xml data file with \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"the provided path and overwrites the current data stored.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Parameters: FILE_PATH\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ~/DOWNLOADS/NewDataSet.xml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Data imported successfully\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"File not found\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE \u003d \"Data configuration failed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public ImportCommand(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.filePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ReadOnlyAddressBook newDataSet \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            model.resetData(newDataSet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "WoodySIN": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCurrentTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CURRENT_TASKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Lists all tasks due by the current month stored in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ListCurrentTaskCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listCurrentTask\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lct\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks due this month\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_CURRENT_TASKS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "WoodySIN": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Lists all tasks stored in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTask\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"lt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "WoodySIN": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Updates a student\u0027s participation mark in Your TA."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markPart\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the participation for a student \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_MARK_PARTICIPATION + \"[MARKS]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MARK_PARTICIPATION + \"50\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Participation marked for %1$s!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER_VALUE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The marks/ field cannot be empty and it must be an integer from 0 to 100 inclusive\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Integer marks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person personToMark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person updatedPerson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates an MarkCommand to add the participation marks of {@code marks}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public MarkCommand(Index index, Integer marks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            model.updatePerson(personToMark, updatedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"There cannot be a duplicate when adding participation\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToMark.getName().toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        personToMark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updatedPerson \u003d createUpdatedPerson(personToMark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToMark}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * edited with the new marks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person createUpdatedPerson(Person personToMark) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assert personToMark !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Integer newMarks \u003d marks + personToMark.getParticipation().getMarks();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        newMarks \u003d (newMarks \u003e 100) ? 100 : newMarks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Participation updatedPart \u003d new Participation(newMarks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(personToMark.getName(), personToMark.getMatricNumber(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToMark.getPhone(), personToMark.getEmail(), personToMark.getAddress(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToMark.getDisplayPic(), updatedPart, personToMark.getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof MarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MarkCommand) other).targetIndex)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 marks.equals(((MarkCommand) other).marks));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 93,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List is sorted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        model.sortPersons();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Lists all tasks stored in the address book in date order."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortTask\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"stt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Todo List is sorted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.sortTasks();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "WoodySIN": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Switches between the tabs of Person List and TodoList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switchTab\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"swt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches between tabs of Person List and Todo List. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tab switched.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final int PERSON_TAB \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final int TASK_TAB \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public SwitchTabCommand(TabPane tabPane) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        int selectedTab \u003d selectionModel.getSelectedIndex();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        selectionModel.select(selectAnotherTab(selectedTab));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Alternates the tab index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param currentTab index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @return alternated tab index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private int selectAnotherTab(int currentTab) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (currentTab \u003d\u003d PERSON_TAB) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return TASK_TAB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return PERSON_TAB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "WoodySIN": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateDisplayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.storage.DisplayPicStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Updates a student\u0027s display picture in Your TA."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateDP\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the display picture for a student \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_DISPLAY_PIC + \"[PATH TO IMAGE]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DISPLAY_PIC + \"C:\\\\Users\\\\Name\\\\Desktop\\\\John.png\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display Picture successfully updated for %1$s!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //private final EditCommand.EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final DisplayPic dp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person personToUpdate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person updatedPerson;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates an MarkCommand to add the participation marks of {@code marks}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UpdateDisplayCommand(Index index, DisplayPic dp) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(dp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.dp \u003d dp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            model.updatePerson(personToUpdate, updatedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"There cannot be a duplicate when just updating the display pic\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToUpdate.getName().toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        personToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updatedPerson \u003d createUpdatedPerson(personToUpdate, dp);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToUpdate}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * edited with the new Display Pic."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Person createUpdatedPerson(Person personToUpdate, DisplayPic dp)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assert personToUpdate !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Name updatedName \u003d personToUpdate.getName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MatriculationNumber updatedMatricNumber \u003d personToUpdate.getMatricNumber();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Phone updatedPhone \u003d personToUpdate.getPhone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Email updatedEmail \u003d personToUpdate.getEmail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Address updatedAddress \u003d personToUpdate.getAddress();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic updatedDisplay \u003d DisplayPicStorage.toSaveDisplay(dp,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToUpdate.getDisplayPic(), personToUpdate.getDetails());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Participation updatedPart \u003d personToUpdate.getParticipation();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToUpdate.getTags();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(updatedName, updatedMatricNumber, updatedPhone, updatedEmail, updatedAddress, updatedDisplay,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updatedPart, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof UpdateDisplayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UpdateDisplayCommand) other).targetIndex)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 dp.equals(((UpdateDisplayCommand) other).dp));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 110,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    PREFIX_MATRIC_NUMBER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_DISPLAY_PIC, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_MATRIC_NUMBER, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            MatriculationNumber matricNumber \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            DisplayPic displayPic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                displayPic \u003d ParserUtil.parseDisplayPic(argMultimap.getValue(PREFIX_DISPLAY_PIC)).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                displayPic \u003d new DisplayPic();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Person person \u003d new Person(name, matricNumber, phone, email, address, displayPic, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TASK_DESC,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                        PREFIX_DEADLINE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_TASK_DESC,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                PREFIX_DEADLINE, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            Title title \u003d ParserUtil.parseTaskTitle(argMultimap.getValue(PREFIX_TITLE)).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            TaskDescription taskDescription \u003d ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESC)).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            Deadline deadline \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            Task task \u003d new Task(title, taskDescription, deadline, priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 48,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCurrentTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListTaskCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.UpdateDisplayCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int PERSON_TAB \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_SIGN:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteTaskCommand.COMMAND_SIGN:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_SIGN:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        //@@author Pearlissa"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            selectPersonTab(tabPane);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_SIGN:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        case UpdateDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new UpdateDisplayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        case SwitchTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case SwitchTabCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SwitchTabCommand(tabPane);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCurrentTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCurrentTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCurrentTaskCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        //@@author Pearlissa"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case SortTaskCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return new SortTaskCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setTabPane(TabPane tabPane) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Selects Person List tab before executing list command"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param tabPane"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void selectPersonTab(TabPane tabPane) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (tabPane !\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            selectionModel.select(PERSON_TAB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 4,
      "Pearlissa": 14,
      "-": 148,
      "WoodySIN": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MATRIC_NUMBER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final Prefix PREFIX_DISPLAY_PIC \u003d new Prefix(\"dp/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TASK_DESC \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"priority/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MARK_PARTICIPATION \u003d new Prefix(\"marks/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "WoodySIN": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_PHONE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_DISPLAY_PIC, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .ifPresent(editPersonDescriptor::setMatricNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            ParserUtil.parseEditDisplayPic(argMultimap.getValue(PREFIX_DISPLAY_PIC))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setDisplayPic);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 4,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String PLACE_HOLDER_HASH \u003d \"EDITED_DISPLAY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TASK_DESC, PREFIX_DEADLINE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ParserUtil.parseTaskTitle(argMultimap.getValue(PREFIX_TITLE)).ifPresent(editTaskDescriptor::setTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ParserUtil.parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESC))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    .ifPresent(editTaskDescriptor::setDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).ifPresent(editTaskDescriptor::setDeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).ifPresent(editTaskDescriptor::setPriority);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "WoodySIN": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Parses input arguments and creates a new ImportCommandParser object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * and returns an Import Command object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public ImportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (trimmedInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new ParseException(exceptionMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new ImportCommand(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "WoodySIN": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK_PARTICIPATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Parses input arguments and creates a new MarkCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an MarkCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MARK_PARTICIPATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Integer marks \u003d ParserUtil.parseMarks(argMultimap.getValue(PREFIX_MARK_PARTICIPATION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            checkArgument(Participation.isValidParticipation(Integer.toString(marks)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    Participation.MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new MarkCommand(index, marks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalArgumentException | IllegalValueException ie) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alaru": 46,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.storage.DisplayPicStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Parses a {@code String matricNumber} into a {@code MatriculationNumber}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @throws IllegalValueException if the given {@code matricNumber} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static MatriculationNumber parseMatricNumber(String matricNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String trimmedMatricNumber \u003d matricNumber.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!MatriculationNumber.isValidMatricNumber(trimmedMatricNumber)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(MatriculationNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return new MatriculationNumber(trimmedMatricNumber);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e matricNumber} into an {@code Optional\u003cMatriculationNumber\u003e}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * if {@code matricNumber} is present."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static Optional\u003cMatriculationNumber\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        parseMatricNumber(Optional\u003cString\u003e matricNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return matricNumber.isPresent() ? Optional.of(parseMatricNumber(matricNumber.get())) : Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code String displayPic} into an {@code DisplayPic}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException if the given {@code displayPic} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static DisplayPic parseDisplayPic(String displayPic)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (displayPic.equals(\"\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new DisplayPic();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String trimmedDisplayPath \u003d displayPic.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidPath(trimmedDisplayPath)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                throw new IllegalValueException(DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidImage(trimmedDisplayPath)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                throw new IllegalValueException(DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new DisplayPic(displayPic);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e displayPic} into an {@code Optional\u003cDisplayPic\u003e}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * if {@code displayPic} is present."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cDisplayPic\u003e parseDisplayPic(Optional\u003cString\u003e displayPic) throws IllegalValueException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (displayPic.isPresent()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.of(parseDisplayPic(displayPic.get()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e displayPic} into an {@code Optional\u003cDisplayPic\u003e}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * if {@code displayPic} is present."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cDisplayPic\u003e parseEditDisplayPic(Optional\u003cString\u003e displayPic) throws IllegalValueException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(displayPic);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return displayPic.isPresent() ? Optional.of(parseDisplayPic(displayPic.get())) : Optional.empty();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses {@code String marks} into a {@code Integer marks}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Integer parseMarks(String marks) throws IllegalValueException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Integer.parseInt(marks);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e marks} into an {@code Optional\u003cInteger\u003e} if {@code marks} is present."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param marks are the marks to add"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Optional\u003cInteger\u003e parseMarks(Optional\u003cString\u003e marks) throws IllegalValueException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return marks.isPresent() ? Optional.of(parseMarks(marks.get())) : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Parses a {@code String taskTitle} into a {@code TaskTitle}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws IllegalValueException if the given {@code taskDescription} is invalid."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static Title parseTaskTitle(String taskTitle) throws IllegalValueException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(taskTitle);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String trimmedTaskTitle \u003d taskTitle.trim();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!Title.isValidTitle(trimmedTaskTitle)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new Title(trimmedTaskTitle);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e taskDescription} into an {@code Optional\u003cTaskDescription\u003e}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * if {@code TaskDscription} is present."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static Optional\u003cTitle\u003e parseTaskTitle(Optional\u003cString\u003e title) throws IllegalValueException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return title.isPresent() ? Optional.of(parseTaskTitle(title.get())) : Optional.empty();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String taskDescription} into a {@code TaskDescription}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code taskDescription} is invalid."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TaskDescription parseTaskDescription(String taskDescription) throws IllegalValueException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(taskDescription);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTaskDescription \u003d taskDescription.trim();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskDescription.isValidDescription(trimmedTaskDescription)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(TaskDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TaskDescription(trimmedTaskDescription);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e taskDescription} into an {@code Optional\u003cTaskDescription\u003e}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code TaskDscription} is present."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cTaskDescription\u003e parseTaskDescription(Optional\u003cString\u003e task) throws IllegalValueException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        return task.isPresent() ? Optional.of(parseTaskDescription(task.get())) : Optional.empty();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String Deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws IllegalValueException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e deadline} into an {@code Optional\u003cDeadline\u003e} if {@code Deadline} is present."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cDeadline\u003e parseDeadline(Optional\u003cString\u003e deadline) throws IllegalValueException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        return deadline.isPresent() ? Optional.of(parseDeadline(deadline.get())) : Optional.empty();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Priority parsePriority(String priority) throws IllegalValueException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e priority} into an {@code Optional\u003cPriority\u003e} if {@code priority} is present."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        return priority.isPresent() ? Optional.of(parsePriority(priority.get())) : Optional.empty();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 68,
      "JoonKai1995": 27,
      "-": 246,
      "WoodySIN": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateDisplayCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.UpdateDisplayCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Parses input arguments and creates a new UpdateDisplayCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandParser implements Parser\u003cUpdateDisplayCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an MarkCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UpdateDisplayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DISPLAY_PIC);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            DisplayPic dp \u003d ParserUtil.parseEditDisplayPic(argMultimap.getValue(PREFIX_DISPLAY_PIC)).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new UpdateDisplayCommand(index, dp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alaru": 46,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueItemList itemList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        itemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setItemList(List\u003cString\u003e itemList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemList.setItemList(itemList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void updateItemList(ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.itemList.updateItemList(persons);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            updateItemList(this.persons.asObservableList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            setItemList(newData.getItemList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Adds an item to be scheduled to be deleted to the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void addDeleteItem(String filepath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        itemList.add(filepath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Removes all items to be scheduled to be deleted to the address book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void clearItems() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        itemList.clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getName(), person.getMatricNumber(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getDisplayPic(), person.getParticipation(), correctTagReferences);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ////tag-level operation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws TaskNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean removeTask(Task key) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (tasks.remove(key)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ObservableList\u003cPerson\u003e getSortedList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        persons.sortList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTaskList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.sortList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.asObservableList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks.asCalendarList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return itemList.getItemList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 28,
      "Pearlissa": 5,
      "-": 244,
      "WoodySIN": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Login.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.UserNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The API of the Login component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public interface Login {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /** Adds the given user. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void addUser(String username, String password) throws DuplicateUserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Checks if user entered (username and password included) is valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws UserNotFoundException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void authenticate(String username, String password) throws UserNotFoundException, DuplicateUserException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Loads addressbook storage of the user and initializes addressbook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void loginUser(String filepath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoginManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.UniqueUserList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents the in-memory model of the login data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManager extends ComponentManager implements Login {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UniqueUserList userList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Initializes a LoginManager with the given username and password."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setUserPrefsStorage(UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setPrimaryStage(Stage primaryStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setConfig(Config config) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setUserPrefs(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds user into the userList hashmap."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Username addUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Password addPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            User toAdd \u003d new User(addUsername, addPassword);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            userList.add(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public synchronized void addUser(User user) throws DuplicateUserException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList.add(user);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void authenticate(String username, String password) throws DuplicateUserException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Authenticating user: \" + username);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String filepath \u003d username + \".xml\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.getUserList().containsKey(username)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (userList.getUserList().get(username).getPassword().getPassword().equals(password)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                loginUser(filepath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new DuplicateUserException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            addUser(username, password);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginUser(filepath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ObservableList\u003cUser\u003e getUserList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.asObservableList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void loginUser(String filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String properFilePath \u003d username + \"/\" + userPrefs.getAddressBookFilePath() + filePath;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(properFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logic \u003d new LogicManager(model, username);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new ModelManager(initialData, userPrefs, username);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof LoginManager // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.userList.equals(((LoginManager) other).userList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 158,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.DeadlineIsCurrentMonthPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_CURRENT_TASKS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        new DeadlineIsCurrentMonthPredicate(YearMonth.now().getMonthValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given task */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given task */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTask(Task target) throws TaskNotFoundException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Updates the given task */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateTask(Task target, Task editedTask) throws TaskNotFoundException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /** Clears the list of items to be deleted */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    void clearDeleteItems();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void sortPersons();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void sortTasks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /** returns the calendar task list array */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTask\u003e[][] getCalendarTaskLists();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /** Returns an unmodifiable view of the filtered items list */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    List\u003cString\u003e getItemList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 7,
      "Pearlissa": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredDeleteItems;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e[][] calendarTaskLists;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, String username) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        filteredDeleteItems \u003d new ArrayList\u003c\u003e(this.addressBook.getItemList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarTaskLists \u003d this.addressBook.getCalendarList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        filteredDeleteItems \u003d new ArrayList\u003c\u003e(this.addressBook.getItemList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarTaskLists \u003d this.addressBook.getCalendarList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.addDeleteItem(target.getDisplayPic().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.addDeleteItem(person.getDisplayPic().toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void deleteTask(Task target) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        addressBook.removeTask(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public synchronized void addTask(Task task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public synchronized void clearDeleteItems() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.clearItems();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.addDeleteItem(target.getDisplayPic().toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        addressBook.addDeleteItem(editedPerson.getDisplayPic().toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void updateTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        addressBook.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void sortTasks() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        addressBook.sortTaskList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void sortPersons() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        addressBook.sortList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarTaskLists() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return calendarTaskLists;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Collections.unmodifiableList(filteredDeleteItems);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 24,
      "Pearlissa": 5,
      "JoonKai1995": 26,
      "-": 144,
      "WoodySIN": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * A list of filepaths that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @see String#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UniqueItemList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final ArrayList\u003cString\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if the list contains an equivalent item/filepath as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Adds a filepath to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void add(String toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Removes the equivalent item/filepath from the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void remove(String toRemove) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void setItemList(List\u003cString\u003e replacement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (String item : replacement) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!this.internalList.contains(item)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                this.internalList.add(item);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Puts all the display picture paths into the UniqueItemList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param persons is a UniquePersonList which contains all the people in the application"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void updateItemList(ObservableList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            add(p.getDisplayPic().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.internalList.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        List\u003cString\u003e toReturn \u003d new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Collections.unmodifiableList(toReturn);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alaru": 84,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DisplayPic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.storage.DisplayPicStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Represents the filepath of a Person\u0027s displayPic in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_DISPLAY_PIC \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_IMAGE_LOCATION \u003d \"data/displayPic/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should lead to a file that exists.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NOT_IMAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should point to a valid image file.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_DISPLAY_PIC_NO_EXTENSION \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"The filepath should point to a file with an extension.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public final String originalFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public DisplayPic() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d originalFilePath \u003d DEFAULT_DISPLAY_PIC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an {@code DisplayPic}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath A valid string containing the path to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public DisplayPic(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.isValidPath(filePath), MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.hasValidExtension(filePath), MESSAGE_DISPLAY_PIC_NO_EXTENSION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(DisplayPicStorage.isValidImage(filePath), MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d originalFilePath \u003d filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates the duplicated image filename."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String getSaveDisplay(String personDetails) throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (value.equals(DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String fileType \u003d FileUtil.getFileType(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String uniqueFileName \u003d DisplayPicStorage.generateDisplayPicName(personDetails, value, fileType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d DEFAULT_IMAGE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return uniqueFileName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Saves the display picture to the specified storage location."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void saveDisplay(String uniqueName) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (value.equals(DEFAULT_DISPLAY_PIC)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String fileType \u003d FileUtil.getFileType(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPicStorage.saveDisplayPic(uniqueName, originalFilePath, fileType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        value \u003d DEFAULT_IMAGE_LOCATION + uniqueName + \u0027.\u0027 + fileType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void updateToDefault() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d DEFAULT_DISPLAY_PIC;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value.equals(DEFAULT_DISPLAY_PIC);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof DisplayPic // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.value.equals(((DisplayPic) other).value)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 90,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatriculationNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Represents a Person\u0027s matriculation number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class MatriculationNumber {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_MATRIC_NUMBER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \"The first character of the matriculation number should be either an \u0027A\u0027 or \u0027U\u0027,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                + \" followed by 7 digits and end with a capital letter.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_FIRST \u003d \"[AU]{1}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_SECOND \u003d \"\\\\d{7}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MATRIC_NUMBER_VALIDATION_REGEX_LAST \u003d \"[A-Z]{1}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs a {@code MatriculationNumber}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param matricNumber A valid matriculation number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public MatriculationNumber(String matricNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.value \u003d matricNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if a given string is a valid person matriculation number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static boolean isValidMatricNumber(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (test.length() !\u003d 9) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String firstCharacter \u003d test.substring(0, 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String nextCharacters \u003d test.substring(1, test.length() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String lastCharacter \u003d test.substring(test.length() - 1, test.length());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return firstCharacter.matches(MATRIC_NUMBER_VALIDATION_REGEX_FIRST)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 nextCharacters.matches(MATRIC_NUMBER_VALIDATION_REGEX_SECOND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 lastCharacter.matches(MATRIC_NUMBER_VALIDATION_REGEX_LAST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof MatriculationNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.value.equals(((MatriculationNumber) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 60,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Participation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.exceptions.IllegalMarksException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Represents a Person\u0027s tutorial participation in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_PARTICIPATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"Participation marks must be between 0 to 100 inclusive!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String UI_DISPLAY_HEADER \u003d \"Participation marks: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public final Integer threshold;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Integer value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs a {@code Participation}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation(String value) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(isValidParticipation(value), MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation(Integer value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        checkArgument(isValidParticipation(Integer.toString(value)), MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        threshold \u003d 50;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Integer getMarks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean overThreshold() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return (value \u003e\u003d threshold);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Validates the participation mark"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param value"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return true if it is valid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidParticipation(String value) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return Integer.parseInt(value) \u003c\u003d 100 \u0026\u0026 Integer.parseInt(value) \u003e -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalMarksException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toDisplay() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return UI_DISPLAY_HEADER + Integer.toString(value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof Participation // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.value.equals(((Participation) other).value)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 85,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Person implements Comparable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MatriculationNumber matricNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final DisplayPic displayPic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Person(Name name, MatriculationNumber matricNum, Phone phone, Email email,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                  Address address, DisplayPic displayPic, Participation participation, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, matricNum, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.matricNumber \u003d matricNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.displayPic \u003d displayPic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Participation is not an essential field if one is creating a new Person object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Person(Name name, MatriculationNumber matricNum, Phone phone, Email email,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                  Address address, DisplayPic displayPic, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, matricNum, phone, email, address, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.matricNumber \u003d matricNum;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.displayPic \u003d displayPic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.participation \u003d new Participation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MatriculationNumber getMatricNumber() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public DisplayPic getDisplayPic() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return displayPic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public Participation getParticipation() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return participation;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return name.toString() + phone.toString() + email.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getMatricNumber().equals(this.getMatricNumber())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 otherPerson.getParticipation().equals(this.getParticipation());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Objects.hash(name, matricNumber, phone, email, address, displayPic, participation, tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Matriculation Number: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getMatricNumber())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .append(\" Participation marks: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .append(getParticipation())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int compareTo(Person otherPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.matricNumber.toString().compareTo(otherPerson.matricNumber.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 32,
      "Pearlissa": 5,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Person toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return personFoundAndDeleted;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniquePersonList replacement \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Person person : persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sorts the persons in the list lexicographically."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireAllNonNull(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 10,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/IllegalMarksException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Signals that the operation uses illegal mark values for Participation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class IllegalMarksException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public IllegalMarksException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        super(\"Mark values are not allowed\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 8,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Represents a Task\u0027s deadline in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \"Deadline should be a valid date that exists in the format dd-mm-yyyy. Tasks cannot be scheduled in the\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    + \" past. And can only be scheduled at most 6 months in advance. (Based on months: tasks cannot be\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    + \" scheduled on 1st August 2018 if the current date is 31st January 2018).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final String dateString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final int diff;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final int day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final int month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final int year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        dateString \u003d deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        LocalDate deadlineDate \u003d LocalDate.parse(deadline, formatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.value \u003d deadlineDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.diff \u003d calculateDifference(deadlineDate, now);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.day \u003d deadlineDate.getDayOfMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.month \u003d deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.year \u003d deadlineDate.getYear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            dateFormat.parse(test.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(test, formatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (deadlineDate.getYear() \u003c now.getYear()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (deadlineDate.getMonthValue() \u003c now.getMonthValue() \u0026\u0026 deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (deadlineDate.getMonthValue() \u003d\u003d now.getMonthValue()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    \u0026\u0026 deadlineDate.getYear() \u003d\u003d now.getYear() \u0026\u0026 deadlineDate.getDayOfMonth() \u003c now.getDayOfMonth()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (!isWithinSixMonths(deadlineDate, now)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * checks and see if the deadline is within 6 months of the current date."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static boolean isWithinSixMonths(LocalDate deadlineDate, LocalDate now) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        int difference;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            difference \u003d deadlineDate.getMonthValue() - now.getMonthValue();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else if (deadlineDate.getYear() - now.getYear() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            difference \u003d 12 - now.getMonthValue() + deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            difference \u003d 100;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return difference \u003c\u003d 6;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Calculates the value of the difference in months between the deadline and the current date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private int calculateDifference(LocalDate deadlineDate, LocalDate now) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        int diff;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (deadlineDate.getYear() \u003d\u003d now.getYear()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            diff \u003d deadlineDate.getMonthValue() - now.getMonthValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            diff \u003d 12 - now.getMonthValue() + deadlineDate.getMonthValue();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return diff;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 121,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DeadlineIsCurrentMonthPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Tests that a {@code Task}\u0027s month matches the value of month given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class DeadlineIsCurrentMonthPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public DeadlineIsCurrentMonthPredicate(int month) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return task.getDeadlineMonth() \u003d\u003d month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof DeadlineIsCurrentMonthPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.month \u003d\u003d ((DeadlineIsCurrentMonthPredicate) other).month); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 23,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Represents a Task\u0027s priority in the todo list and calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \"Priority value input can only be a value from 1 to 3. 1 being lowest priority and 3 being highest.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[1-3]{1}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final String priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param priorityValue A valid priority value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Priority(String priorityValue) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(priorityValue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        checkArgument(isValidPriority(priorityValue), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.priority \u003d priorityValue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.value \u003d Integer.parseInt(priorityValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if a given string is a valid task priority."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.priority.equals(((Priority) other).priority)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return priority.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 51,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final TaskDescription taskDesc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Task(Title title, TaskDescription taskDesc, Deadline deadline, Priority priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireAllNonNull(title, taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public TaskDescription getTaskDesc() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return taskDesc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int getDeadlineDay() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return deadline.day;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int getDeadlineYear() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return deadline.year;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int getDeadlineMonth() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return deadline.month;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!(other instanceof seedu.address.model.task.Task)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        seedu.address.model.task.Task otherTask \u003d (seedu.address.model.task.Task) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return  otherTask.getTitle().equals(this.getTitle())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 otherTask.getTaskDesc().equals(this.getTaskDesc())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(this.getDeadline())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(this.getPriority());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return Objects.hash(taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(\" Task TaskDescription: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(getTaskDesc())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(\" Calculated Priority: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public int compareTo(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        int yearDiff \u003d this.getDeadlineYear() - task.getDeadlineYear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        int monthDiff \u003d this.getDeadlineMonth() - task.getDeadlineMonth();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        int dayDiff \u003d this.getDeadlineDay() - task.getDeadlineDay();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return compareDate(yearDiff, monthDiff, dayDiff);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Compares the dates"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param yearDiff difference in year"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param monthDiff difference in month"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param dayDiff difference in day"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private int compareDate (int yearDiff, int monthDiff, int dayDiff) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (yearDiff !\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return yearDiff;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (monthDiff !\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return monthDiff;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return dayDiff;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 87,
      "-": 6,
      "WoodySIN": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Represents a short description of a todo task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class TaskDescription {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \"Task description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final String shortDesc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs an {@code TaskDescription}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param description A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public TaskDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assert description !\u003d null : MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (value.length() \u003c\u003d 20) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            shortDesc \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            shortDesc \u003d value.substring(0, 20) + \"...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof TaskDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.value.equals(((TaskDescription) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 60,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Represents a task\u0027s title in the TodoList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \"Task title should contain alphanumeric characters and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @param title A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.value \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns true if a given string is a valid task title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return test.matches(TITLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 this.value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "WoodySIN": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * @see Task#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final ObservableList\u003cTask\u003e[][] calendarList \u003d new ObservableList[7][32];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Date dateNow \u003d new Date();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private LocalDate now \u003d dateNow.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private int monthNow \u003d now.getMonthValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public UniqueTaskList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            for (int j \u003d 0; j \u003c 32; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                calendarList[i][j] \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        int diff \u003d toAdd.getDeadline().diff;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        calendarList[diff][toAdd.getDeadlineDay()].add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Collections.sort(calendarList[diff][toAdd.getDeadlineDay()]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws TaskNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setTask(Task target, Task editedTask)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        remove(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        add(editedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws TaskNotFoundException if no such task could be found in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean remove(Task toRemove) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 calendarList[toRemove.getDeadline().diff][toRemove.getDeadlineDay()].remove(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!taskFoundAndDeleted) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return taskFoundAndDeleted;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sorts the tasks in the list in date order"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        requireNonNull(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            for (int j \u003d 0; j \u003c 32; j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                calendarList[i][j].setAll(replacement.calendarList[i][j]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final UniqueTaskList replacement \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (final Task task : tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            replacement.add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        setTasks(replacement);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e asObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Returns the calendarList array for tasks"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] asCalendarList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return calendarList;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 116,
      "-": 2,
      "WoodySIN": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User\u0027s stored password in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d \"Password should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Password must only consist of alphanumeric characters.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Minimum length: 8 characters.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Maximum length: 30 characters.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Should not contain any of the special characters: ( \" + SPECIAL_CHARACTERS + \" ).\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String PASSWORD_REGEX \u003d \"[^\\\\W_]{8,30}$\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d PASSWORD_REGEX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public final String password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param password A valid password."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns if a given string is a valid password."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.password.equals(((Password) other).password)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 61,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UniqueUserList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A list of users that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * @see User#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UniqueUserList implements Iterable\u003cUser\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final HashMap\u003cString, User\u003e userList \u003d new HashMap\u003cString, User\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns true if the list contains a equivalent user as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.containsKey(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds a user to the hashmap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws DuplicateUserException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void add(User toAdd) throws DuplicateUserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (userList.containsKey(toAdd.getUsername().getUsername())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        userList.put(toAdd.getUsername().getUsername(), toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof UniqueUserList // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueUserList) other).internalList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ObservableList\u003cUser\u003e asObservableList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public HashMap\u003cString, User\u003e getUserList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return userList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Iterator\u003cUser\u003e iterator() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 66,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User registered in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class User implements Comparable\u003cUser\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User(Username username, Password password) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return password; }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        User otherUser \u003d (User) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return otherUser.getUsername().equals(this.getUsername())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 otherUser.getPassword().equals(this.getPassword());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return Objects.hash(username, password);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        builder.append(\"Username: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .append(getPassword());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int compareTo(User otherUser) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.username.toString().compareTo(otherUser.username.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 63,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Represents a User\u0027s stored username in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d \"Username should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Username must only consist of alphanumeric characters.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Minimum length: 3 characters.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Maximum length: 15 characters.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            + \"Should not contain any of the special characters: ( \" + SPECIAL_CHARACTERS + \" ).\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String USERNAME_REGEX \u003d \"[^\\\\W_]{3,15}$\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d USERNAME_REGEX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public final String username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param username A valid username."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns if a given string is a valid username."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this.username;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 this.username.equals(((Username) other).username)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return username.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 61,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/exceptions/DuplicateUserException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Signals that the operation will result in duplicate User objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class DuplicateUserException extends DuplicateDataException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public DuplicateUserException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super(\"Operation would result in duplicate users\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 12,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/exceptions/UserNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Signals that the operation is unable to find the specified user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UserNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String tutorialDeadline \u003d now.plusDays(5).format(formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String assignmentDeadline \u003d now.plusDays(6).format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String reviseDeadline \u003d now.plusDays(20).format(formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String biddingDeadline \u003d now.plusMonths(1).format(formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new MatriculationNumber(\"A1234567X\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"13\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"1\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new MatriculationNumber(\"A2234567Y\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"52\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"2\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new MatriculationNumber(\"A1234567X\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"77\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"exchange\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new MatriculationNumber(\"A3234567J\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"44\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"retaking\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new MatriculationNumber(\"A4234567K\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"30\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friend\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new MatriculationNumber(\"A5234567G\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new DisplayPic(), new Participation(\"78\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"brother\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Contains utility methods for populating {@code AddressBook} with sample data tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            new Task(new Title(\"Prepare Tut\"), new TaskDescription(\"Prepare tutorial contents for friday Tutorial\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                new Deadline(tutorialDeadline), new Priority(\"1\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            new Task(new Title(\"2106 assignment\"), new TaskDescription(\"Start doing CS2106 term assignment\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                new Deadline(assignmentDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            new Task(new Title(\"Sem report\"), new TaskDescription(\"Prepare for end of semester report\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                new Deadline(tutorialDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            new Task(new Title(\"Bidding\"), new TaskDescription(\"Prepare for bidding modules for the coming semester\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                new Deadline(biddingDeadline), new Priority(\"3\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            new Task(new Title(\"Revise 2010\"), new TaskDescription(\"Revise the contents for CS2010\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                new Deadline(reviseDeadline), new Priority(\"2\"))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 71,
      "WoodySIN": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleLoginDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Contains utility methods for populating {@code LoginManager} with sample data users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SampleLoginDataUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static LoginManager getSampleLoginManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager sampleLoginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return sampleLoginManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    String getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Saves the given (@link ReadOnlyAddressBook) to storage as a backup"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param addressBook cannot be null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IOException if there is any issue writing to the temporary file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/DisplayPicStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.util.HashUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": " *  A class to save and open image files from the user\u0027s hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPicStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String SAVE_LOCATION \u003d \"data/displayPic/\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INTERNAL_DEFAULT_PIC_SAVE_LOCATION \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DisplayPicStorage.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if a given string points to a valid file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidPath(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (MainApp.class.getResourceAsStream(test) \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            File file \u003d new File(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return FileUtil.isFileExists(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Checks if the image file provided can be opened properly as an image"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param test is a filepath to an image file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return if the filePath it is pointing to is am image file that can be opened"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean isValidImage(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            InputStream imageStream \u003d ImageIO.class.getResourceAsStream(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (imageStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return openImage(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            BufferedImage image \u003d ImageIO.read(imageStream);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return image !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return openImage(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Attempts to open a file to see if it is an image"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filepath is the path to a file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return whether the file located at the specified filepath is a valid image file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static boolean openImage(String filepath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            BufferedImage image \u003d ImageIO.read(new File(filepath));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return image !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns true if a given string points to a valid file that has an extension."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static boolean hasValidExtension(String test) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            FileUtil.getFileType(test);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Creates a unique and unused file name to store the image file as"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param name is the unique details of a person"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath the filepath of the image to read from"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param fileType the extension of the imagefile"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return a String that will be used as the filename and is unique"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException the filepath is an illegal value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static String generateDisplayPicName(String name, String filePath, String fileType)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String uniqueFileName \u003d HashUtil.generateUniqueName(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toSave \u003d new File(SAVE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        while (FileUtil.isFileExists(toSave)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            uniqueFileName \u003d HashUtil.generateUniqueName(uniqueFileName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            toSave \u003d new File(SAVE_LOCATION + uniqueFileName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return uniqueFileName;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Tries to save a copy of the image provided by the user into a default location."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param uniqueName the name of the new image file"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param filePath the location of the current image file"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param fileType the file extension of the current image file"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static void saveDisplayPic(String uniqueName, String filePath, String fileType)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        File toSave \u003d new File(SAVE_LOCATION + uniqueName + \u0027.\u0027 + fileType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        FileUtil.copyImage(filePath, toSave);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        logger.info(\"Successfully saved \" + uniqueName + \u0027.\u0027 + fileType + \" to disk.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Fetches an image from the hard drive to display"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @param dp is a DisplayPic object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return An image to display"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static Image fetchDisplay(DisplayPic dp) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (dp.toString().equals(INTERNAL_DEFAULT_PIC_SAVE_LOCATION)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return AppUtil.getImage(INTERNAL_DEFAULT_PIC_SAVE_LOCATION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String filePath \u003d dp.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            if (!DisplayPicStorage.isValidPath(filePath) || !DisplayPicStorage.isValidImage(filePath)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                logger.fine(\"Unable to open image at : \" + dp.toString()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                        + \", retrieving default display picture.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return AppUtil.getImage(INTERNAL_DEFAULT_PIC_SAVE_LOCATION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            File input \u003d new File(dp.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new Image(input.toURI().toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Checks whether the display picture filepath between 2 DisplayPic objects are the same."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * If they are not the same, the new display picture (in @code display1) will be updated and save."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static DisplayPic toSaveDisplay(DisplayPic display1, DisplayPic display2, String details) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!display1.equals(display2)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                String uniqueName \u003d display1.getSaveDisplay(details);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                display1.saveDisplay(uniqueName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return display1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                display1.updateToDefault();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                return display1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return display1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 158,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LoginStorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginStorageManager extends ComponentManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LoginStorageManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private XmlLoginStorage xmlLoginStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginStorageManager(XmlLoginStorage xmlLoginStorage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.xmlLoginStorage \u003d xmlLoginStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getLoginFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return \"login.xml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return readLogin(xmlLoginStorage.getLoginFilePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return xmlLoginStorage.readLogin(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveLogin(LoginManager login) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        saveAddressBook(login, xmlLoginStorage.getLoginFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param login"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveAddressBook(LoginManager login, String filePath) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        xmlLoginStorage.saveLogin(login, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 58,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 5,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * JAXB-friendly version of a filepath."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class XmlAdaptedItem {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Filepath is missing.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an XmlAdaptedItem."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public XmlAdaptedItem() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Constructs an {@code XmlAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public XmlAdaptedItem(String filepath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Converts this jaxb-friendly adapted Item object into a string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (this.filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return filepath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!(other instanceof XmlAdaptedItem)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        XmlAdaptedItem otherTask \u003d (XmlAdaptedItem) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return Objects.equals(filepath, otherTask.filepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 53,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String matricNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private String participation;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private String displayPic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String matricNumber, String phone,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String email, String address, String displayPic, String participation, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.displayPic \u003d displayPic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        matricNumber \u003d source.getMatricNumber().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        displayPic \u003d source.getDisplayPic().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        participation \u003d source.getParticipation().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.matricNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                MatriculationNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!MatriculationNumber.isValidMatricNumber(this.matricNumber)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MatriculationNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final MatriculationNumber matricNumber \u003d new MatriculationNumber(this.matricNumber);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (this.displayPic \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    DisplayPic.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        final DisplayPic displayPic;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!DisplayPicStorage.isValidPath(this.displayPic) || !DisplayPicStorage.isValidImage(this.displayPic)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic \u003d new DisplayPic();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic \u003d new DisplayPic(this.displayPic);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.participation \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    Participation.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Participation.isValidParticipation(this.participation)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new IllegalValueException(Participation.MESSAGE_PARTICIPATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final Participation participation \u003d new Participation(this.participation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, matricNumber, phone, email, address, displayPic, participation, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(matricNumber, otherPerson.matricNumber)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 Objects.equals(displayPic, otherPerson.displayPic)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(participation, otherPerson.participation)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 18,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public XmlAdaptedTask() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public XmlAdaptedTask(String title, String taskDescription, String deadline, String priority) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public XmlAdaptedTask (Task source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        taskDescription \u003d source.getTaskDesc().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        deadline \u003d source.getDeadline().dateString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        priority \u003d source.getPriority().priority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (this.title \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!Title.isValidTitle(this.title)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final Title title \u003d new Title(this.title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (this.taskDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    TaskDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!TaskDescription.isValidDescription(this.taskDescription)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(TaskDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final TaskDescription taskDesc \u003d new TaskDescription(this.taskDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (this.deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!Deadline.isValidDeadline(this.deadline)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final Deadline deadline \u003d new Deadline(this.deadline);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (this.priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!Priority.isValidPriority(this.priority)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final Priority priority \u003d new Priority(this.priority);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return new Task(title, taskDesc, deadline, priority);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return Objects.equals(title, otherTask.title)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDescription, otherTask.taskDescription)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline, otherTask.deadline)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                \u0026\u0026 Objects.equals(priority, otherTask.priority);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 110,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * JAXB-friendly version of the User."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlAdaptedUser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs an XmlAdaptedUser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser(String username, String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Converts a given User into this class for JAXB use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedUser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlAdaptedUser(User source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d source.getUsername().getUsername();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d source.getPassword().getPassword();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Converts this jaxb-friendly adapted user object into the model\u0027s User object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (this.username \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    Username.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!Username.isValidUsername(this.username)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final Username username \u003d new Username(this.username);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (this.password \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!Password.isValidPassword(this.password)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final Password password \u003d new Password(this.password);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new User(username, password);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof XmlAdaptedUser)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlAdaptedUser otherUser \u003d (XmlAdaptedUser) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return Objects.equals(username, otherUser.username)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherUser.password);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 82,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        File addressBookFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!addressBookFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        saveAddressBook(addressBook, (filePath + \".bak\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 5,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlLoginFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlLoginFileStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static void saveDataToFile(File file, XmlSerializableLogin login)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            XmlUtil.saveDataToFile(file, login);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static XmlSerializableLogin loadDataFromSaveFile(File file) throws DataConversionException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 30,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlLoginStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A class to access Login data stored as an xml file on the hard disk. \u003c- READ THIS :)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlLoginStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlLoginStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlLoginStorage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public String getLoginFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Optional\u003cLoginManager\u003e readLogin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return readLogin(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Similar to {@link #readLogin()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Optional\u003cLoginManager\u003e readLogin(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        File loginFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!loginFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.info(\"AddressBook file \"  + loginFile + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin xmlSerializableLogin \u003d XmlLoginFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return Optional.of(xmlSerializableLogin.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.info(\"Illegal values found in \" + loginFile + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void saveLogin(LoginManager loginManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        saveLogin(loginManager, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Similar to {@link #saveLogin(LoginManager)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void saveLogin(LoginManager loginManager, String filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(loginManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlLoginFileStorage.saveDataToFile(file, new XmlSerializableLogin(loginManager));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 68,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private List\u003cXmlAdaptedItem\u003e items;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        items.addAll(src.getItemList().stream().map(XmlAdaptedItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag t : tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTag(t.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(p.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTask ta : tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBook.addTask(ta.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        for (XmlAdaptedItem it : items) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            addressBook.addDeleteItem(it.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 tasks.equals(otherAb.tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ObservableList\u003cPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                return p.toModelType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final ObservableList\u003cTask\u003e tasks \u003d this.tasks.stream().map(p -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return p.toModelType();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    //@@author JoonKai1995"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTask\u003e[][] getCalendarList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return t.toModelType();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ObservableList\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        final ObservableList\u003cString\u003e items \u003d this.items.stream().map(it -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return it.toModelType();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return FXCollections.unmodifiableObservableList(items);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 7,
      "JoonKai1995": 42,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableLogin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlSerializableLogin {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private List\u003cXmlAdaptedUser\u003e users;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlSerializableLogin() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        users \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public XmlSerializableLogin(LoginManager src) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        users.addAll(src.getUserList().stream().map(XmlAdaptedUser::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (XmlAdaptedUser u : users) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginManager.addUser(u.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return loginManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (!(other instanceof XmlSerializableLogin)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin otherLogin \u003d (XmlSerializableLogin) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return users.equals(otherLogin.users);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 57,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarNode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarNode extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private static final String FXML \u003d \"CalendarNode.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private ListView\u003cCalendarTaskCard\u003e tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Create a calendar node."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param txt the date of the node"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param taskList the task list linked to it"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public CalendarNode(String txt, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        date.setText(txt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        ObservableList\u003cCalendarTaskCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                taskList, (task) -\u003e new CalendarTaskCard(task));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        tasks.setItems(mappedList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        tasks.setCellFactory(listView -\u003e new TasksCell());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CalendarTaskCard}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    class TasksCell extends ListCell\u003cCalendarTaskCard\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        protected void updateItem(CalendarTaskCard task, boolean empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                setGraphic(task.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 51,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarTaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * A UI component that displays compressed information of a {@code Task} on the calendar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private static final String FXML \u003d \"CalendarTaskCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public CalendarTaskCard(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        title.setText(task.getTitle().toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (task.getPriority().value \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().add(\"label-small-green\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else if (task.getPriority().value \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().add(\"label-small-yellow\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            title.getStyleClass().add(\"label-small-red\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (!(other instanceof CalendarTaskCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarTaskCard card \u003d (CalendarTaskCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return task.equals(card.task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 46,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * The Calendar of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private ArrayList\u003cAnchorPane\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private ObservableList\u003cTask\u003e[][] tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private int currentMonth \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private VBox calendarVBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private GridPane calendar;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Button previousMonth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Button nextMonth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private Label calendarTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Creates the calendar of the app"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public CalendarView(ObservableList\u003cTask\u003e[][] tasksArray) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.tasks \u003d tasksArray;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        initCalendar(yearMonth);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void initCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                ap.setPrefSize(300, 300);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                calendar.add(ap, j, i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        setCalendarDays(yearMonth);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Set the days of the calendar to display the correct date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param yearMonth year and month of the current month"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void setCalendarDays(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (AnchorPane ap : allCalendarDays) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                ap.getChildren().clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            String txt \u003d String.valueOf(calendarDate.getDayOfMonth());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                if (calendarDate.getMonthValue() \u003d\u003d currentYearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                } else if (calendarDate.getMonthValue() \u003e currentYearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth + 1][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    CalendarNode node \u003d new CalendarNode(txt, tasks[currentMonth - 1][calendarDate.getDayOfMonth()]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException oob) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                CalendarNode node \u003d new CalendarNode(txt, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                ap.getChildren().add(node.getRoot());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Refreshes the calendar with new information."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void refreshCalendar() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        initCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void handlePreviousButtonAction() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        currentMonth--;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        setCalendarDays(currentYearMonth);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void handleNextButtonAction() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        currentMonth++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        setCalendarDays(currentYearMonth);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public ArrayList\u003cAnchorPane\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cAnchorPane\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 121,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Login.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class Login extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String FXML \u003d \"Login.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final LoginManager login;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private TextField username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private PasswordField password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Button loginButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Label info;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Login(LoginManager login) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.login \u003d login;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginButton.setDefaultButton(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            login.authenticate(username.getText(), password.getText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (DuplicateUserException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            info.setText(\"[Existing user: Incorrect password entered]\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                + \"[New User: Password must contain 8-30 characters]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 43,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginMainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String FXML \u003d \"LoginMainWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Login login;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private StackPane loginPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginMainWindow(Stage primaryStage, LoginManager loginManager) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d loginManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        login \u003d new Login(loginManager);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginPlaceholder.getChildren().add(login.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 84,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginUiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginUiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginMainWindow loginMainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginUiManager(LoginManager login) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d login;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow \u003d new LoginMainWindow(primaryStage, loginManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginMainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginMainWindow.hide();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showAlertDialogAndWait(loginMainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 97,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.storage.DisplayPicStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String lecturerTag \u003d \"lecturer\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String TATag \u003d \"TA\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String studentTag \u003d \"student\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String tutorial1Tag \u003d \"T1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d { \"teal\", \"orange\", \"brown\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label matricNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Label participation;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Circle displayPic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        matricNumber.setText(person.getMatricNumber().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        participation.setText(person.getParticipation().toDisplay());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        initDisplay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case lecturerTag:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case TATag:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case studentTag:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case tutorial1Tag:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"green\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Initializes the display picture for (@code person)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private void initDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Image image \u003d DisplayPicStorage.fetchDisplay(person.getDisplayPic());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        displayPic.setFill(new ImagePattern(image));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (this.person.getParticipation().overThreshold()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic.setEffect(new DropShadow(+25d, 0d, +2d, Color.CHARTREUSE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            displayPic.setEffect(new DropShadow(+25d, 0d, +2d, Color.MAROON));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 27,
      "Pearlissa": 46,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TodoCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * A UI component that displays information of a {@code task} in TodoList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TodoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String FXML \u003d \"todoListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        title.setText(\"Title: \" + task.getTitle().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        priority.setText(\"Priority: \" + task.getPriority().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deadline.setText(\"Deadline: \" + task.getDeadline().dateString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        description.setText(\"Description: \" + task.getTaskDesc().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!(other instanceof TodoCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        TodoCard card \u003d (TodoCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "WoodySIN": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TodoListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.TodoPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Panel containing the list of tasks shown in TodoList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class  TodoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String FXML \u003d \"todoListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TodoListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private ListView\u003cTodoCard\u003e todoListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        setConnections(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void setConnections(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ObservableList\u003cTodoCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                taskList, (task) -\u003e new TodoCard(task, taskList.indexOf(task) + 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        todoListView.setItems(mappedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        todoListView.setCellFactory(listView -\u003e new TodoListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        todoListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        raise(new TodoPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Scrolls to the {@code TodoCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            todoListView.scrollTo(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            todoListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    class TodoListViewCell extends ListCell\u003cTodoCard\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        protected void updateItem(TodoCard task, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                setGraphic(task.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "WoodySIN": 69
    }
  },
  {
    "path": "src/main/resources/view/CalendarNode.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c!-- @@author JoonKai1995 --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003cPane prefHeight\u003d\"95.0\" prefWidth\u003d\"147.0\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"90.0\" prefWidth\u003d\"146.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"Label\" styleClass\u003d\"label-date\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cListView fx:id\u003d\"tasks\" prefHeight\u003d\"20.0\" prefWidth\u003d\"70.0\" styleClass\u003d\"list-view-calendar\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"1.0\" left\u003d\"2.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/ListView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 22,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/CalendarTaskCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c!-- @@author JoonKai1995 --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" prefWidth\u003d\"126.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"label-small\" prefHeight\u003d\"10.0\" prefWidth\u003d\"147.0\" scaleShape\u003d\"false\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 9,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c!-- @@author JoonKai1995 --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003cVBox id\u003d\"calendarVBox\" fx:id\u003d\"calendarVBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "       \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "              \u003cButton fx:id\u003d\"previousMonth\" styleClass\u003d\"button\" onAction\u003d\"#handlePreviousButtonAction\" text\u003d\"\u0026lt;\u0026lt;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "              \u003cLabel fx:id\u003d\"calendarTitle\" styleClass\u003d\"calendar_title\" text\u003d\"\\$calendarTitle\" HBox.hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "              \u003cButton fx:id\u003d\"nextMonth\" styleClass\u003d\"button\" onAction\u003d\"#handleNextButtonAction\" text\u003d\"\u0026gt;\u0026gt;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "       \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003cGridPane alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"calendar_text\" text\u003d\"Sunday\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel text\u003d\"Monday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel text\u003d\"Tuesday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"18.0\" left\u003d\"18.0\" right\u003d\"18.0\" top\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Wednesday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel text\u003d\"Thursday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel text\u003d\"Friday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"23.0\" right\u003d\"23.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cLabel text\u003d\"Saturday\" styleClass\u003d\"calendar_text\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                  \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendar\" alignment\u003d\"CENTER\" styleClass\u003d\"calendar-grid-pane\" gridLinesVisible\u003d\"true\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"90.0\" prefWidth\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 95,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".label-small {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: darkgrey;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".label-small-red {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#d26a6a, 20%);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".label-small-yellow {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#e4d858, 20%);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".label-small-green {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#8ac973, 20%);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view-calendar {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view-calendar .scroll-bar:horizontal ,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view-calendar  .scroll-bar:vertical{"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".calendar_text {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".calendar_title {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".calendar-grid-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: darkgrey;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: grey, grey;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/*@@author WoodySIN */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-background-color: #232A34;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-background-color: #232A34;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-tab-min-width:150px;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-background-color: #404040;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-background-color: #5F6A6A;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-text-fill: #f3f3f3;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 48,
      "-": 409,
      "WoodySIN": 46
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/* @@author Pearlissa */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    background-color: #c7c7c7; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #ababab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-info {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #ababab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-date {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-red {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#d26a6a, 20%);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-yellow {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e4d858, 20%);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-small-green {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#8ac973, 20%);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-control-inner-background: #e3e3e3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: transparent transparent transparent #b3b3b3;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .scroll-bar:horizontal ,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar  .scroll-bar:vertical{"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "list-view-calendar .list-cell {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .list-cell:filled:even {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-view-calendar .list-cell:filled:odd {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c1c2c3;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c2c5c7;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #9faabc;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: #6daac0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background: #e3e3e3;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #fbfefd;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #fbfefd;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".calendar_text {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".calendar_title {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".calendar-grid-pane {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-border-color: grey;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: derive(#e3e3e3, 25%);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 30%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 50%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/*"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: darkgrey, darkgrey;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: darkgrey;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #262626;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #c4c4c4;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "  -fx-text-fill: #e3e3e3;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #e3e3e3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 25%);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 20%);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: derive(#e3e3e3, 50%);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #f20713;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent #c7c7c7 transparent #c7c7c7;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: #c7c7c7 #c7c7c7 #000000 #c7c7c7;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: transparent, #c7c7c7, transparent, #c7c7c7;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #6daac0;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #cbd2dc;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #cbd2dc;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-tab-min-width:150px;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #bfbfbf;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-background-color: #97a1a1;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: #0d0d0d;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 523
    }
  },
  {
    "path": "src/main/resources/view/Login.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c!-- @@author Pearlissa --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003cPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cVBox prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"600.0\" text\u003d\"Welcome!\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"50.0\" prefWidth\u003d\"250.0\" text\u003d\"Username:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cTextField fx:id\u003d\"username\" promptText\u003d\"username\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" top\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cHBox prefHeight\u003d\"70.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"70.0\" prefWidth\u003d\"250.0\" text\u003d\"Password:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cPasswordField fx:id\u003d\"password\" promptText\u003d\"password\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" top\u003d\"23.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003c/PasswordField\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                  \u003cLabel fx:id\u003d\"info\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"605.0\" styleClass\u003d\"label-info\" text\u003d\"Please enter credentials\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cFont size\u003d\"9.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cHBox prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003cButton fx:id\u003d\"loginButton\" alignment\u003d\"CENTER_RIGHT\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCommandInputChanged\" text\u003d\"Login\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                                \u003cInsets left\u003d\"440.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 66,
      "-": 2
    }
  },
  {
    "path": "src/main/resources/view/LoginMainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c!-- @@author Pearlissa --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003cStackPane fx:id\u003d\"loginPlaceholder\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 23
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "  \u003c!-- @@author Alaru --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "  \u003cCircle fx:id\u003d\"displayPic\" fill\u003d\"chartreuse\" pickOnBounds\u003d\"true\" radius \u003d \"55.0\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "         \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "   \u003c/Circle\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "  \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"matricNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricNumber\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003cLabel fx:id\u003d\"participation\" styleClass\u003d\"cell_small_label\" text\u003d\"Participation: \\$Participation\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 18,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/todoListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003c!-- @@author WoodySIN --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "WoodySIN": 25
    }
  },
  {
    "path": "src/main/resources/view/todoListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003c!-- @@author WoodySIN --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.141\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    \u003cListView fx:id\u003d\"todoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "WoodySIN": 4
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{@code TypicalPersons#getTypicalAddressBook()}--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA1234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e85355255\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA2234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA3234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA4234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA5234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA6234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA7234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e0\u003c/participation\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003efriends\u003c/tags\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003eowesMoney\u003c/tags\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 7,
      "-": 66
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoginTest/invalidUserLogin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c!-- @@author Pearlissa --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eJohn Doe\u003c/username\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword isPrivate\u003d\"true\"\u003epassword\u003c/password\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoginTest/typicalUsersLogin.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c!-- @@author Pearlissa --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c!-- AddressBook save file which contains the same User values as in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "{@code TypicalUsers#getTypicalLoginManager()}--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eJOHNDOE\u003c/username\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003e12345678\u003c/password\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eALICE\u003c/username\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003eabcdefgh\u003c/password\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eBENSON\u003c/username\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003e1234ABCDE\u003c/password\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eCARL\u003c/username\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003e1a2b3c4d5e\u003c/password\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eDANIEL\u003c/username\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003epassword\u003c/password\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eELLE\u003c/username\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003eelleelle\u003c/password\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eFIONA\u003c/username\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003e1223334444\u003c/password\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cusername\u003eGEORGE\u003c/username\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        \u003cpassword\u003egeorge123\u003c/password\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 39
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmatricNumber\u003eA0123456I\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmatricNumber\u003eA0123456I\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA1234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA2234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA3234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA4234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA5234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA6234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA7234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA8234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmatricNumber\u003eA9234567X\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 9,
      "-": 75
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmatricNumber\u003eA0123456I\u003c/matricNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    \u003cdisplayPic\u003e/images/displayPic/default.png\u003c/displayPic\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cparticipation\u003e50\u003c/participation\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarViewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarViewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public static final String CALENDAR_TITLE_ID \u003d \"#calendarTitle\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private final Label calendarTitleLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public CalendarViewHandle(Node calendarViewNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        super(calendarViewNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        this.calendarTitleLabel \u003d getChildNode(CALENDAR_TITLE_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public String getCalendarTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return calendarTitleLabel.getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 19,
      "-": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 7,
      "-": 73
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TodoCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a TodoCard in the TodoList panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TodoCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String DESC_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private final Label priorityLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.descriptionLabel \u003d getChildNode(DESC_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return priorityLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "WoodySIN": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TodoListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.TodoCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a TodoCard in the TodoList panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TodoListPanelHandle extends NodeHandle\u003cListView\u003cTodoCard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TODO_LIST_VIEW_ID \u003d \"#todoListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Optional\u003cTodoCard\u003e lastRememberedSelectedTodoCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoListPanelHandle(ListView\u003cTodoCard\u003e todoListPanelNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        super(todoListPanelNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns a handle to the selected {@code TodoCardHandle}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTodoCard\u003e taskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (taskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new TodoCardHandle(taskList.get(0).getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTodoCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Navigates the listview to display and select the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void navigateTodoCard(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTodoCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Optional\u003cTodoCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.task.equals(task)).findFirst();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns the Todocard handle of a task associated with the {@code index} in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCardHandle getTodoCardHandle(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return getTodoCardHandle(getRootNode().getItems().get(index).task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns the {@code TodoCardHandle} of the specified {@code task} in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TodoCardHandle getTodoCardHandle(Task task) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Optional\u003cTodoCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .filter(card -\u003e card.task.equals(task))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .map(card -\u003e new TodoCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Selects the {@code TodoCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Remembers the selected {@code TodoCard} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void rememberSelectedTodoCard() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTodoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            lastRememberedSelectedTodoCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            lastRememberedSelectedTodoCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns true if the selected {@code TodoCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * {@code rememberSelectedTodoCard()} call."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public boolean isSelectedTodoCardChanged() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTodoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return lastRememberedSelectedTodoCard.isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return !lastRememberedSelectedTodoCard.isPresent()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                    || !lastRememberedSelectedTodoCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "WoodySIN": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        super.runTestInitSequence();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageSaveLocation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            File saveFileForTesting \u003d new File(filePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(saveFileForTesting);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(saveFileForTesting, data);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 19,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Your TA\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MATRICULATION_NUMBER \u003d \"A0123456I\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final String VALID_DISPLAY_PIC \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PARTICIPATION \u003d \"50\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                null, VALID_MATRICULATION_NUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                VALID_NAME, VALID_MATRICULATION_NUMBER, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 4,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteTask(Task target) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateTask(Task target, Task editedTask) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        public void sortPersons() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            fail(\"This method should not be called\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void sortTasks() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            fail(\"This method should not be called\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTask\u003e[][] getCalendarTaskLists() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ObservableList[0][];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public void clearDeleteItems() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 11,
      "Pearlissa": 8,
      "-": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void constructor_nullTask_throwNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        new AddTaskCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_taskAcceptedByModel_addTaskSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        CommandResult commandResult \u003d getAddTaskCommandForTask(validTask, modelStub).execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task meeting \u003d new TaskBuilder().withTitle(\"Meeting\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task assignment \u003d new TaskBuilder().withTitle(\"Assignment\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddTaskCommand addMeetingCommand \u003d new AddTaskCommand(meeting);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddTaskCommand addAssignmentCommand \u003d new AddTaskCommand(assignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddTaskCommand addMeetingCommandCopy \u003d new AddTaskCommand(meeting);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addAssignmentCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private AddTaskCommand getAddTaskCommandForTask(Task task, Model model) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddTaskCommand command \u003d new AddTaskCommand(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void deleteTask(Task target) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void updateTask(Task target, Task editedTask) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void sortPersons() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void sortTasks() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public ObservableList\u003cTask\u003e[][] getCalendarTaskLists() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return new ObservableList[0][];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void clearDeleteItems() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "WoodySIN": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTaskTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing Task Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class CommandTaskTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_TITLE_EXAM \u003d \"Test Preparation\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_TITLE_MARK \u003d \"Mark Test\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_TASK_DESC_EXAM \u003d \"Giving Practical Exam tips and reviewing past year test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_TASK_DESC_MARK \u003d \"Grade test papers for CS1020 tutorial classes\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_DEADLINE_EXAM \u003d \"01-06-2018\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_DEADLINE_MARK \u003d \"04-06-2018\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_PRIORITY_EXAM \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_PRIORITY_MARK \u003d \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TITLE_DESC_EXAM \u003d \" \" + PREFIX_TITLE + VALID_TITLE_EXAM;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TITLE_DESC_MARK \u003d \" \" + PREFIX_TITLE + VALID_TITLE_MARK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TASK_DESC_DESC_EXAM \u003d \" \" + PREFIX_TASK_DESC + VALID_TASK_DESC_EXAM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String TASK_DESC_DESC_MARK \u003d \" \" + PREFIX_TASK_DESC + VALID_TASK_DESC_MARK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEADLINE_DESC_EXAM \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_EXAM;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEADLINE_DESC_MARK \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_MARK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String PRIORITY_DESC_EXAM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_EXAM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String PRIORITY_DESC_MARK \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MARK;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \" \"; // \u0027\u0026\u0027 not allowed in title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String INVALID_TASK_DESC_DESC \u003d \" \" + PREFIX_TASK_DESC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            + \" \"; // empty string not allowed in task description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"30-13-2018\"; // invalid date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"0\"; // priority from 1 to 3"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final EditTaskCommand.EditTaskDescriptor DESC_EXAM;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final EditTaskCommand.EditTaskDescriptor DESC_MARK;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DESC_EXAM \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_EXAM).withDesc(VALID_TASK_DESC_EXAM)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withDeadline(VALID_DEADLINE_EXAM).withPriority(VALID_PRIORITY_EXAM).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DESC_MARK \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARK).withDesc(VALID_TASK_DESC_MARK)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withDeadline(VALID_DEADLINE_MARK).withPriority(VALID_PRIORITY_MARK).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * - the address book and the filtered task list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        } catch (TaskNotFoundException tnfe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            throw new AssertionError(\"Task in filtered list must exist in model.\", tnfe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "WoodySIN": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARK_PARTICIPATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MATRIC_NUMBER_AMY \u003d \"A5678901L\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MATRIC_NUMBER_BOB \u003d \"U1234567K\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_DISPLAY_AMY \u003d \"src/test/resources/images/displayPic/test.bmp\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_DISPLAY_BOB \u003d \"src/test/resources/images/displayPic/testBob.bmp\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_DEFAULT_DISPLAY \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_PARTICIPATION_AMY \u003d \"0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_PARTICIPATION_BOB \u003d \"0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String VALID_PARTICIPATION_MARK \u003d \"5\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_PARTICIPATION_MARK \u003d \"hundred\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_OVER_PARTICIPATION_MARK \u003d \"105\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final Integer VALID_INT_PART_MARK \u003d 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MATRIC_NUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MATRIC_NUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DISPLAY_DESC_AMY \u003d \" \" + PREFIX_DISPLAY_PIC + VALID_DISPLAY_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DISPLAY_DESC_BOB \u003d \" \" + PREFIX_DISPLAY_PIC + VALID_DISPLAY_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String PARTICIPATION_DESC_MARK \u003d \" \" + PREFIX_MARK_PARTICIPATION + VALID_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_MATRIC_NUMBER_DESC \u003d \" \" + PREFIX_MATRIC_NUMBER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"E12345678\"; // first letter must be A or U"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_DESC \u003d \" \" + PREFIX_DISPLAY_PIC"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"src/test/resources/images/displayPic/missing\"; //Missing file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_TYPE_DESC \u003d \" \" + PREFIX_DISPLAY_PIC"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \"src/test/resources/images/displayPic/wrong.txt\"; //not image file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_ALPHABET_MARK_DESC \u003d \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_MARK_PARTICIPATION + INVALID_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_OVER_MARK_DESC \u003d \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + PREFIX_MARK_PARTICIPATION + INVALID_OVER_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_FILE \u003d \"invalidFileTest.xml\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new InfoContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 22,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        undoRedoStack.push(deleteCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        undoRedoStack.push(deleteCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteFirstCommandCopy.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns a {@code DeleteCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private DeleteCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "WoodySIN": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteTaskCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteTaskCommand.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        undoRedoStack.push(deleteTaskCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and to show all tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteFirstCommandCopy.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns a {@code DeleteTaskCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private DeleteTaskCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deleteTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return deleteTaskCommand;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "WoodySIN": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author Alaru"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //different display picture -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDisplayPic(VALID_DISPLAY_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //different participation -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withParticipation(VALID_PARTICIPATION_MARK).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 12,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.DESC_EXAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.DESC_MARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_DEADLINE_EXAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_TASK_DESC_EXAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_TITLE_EXAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_TITLE_MARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * and unit tests for EditTaskCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task editedTask \u003d taskInList.withTitle(VALID_TITLE_EXAM).withDesc(VALID_TASK_DESC_EXAM)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withDeadline(VALID_DEADLINE_EXAM).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_EXAM)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withDesc(VALID_TASK_DESC_EXAM).withDeadline(VALID_DEADLINE_EXAM).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.updateTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARK).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        editTaskCommand.execute();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        undoRedoStack.push(editTaskCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARK).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        final EditTaskCommand standardCommand \u003d prepareCommand(INDEX_FIRST_TASK, DESC_MARK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_MARK);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        commandWithSameValues.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_SECOND_TASK, DESC_EXAM)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_FIRST_TASK, DESC_EXAM)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private EditTaskCommand prepareCommand(Index index, EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(index, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        editTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return editTaskCommand;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "WoodySIN": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FILE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * {@code ImportCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String VALID_IMPORT_FILE_PATH \u003d \"src/data/ValidImport.xml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String INVALID_IMPORT_FILE_PATH \u003d \"src/data/InValidImport.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private String getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return testFolder.getRoot().getPath() + fileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void fileNotFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ImportCommand importCommand \u003d pathInCommand(INVALID_FILE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandFailure(importCommand, model, ImportCommand.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns an {@code ImportCommand} with parameters {@code filePath}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private ImportCommand pathInCommand(String filePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        ImportCommand testCommand \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        testCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return testCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "WoodySIN": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCurrentTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCurrentTaskCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ListCurrentTaskCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private ListCurrentTaskCommand listCurrentTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        listCurrentTaskCommand \u003d new ListCurrentTaskCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        listCurrentTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(listCurrentTaskCommand, model, ListCurrentTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        new ListTaskCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(listCurrentTaskCommand, model, ListCurrentTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "WoodySIN": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListTaskCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private ListTaskCommand listTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        listTaskCommand \u003d new ListTaskCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        listTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(listTaskCommand, model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        new ListCurrentTaskCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(listTaskCommand, model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "WoodySIN": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INT_PART_MARK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * MarkCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * With reference to @code UpdateDisplayCommandTest.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_correctFieldSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //Rest of the fields must be the same as the typicaladdressbook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updateMarkPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withMatriculationNumber(\"A1234567X\").withParticipation(VALID_PARTICIPATION_MARK).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MarkCommand markCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_INT_PART_MARK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                updateMarkPerson.getName().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updateMarkPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns an {@code MarkCommand} with parameters {@code index} and {@code marks}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private MarkCommand prepareCommand(Index index, Integer marks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(index, marks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        markCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return markCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 41,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private SortCommand sortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        sortCommand \u003d new SortCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsNotFiltered_sortsList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsFiltered_sortsList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_listIsFiltered_sortsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void execute_nullList_sortsList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 42,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListTaskCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class SortTaskCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private SortTaskCommand sortTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        sortTaskCommand \u003d new SortTaskCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        sortTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsNotFiltered_sortsList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, SortTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsFiltered_sortsList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, SortTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_listIsFiltered_sortsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, SortTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void execute_nullList_sortsList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, SortTaskCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "WoodySIN": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateDisplayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFAULT_DISPLAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * UpdateDisplayCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * With reference to @code EditCommandTest.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_correctFieldSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //Rest of the fields must be the same as the typicaladdressbook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person editedDisplayPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withMatriculationNumber(\"A1234567X\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic editedDisplay \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedDisplay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateDisplayCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                editedDisplayPerson.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedDisplayPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(updateDisplayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder(personInFilteredList).withDisplayPic(VALID_DEFAULT_DISPLAY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                new DisplayPic(VALID_DEFAULT_DISPLAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateDisplayCommand.MESSAGE_SUCCESS, updatedPerson.getName()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updatedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(updateDisplayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex, displayPic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                new DisplayPic(VALID_DEFAULT_DISPLAY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToUpdate \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder(personToUpdate).withDisplayPic(VALID_DEFAULT_DISPLAY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, displayPic);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updateDisplayCommand.execute();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        undoRedoStack.push(updateDisplayCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        expectedModel.updatePerson(personToUpdate, updatedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic displayPic \u003d new DisplayPic(VALID_DEFAULT_DISPLAY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d prepareCommand(outOfBoundIndex, displayPic);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(updateDisplayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns an {@code UpdateDisplayCommand} with parameters {@code index} and {@code editedDisplay}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private UpdateDisplayCommand prepareCommand(Index index, DisplayPic editedDisplay) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand updateDisplayCommand \u003d new UpdateDisplayCommand(index, editedDisplay);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        updateDisplayCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return updateDisplayCommand;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 125,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_TYPE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMatriculationNumber(VALID_MATRIC_NUMBER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withParticipation(VALID_PARTICIPATION_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withDisplayPic(VALID_DISPLAY_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple matricNumbers - last matricNumber accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_AMY + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author Alaru"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // multiple display paths - last display accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DISPLAY_DESC_AMY + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMatriculationNumber(VALID_MATRIC_NUMBER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withParticipation(VALID_PARTICIPATION_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMatriculationNumber(VALID_MATRIC_NUMBER_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDisplayPic(VALID_DISPLAY_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withParticipation(VALID_PARTICIPATION_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MATRIC_NUMBER_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + MATRIC_NUMBER_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author Alaru"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no display picture"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person expectedPersonNoDisplay \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withMatriculationNumber(VALID_MATRIC_NUMBER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withParticipation(VALID_PARTICIPATION_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonNoDisplay));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing matricNumber prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_NUMBER_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRIC_NUMBER_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid matricNumber"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRIC_NUMBER_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MatriculationNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author Alaru"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid display pic - missing file"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_DISPLAY_DESC"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid display pic - not image file"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_DISPLAY_TYPE_DESC"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DISPLAY_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRIC_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 61,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTaskCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.DEADLINE_DESC_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.DEADLINE_DESC_MARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.INVALID_TASK_DESC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.PRIORITY_DESC_EXAM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.PRIORITY_DESC_MARK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.TASK_DESC_DESC_EXAM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.TASK_DESC_DESC_MARK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.TITLE_DESC_EXAM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.TITLE_DESC_MARK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_DEADLINE_EXAM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_PRIORITY_EXAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_TASK_DESC_EXAM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTaskTestUtil.VALID_TITLE_EXAM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder().withTitle(VALID_TITLE_EXAM)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withDesc(VALID_TASK_DESC_EXAM).withDeadline(VALID_DEADLINE_EXAM)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                .withPriority(VALID_PRIORITY_EXAM).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + DEADLINE_DESC_EXAM + PRIORITY_DESC_EXAM, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_MARK + TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // multiple taskDescs - last taskDesc accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_MARK + TASK_DESC_DESC_EXAM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + DEADLINE_DESC_EXAM + PRIORITY_DESC_EXAM, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_MARK"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + DEADLINE_DESC_EXAM + PRIORITY_DESC_EXAM, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_MARK + PRIORITY_DESC_EXAM, new AddTaskCommand(expectedTask));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        + PRIORITY_DESC_EXAM, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // missing taskDesc prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + VALID_TASK_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + VALID_DEADLINE_EXAM"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + VALID_PRIORITY_EXAM, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_EXAM + VALID_TASK_DESC_EXAM + VALID_DEADLINE_EXAM"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + VALID_PRIORITY_EXAM, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // invalid taskDesc"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + INVALID_TASK_DESC_DESC + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, TaskDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + INVALID_DEADLINE_DESC"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PRIORITY_DESC_EXAM, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_EXAM + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + TASK_DESC_DESC_EXAM + DEADLINE_DESC_EXAM"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + INVALID_PRIORITY_DESC, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TASK_DESC_DESC_EXAM"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        + DEADLINE_DESC_EXAM + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "WoodySIN": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_add_alias() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_add_sign() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_SIGN + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_clear_alias() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_delete_alias() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_delete_sign() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "                DeleteCommand.COMMAND_SIGN + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author Alaru"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parseCommand_email() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand command \u003d (EmailCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                EmailCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEquals(new EmailCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    //Participation atttribute is set to null as edit does not support editing participation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person person \u003d new PersonBuilder().withoutParticipation().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new InfoContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author WoodySIN"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find_alias() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new InfoContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author WoodySIN"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help_sign() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_SIGN) instanceof HelpCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_SIGN + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author WoodySIN"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history_alias() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author WoodySIN"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list_alias() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@ author WoodySIN"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select_alias() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "content": "    //@@author"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    //@@author WoodySIN"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 11,
      "null": 1,
      "-": 164,
      "WoodySIN": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTaskCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "WoodySIN": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_TYPE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + INVALID_DISPLAY_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS); //invalid (missing) display"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + INVALID_DISPLAY_TYPE_DESC, DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE); //invalid (not image) display"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + DISPLAY_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withDisplayPic(VALID_DISPLAY_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // display pic"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDisplayPic(VALID_DISPLAY_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + DISPLAY_DESC_AMY"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + DISPLAY_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDisplayPic(VALID_DISPLAY_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 24,
      "-": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public void parse_noFile_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        assertParseFailure(parser, \"   \", expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "WoodySIN": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALPHABET_MARK_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OVER_MARK_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_MARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPATION_DESC_MARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INT_PART_MARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class MarkCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private MarkCommandParser parser \u003d new MarkCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validArgs_returnsMarkCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, \"1\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                + PARTICIPATION_DESC_MARK, new MarkCommand(INDEX_FIRST_PERSON, VALID_INT_PART_MARK));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidMarksArg_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_MARK,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidMissingMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_alphabetMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ALPHABET_MARK_DESC, MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_overLimitMarksArgs_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OVER_MARK_DESC, MarkCommand.MESSAGE_INVALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 39,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateDisplayCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DISPLAY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DISPLAY_TYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.UpdateDisplayCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Test scope: similar to {@code EditCommandParserTest}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @see EditCommandParserTest"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UpdateDisplayCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateDisplayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private UpdateDisplayCommandParser parser \u003d new UpdateDisplayCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DISPLAY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"0\" + DISPLAY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid (non existent) image"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DISPLAY_DESC, DisplayPic.MESSAGE_DISPLAY_PIC_NONEXISTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid (not image) file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DISPLAY_TYPE_DESC, DisplayPic.MESSAGE_DISPLAY_PIC_NOT_IMAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DISPLAY_DESC_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic display \u003d new DisplayPic(VALID_DISPLAY_AMY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand expectedCommand \u003d new UpdateDisplayCommand(targetIndex, display);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_multipleRepeatedField_acceptsLast() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DISPLAY_DESC_AMY + DISPLAY_DESC_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        DisplayPic display \u003d new DisplayPic(VALID_DISPLAY_BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UpdateDisplayCommand expectedCommand \u003d new UpdateDisplayCommand(targetIndex, display);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 77,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTask\u003e[][] getCalendarList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ObservableList[0][];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        public List\u003cString\u003e getItemList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new UniqueItemList().getItemList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 6,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LoginManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private final LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(loginManager.equals(loginManager));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(loginManager.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(loginManager.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 24,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueItemListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void asUnmodifiableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        uniqueItemList.getItemList().remove(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void noDuplicateItems() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        UniqueItemList otherItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        uniqueItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        otherItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        otherItemList.add(\"TEST\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEquals(uniqueItemList, otherItemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 26,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueUserListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.UniqueUserList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UniqueUserListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        UniqueUserList uniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        uniqueUserList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 14,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DisplayPicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class DisplayPicTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_PATH \u003d \"src/test/resources/images/displayPic/missing\"; //Missing file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_TYPE_PATH \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"src/test/resources/images/displayPic/wrong.txt\"; //not image file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String INVALID_DISPLAY_NO_EXT_PATH \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            \"src/test/resources/images/displayPic/missingExt\"; //file missing extension"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DisplayPic(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidMissingPath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_PATH));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidImageFile_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_TYPE_PATH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidMissingExtension_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPic(INVALID_DISPLAY_NO_EXT_PATH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 34,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatriculationNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class MatriculationNumberTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MatriculationNumber(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String invalidMatricNumber \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MatriculationNumber(invalidMatricNumber));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void isValidMatricNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // null matric number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MatriculationNumber.isValidMatricNumber(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // invalid matric numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"91\")); // only numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"matricNumber\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"E0000000I\")); // first letter is not A or U"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"A00000000E\")); // More than 8 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"a0000000I\")); // first character not capitalised"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatricNumber(\"A00000000t\")); // last character not capitalised"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // valid matric numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatricNumber(\"A0156672X\")); // Starting with A"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatricNumber(\"U4812163G\")); // Starting with U"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 34,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ParticipationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.exceptions.IllegalMarksException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//@@author Alaru"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class ParticipationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Participation((String) null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Participation((Integer) null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidEmptyMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"abcde\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaNegativeMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"-100\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void constructor_invalidAlphaOverLimitMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String marks \u003d \"500\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Participation(marks));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void isValidParticipation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // null participation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Participation.isValidParticipation(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // invalid participation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // spaces only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // only non-alphanumeric characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"^\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // contains alpha characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"abcd\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Assert.assertThrows(IllegalMarksException.class, () -\u003e Participation.isValidParticipation(\"peter*\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"101\")); // over limit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"-500\")); // below limit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        // valid participation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"100\")); // numbers only within 0 to 100"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 59,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private LocalDate yesterday \u003d now.minusDays(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private LocalDate tomorrow \u003d now.plusDays(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String dateYesterday \u003d yesterday.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String correctDateYesterday \u003d dateYesterday.substring(8, 10) + \"-\" + dateYesterday.substring(5, 7)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        + \"-\" + dateYesterday.substring(0, 4);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String dateTomorrow \u003d tomorrow.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String correctDateTomorrow \u003d dateTomorrow.substring(8, 10) + \"-\" + dateTomorrow.substring(5, 7)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        + \"-\" + dateTomorrow.substring(0, 4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_invalidDeadline_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"91\")); // numbers"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"02/04/2017\")); // / instead of -"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(correctDateYesterday)); // scheduled yesterday"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(correctDateTomorrow));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 38,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_invalidPriority_throwsNumberFormatException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // invalid priority values"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"911\")); // more than 1 number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // valid priority values"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\")); //only 3 unique cases for priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 30,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class TaskDescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_null_throwsAssertionError() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TaskDescription(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskDescription(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskDescription.isValidDescription(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(TaskDescription.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(TaskDescription.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(TaskDescription.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long desc"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 34,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_null_throwsAssertionError() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long titles"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 35,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String invalidPass \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidPass));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null password"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john doe\")); // contains whitespace"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"abcdefg\")); // contains less than 7 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"abcde12345abcde12345abcde12345a\")); // contains more than 30 characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Password.isValidPassword(\"john_doe\")); // contains underscore"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // valid password"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"johndoe1\")); // alphabets only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"12345678\")); // numbers only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"JohnDoe1\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"abcdefgh\")); // at least 8 characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Password.isValidPassword(\"abcde12345abcde12345abcde12345\")); // at most 30 characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 38,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        String invalidUser \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUser));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // null username"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john doe\")); // contains whitespace"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"ab\")); // contains less than 3 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"abcdefghijklmnop\")); // contains more than 15 characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertFalse(Username.isValidUsername(\"john_doe\")); // contains underscore"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        // valid username"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"johndoe\")); // alphabets only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"JohnDoe\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"abc\")); // at least 3 characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(Username.isValidUsername(\"abcde12345abcde\")); // at most 3 characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 38,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/LoginStorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalUsers.getTypicalLoginManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class LoginStorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private LoginStorageManager loginStorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        XmlLoginStorage loginStorage \u003d new XmlLoginStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        loginStorageManager \u003d new LoginStorageManager(loginStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private String getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return testFolder.getRoot().getPath() + fileName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Checks if the info on the 2 Login Managers are the same."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param loginManager1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @param loginManager2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private boolean checkUsers(LoginManager loginManager1, LoginManager loginManager2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        if (loginManager1.getUserList().size() !\u003d loginManager2.getUserList().size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        for (int i \u003d 0; i \u003c loginManager1.getUserList().size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            if (!loginManager1.getUserList().get(i).getUsername().getUsername()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getUsername().getUsername())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    || !loginManager1.getUserList().get(i).getPassword().getPassword()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getPassword().getPassword())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void loginReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        LoginManager original \u003d getTypicalLoginManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        loginStorageManager.saveLogin(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        LoginManager retrieved \u003d loginStorageManager.readLogin().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(checkUsers(original, retrieved));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertNotNull(loginStorageManager.getLoginFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 61,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MATRIC_NUMBER \u003d \"E12345678\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PARTICIPATION \u003d \"150\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MATRIC_NUMBER \u003d BENSON.getMatricNumber().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static final String VALID_DISPLAY_PIC \u003d BENSON.getDisplayPic().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PARTICIPATION \u003d BENSON.getParticipation().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d MatriculationNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_PHONE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatriculationNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                        INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,  VALID_MATRIC_NUMBER, null,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                        INVALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_EMAIL, null, VALID_DISPLAY_PIC, VALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidParticipation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, INVALID_PARTICIPATION, VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d Participation.MESSAGE_PARTICIPATION_CONSTRAINTS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullParticipation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, null, VALID_TAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Participation.class.getSimpleName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_MATRIC_NUMBER, VALID_PHONE,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_EMAIL, VALID_ADDRESS, VALID_DISPLAY_PIC, VALID_PARTICIPATION, invalidTags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableLoginTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.testutil.TypicalUsers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class XmlSerializableLoginTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableLoginTest/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final File TYPICAL_USERS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalUsersLogin.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final File INVALID_USER_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidUserLogin.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void toModelType_typicalUsersFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_USERS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager loginFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager typicalUsersLogin \u003d TypicalUsers.getTypicalLoginManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTrue(checkUsers(loginFromFile, typicalUsersLogin));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Checks if the info on the 2 Login Managers are the same."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @param loginManager2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private boolean checkUsers(LoginManager loginManager1, LoginManager loginManager2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        if (loginManager1.getUserList().size() !\u003d loginManager2.getUserList().size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (int i \u003d 0; i \u003c loginManager1.getUserList().size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            if (!loginManager1.getUserList().get(i).getUsername().getUsername()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getUsername().getUsername())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    || !loginManager1.getUserList().get(i).getPassword().getPassword()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    .equals(loginManager2.getUserList().get(i).getPassword().getPassword())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public void toModelType_invalidUserFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        XmlSerializableLogin dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_USER_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                XmlSerializableLogin.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 54,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setMatricNumber(person.getMatricNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        descriptor.setDisplayPic(person.getDisplayPic());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        descriptor.setParticipation(person.getParticipation());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code MatriculationNumber} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setMatricNumber(new MatriculationNumber(matricNumber));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Sets the {@code DisplayPic} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EditPersonDescriptorBuilder withDisplayPic(String displayPic) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        descriptor.setDisplayPic(new DisplayPic(displayPic));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Sets the {@code Participation} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EditPersonDescriptorBuilder withParticipation(String participation) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        descriptor.setParticipation(new Participation(participation));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 20,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setTitle(task.getTitle());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setDescription(task.getTaskDesc());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setDeadline(task.getDeadline());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Title} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code TaskDescription} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder withDesc(String taskDesc) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setDescription(new TaskDescription(taskDesc));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "WoodySIN": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LoginManagerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class to help with building LoginManager objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " *     {@code LoginManager lm \u003d new LoginManagerBuilder().withUser(\"JOHNDOE\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class LoginManagerBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private LoginManager loginManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        loginManager \u003d new LoginManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder(LoginManager loginManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.loginManager \u003d loginManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Adds a new {@code User} to the {@code LoginManager} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManagerBuilder withUser(User user) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            loginManager.addUser(user);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        } catch (DuplicateUserException due) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            throw new IllegalArgumentException(\"user is expected to be unique.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public LoginManager build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return loginManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.DisplayPic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A0123456I\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_DISPLAY_PIC \u003d \"/images/displayPic/default.png\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String DEFAULT_PARTICIPATION \u003d \"0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MatriculationNumber matricNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private DisplayPic displayPic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private Participation participation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        matricNumber \u003d new MatriculationNumber(DEFAULT_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        displayPic \u003d new DisplayPic(DEFAULT_DISPLAY_PIC);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        participation \u003d new Participation(DEFAULT_PARTICIPATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        matricNumber \u003d personToCopy.getMatricNumber();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        displayPic \u003d personToCopy.getDisplayPic();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        participation \u003d personToCopy.getParticipation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code MatriculationNumber} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withMatriculationNumber(String matricNumber) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.matricNumber \u003d new MatriculationNumber(matricNumber);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Sets the {@code DisplayPic} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public PersonBuilder withDisplayPic(String displayPic) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.displayPic \u003d new DisplayPic(displayPic);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Sets the {@code Participation} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public PersonBuilder withParticipation(String participation) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.participation \u003d new Participation(participation);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Sets the {@code Participation} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public PersonBuilder withoutParticipation() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.participation \u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Builds the Person object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * @return A Person object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new Person(name, matricNumber, phone, email, address, displayPic,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                participation, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 40,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISPLAY_PIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_MATRIC_NUMBER + person.getMatricNumber().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        sb.append(PREFIX_DISPLAY_PIC + person.getDisplayPic().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Dance\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEFAULT_DESC \u003d \"Dance till I drop\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d now.format(formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private TaskDescription desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        desc \u003d new TaskDescription(DEFAULT_DESC);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        title \u003d taskToCopy.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        desc \u003d taskToCopy.getTaskDesc();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        deadline \u003d taskToCopy.getDeadline();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Title} of the {@code Task} that we are building"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder withTitle (String title) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code TaskDescription} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder withDesc(String desc) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.desc \u003d new TaskDescription(desc);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new Task(title, desc, deadline, priority);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "WoodySIN": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISPLAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A1234567X\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            .withPhone(\"85355255\").withDisplayPic(\"/images/displayPic/default.png\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A2234567X\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            .withDisplayPic(\"/images/displayPic/default.png\").withParticipation(\"0\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A3234567X\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A4234567X\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A5234567X\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A6234567X\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A7234567X\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A8234567X\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(\"A9234567X\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(VALID_MATRIC_NUMBER_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            .withDisplayPic(VALID_DISPLAY_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMatriculationNumber(VALID_MATRIC_NUMBER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            .withDisplayPic(VALID_DISPLAY_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 7,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "//@@author WoodySIN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static String tutorialDeadline \u003d now.plusDays(5).format(formatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static String sleepDeadline \u003d now.plusDays(6).format(formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static String lunchDeadline \u003d now.plusDays(10).format(formatter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static String reportDeadline \u003d now.plusDays(8).format(formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static String biddingDeadline \u003d now.plusMonths(1).format(formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final Task TUTORIAL \u003d new TaskBuilder().withTitle(\"Prepare Tut\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDesc(\"Prepare tutorial contents for friday Tutorial\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDeadline(tutorialDeadline).withPriority(\"1\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final Task SLEEP \u003d new TaskBuilder().withTitle(\"Sleep Early\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDesc(\"I need to sleep early before midnight today\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDeadline(sleepDeadline).withPriority(\"2\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final Task LUNCH \u003d new TaskBuilder().withTitle(\"Group Lunch\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDesc(\"Have lunch with the TA group\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDeadline(lunchDeadline).withPriority(\"3\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final Task REPORT \u003d new TaskBuilder().withTitle(\"Sem Report\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDesc(\"Prepare for end of semester report\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDeadline(reportDeadline).withPriority(\"2\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private static final Task BIDDING \u003d new TaskBuilder().withTitle(\"Bid Modules\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDesc(\"Prepare for bidding modules for the coming semester\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            .withDeadline(biddingDeadline).withPriority(\"2\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TUTORIAL, SLEEP, LUNCH, REPORT, BIDDING));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WoodySIN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "WoodySIN": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.LoginManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class TypicalUsers {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User JOHNDOE \u003d new UserBuilder().withUsername(\"JOHNDOE\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"12345678\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User ALICE \u003d new UserBuilder().withUsername(\"ALICE\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"abcdefgh\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User BENSON \u003d new UserBuilder().withUsername(\"BENSON\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1234ABCDE\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User CARL \u003d new UserBuilder().withUsername(\"CARL\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1a2b3c4d5e\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User DANIEL \u003d new UserBuilder().withUsername(\"DANIEL\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"password\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User ELLE \u003d new UserBuilder().withUsername(\"ELLE\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"elleelle\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User FIONA \u003d new UserBuilder().withUsername(\"FIONA\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"1223334444\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User GEORGE \u003d new UserBuilder().withUsername(\"GEORGE\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"george123\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User HOON \u003d new UserBuilder().withUsername(\"HOON\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"meehoonkueh\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final User IDA \u003d new UserBuilder().withUsername(\"IDA\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            .withPassword(\"idanotaho\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private TypicalUsers() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns a {@code LoginManager} with all the typical users."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static LoginManager getTypicalLoginManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        LoginManager lm \u003d new LoginManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        for (User user : getTypicalUsers()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                lm.addUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            } catch (DuplicateUserException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return lm;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static List\u003cUser\u003e getTypicalUsers() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOHNDOE, ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 56,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "//@@author Pearlissa"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " * A utility class to help with building User objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "public class UserBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"JOHNDOE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"12345678\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Initializes the UserBuilder with the data of {@code userToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder(User userToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        username \u003d userToCopy.getUsername();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        password \u003d userToCopy.getPassword();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sets the {@code Userame} of the {@code User} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Sets the {@code Userame} of the {@code User} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public UserBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Builds the User object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @return A User object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        return new User(username, password);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarTaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarCardTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CalendarTaskCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarTaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Task normalTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarTaskCard taskCard \u003d new CalendarTaskCard(normalTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        uiPartRule.setUiPart(taskCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertCardDisplay(taskCard, normalTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarTaskCard calendarTaskCard \u003d new CalendarTaskCard(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarTaskCard copy \u003d new CalendarTaskCard(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(calendarTaskCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertTrue(calendarTaskCard.equals(calendarTaskCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(calendarTaskCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertFalse(calendarTaskCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void assertCardDisplay(CalendarTaskCard taskCard, Task expectedTask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarTaskCardHandle calendarTaskCardHandle \u003d new CalendarTaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertCalendarCardTask(expectedTask, calendarTaskCardHandle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 43,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarViewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CalendarViewHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "//@@author JoonKai1995"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "public class CalendarViewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        ObservableList\u003cTask\u003e[][] lists \u003d new ObservableList[1][1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        lists[0][0] \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarView calendar \u003d new CalendarView(lists);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        uiPartRule.setUiPart(calendar);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        String correctTitle \u003d yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertCalendarTitle(calendar, correctTitle);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    private void assertCalendarTitle(CalendarView calendar, String expectedTitle) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        CalendarViewHandle calendarViewHandle \u003d new CalendarViewHandle(calendar.getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "        assertEquals(expectedTitle, calendarViewHandle.getCalendarTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JoonKai1995"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JoonKai1995": 29,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CalendarTaskCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TodoCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TodoListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d { \"teal\", \"orange\", \"brown\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysTask(Task expectedTask, TodoCardHandle actualCard) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask.getTitle().value, actualCard.getTitle());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask.getTaskDesc().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask.getDeadline().value, actualCard.getDeadline());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask.getPriority().toString(), actualCard.getPriority());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask} on the calendar."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCalendarCardTask(Task expectedTask, CalendarTaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTask.getTitle().value, actualCard.getTitle());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * @see PersonCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case \"lecturer\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case \"TA\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case \"student\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        case \"T1\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return \"green\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pearlissa"
        },
        "content": "                    actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(TodoListPanelHandle todoListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysTask(tasks[i], todoListPanelHandle.getTodoCardHandle(i));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code todoListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(TodoListPanelHandle todoListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(todoListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code todoListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(TodoListPanelHandle todoListPanelHandle, int size) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfTask \u003d todoListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfTask);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pearlissa": 48,
      "-": 119
    }
  },
  {
    "path": "unused/EmailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.awt.HeadlessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.exceptions.UnsupportDesktopException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Emails a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"email\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MAIL_SYNTAX \u003d \"mailto:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            + \": Email the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public static final String MESSAGE_EMAIL_PERSON_SUCCESS \u003d \"Email Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EmailCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String emailAddress \u003d personToEmail.getEmail().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String emailName \u003d personToEmail.getName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Desktop.getDesktop().mail(new URI(MAIL_SYNTAX + emailAddress));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (HeadlessException hlError) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new UnsupportDesktopException(Messages.MESSAGE_UNSUPPORTED_DESKTOP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (URISyntaxException | IOException error) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MAIL_APP_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EMAIL_PERSON_SUCCESS, emailName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                || (other instanceof EmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((EmailCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 48,
      "null": 1,
      "-": 19
    }
  },
  {
    "path": "unused/EmailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Parses input arguments and creates a new EmailCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return new EmailCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 18,
      "null": 1,
      "-": 13
    }
  },
  {
    "path": "unused/EmailCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * outside of the EmailCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * same path through the EmailCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private EmailCommandParser parser \u003d new EmailCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void parse_validArgs_returnsEmailCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseSuccess(parser, \"1\", new EmailCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 14,
      "null": 1,
      "-": 19
    }
  },
  {
    "path": "unused/EmailCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "import seedu.address.logic.commands.exceptions.UnsupportDesktopException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Contains unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * {@code EmailCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Code not used as EmailCommand was removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(EmailCommand.MESSAGE_EMAIL_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToEmail.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEmailSuccess(expectedMessage, emailCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(emailCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        Person personToEmail \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        String expectedMessage \u003d String.format(EmailCommand.MESSAGE_EMAIL_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alaru"
        },
        "content": "                personToEmail.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertEmailSuccess(expectedMessage, emailCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        assertCommandFailure(emailCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * Returns a {@code EmailCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private EmailCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        EmailCommand emailCommand \u003d new EmailCommand(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        emailCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return emailCommand;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * - the result message matches {@code expectedResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     * - the {@code expectedResult} matches {@code testCommand}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alaru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    private static void assertEmailSuccess(String expectedResult, EmailCommand testCommand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            CommandResult result \u003d testCommand.execute();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            assertEquals(expectedResult, result.feedbackToUser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (UnsupportDesktopException de) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            // Code is running on unsupported OS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            assertEquals(de.getMessage(), Messages.MESSAGE_UNSUPPORTED_DESKTOP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 63,
      "null": 1,
      "-": 38
    }
  },
  {
    "path": "unused/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alaru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Checks if the two given files are binary equivalent."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @param file1 is a file on harddisk"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @param file2 is a different file from @code file1 on the harddisk"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @return whether the two files given are equal"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * @throws IOException when there is an issue reading from either file"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "//Unused due to other teammate\u0027s feature breaking the original intention, originally from FileUtil"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public static boolean isSameFile(File file1, File file2) throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    if (file1.length() !\u003d file2.length()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alaru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    BufferedInputStream bisO \u003d new BufferedInputStream(new FileInputStream(file1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    BufferedInputStream bisN \u003d new BufferedInputStream(new FileInputStream(file2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    byte[] bufferO \u003d new byte[4096];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    byte[] bufferN \u003d new byte[4096];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    int fileBytes1 \u003d bisO.read(bufferO);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisN.read(bufferN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    while (fileBytes1 !\u003d -1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        if (!Arrays.equals(bufferO, bufferN)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bisO.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            bisN.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alaru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        fileBytes1 \u003d bisO.read(bufferO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        bisN.read(bufferN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisO.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    bisN.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 33,
      "null": 1
    }
  },
  {
    "path": "unused/UnsupportDesktopException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alaru"
        },
        "content": " * Represents an error which occurs during execution of a Desktop operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alaru"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "content": "//@@author Alaru-unused"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alaru"
        },
        "content": "public class UnsupportDesktopException extends CommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    public UnsupportDesktopException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alaru"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alaru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alaru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alaru": 7,
      "null": 1,
      "-": 3
    }
  }
]
