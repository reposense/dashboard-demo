[
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d TravelBanker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/TravelBanker-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2103JAN18-T11-B4`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `CS2103JAN2018/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `TravelBankerChangedEvent` when the accounting book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `TravelBankerParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the accounting book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the accounting book data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.TravelBanker.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::convert[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Currency Conversion feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The currency conversion feature is implemented using a currencyConverter repo that was found from github. While the converter itself was resued code, the implementation in the app was done entirely on my own. The converter itself supports quick conversion between two currencies for individual people and total balances. This was neccesary because it is not guaranteed that the people will always be using the same currency"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "In order to allow the currency command to work, I had to create a new parser for currency. The parser `CurrencyCommandParser` parses through the command to check for the index and to/from currency codes. If the index is 0, then we know that the whole balance needs to be converted."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Then those parameters are passed to the currency command class where the constructor is as follows:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "public CurrencyCommand(Index index, String fromCurrency, String toCurrency) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    this.index \u003d index;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    this.fromCurrency \u003d fromCurrency;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    this.toCurrency \u003d toCurrency;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "For the new `CurrencyCommand` class, the execute code is:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "   List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "   converter.setRefreshRateSeconds(86400);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "   if (index.getZeroBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "   if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            double currentPersonBalance \u003d person.getMoney().balance;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            convertedPersonBalance \u003d convertedPersonBalance + currentPersonBalance;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "   } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        convertedPerson \u003d lastShownList.get(index.getZeroBased() - 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        convertedPersonBalance \u003d convertedPerson.getMoney().balance;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "   try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        newAmount \u003d converter.convertCurrency(new BigDecimal(convertedPersonBalance),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Currency.get(fromCurrency), Currency.get(toCurrency));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (CurrencyNotSupportedException cnse) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(\"Currency not supported\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (JSONException jsone) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"JSON Exception\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (StorageException se) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"Storage Exception\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (EndpointException ee) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"Endpoint Exception\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (ServiceException se) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"Service Exception\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "  } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(\"Invalid currency\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "  if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Your total balance in \" + toCurrency + \" is: \" + newAmount);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(convertedPerson.getName() + \"\u0027s balance in \" + toCurrency + \" is: \" + newAmount);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "As we see, the parameters are passed in, if the index is 0, then the balances are added up or else the balance of the individual person is found. Then in the try block, the conversion takes place and then the applicable message is returned."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Future Additions"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "I could further refine the currency converter to allow an amount to be converted into multiple currencies and then you can choose the currency you want. Furthermore, we could add a currency field to the whole addressbook allowing for total changes of the currency of the addressbook allowing users to select their desired currency and allow for more convienience with the addressbook."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "//end::convert[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::posneg[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List Positive/Negative feature"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "The positive/negative feature is faciliatated by two new methods `ListPositiveBalanceCommand` and `ListNegativeBalanceCommand` which both reside inside `commands`. It supports listing out the people with negative balances and positive balances. This is helpful because it will allow the phonebook user to quickly list out people who they owe and who owes them money."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "For the new class I created `ListPositiveBalanceCommand`, this is the code for execute:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(isPositiveBalance());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the code snippet, we update the filtered person list using a new function `isPositiveBalance()`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "`isPositiveBalance()` is implemented as follows:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "public Predicate\u003cPerson\u003e isPositiveBalance(){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    return a -\u003e a.getMoney().balance \u003e\u003d 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "The negative balance works the same way just checking to see if the balance is less than 0."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives Considered"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "For an alternative way, I considered creating a new empty list `positiveList` and then adding to `positiveList` whenever the balance is greater than 0. Then I was going to display positive list. However this did not end up working because I noticed that updating the flitered list needed a predicate function as a paramter which my approach would not have. Therefore I had to consider a different approach that involved a predicate function."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Future Additions"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "I can further refine the function to be much more powerful in filtering and listing out people. For instance, I could allow it to list people with whose names start with a specific letter because in an large addressbook, the user might want to quickly go through the addressbook, not ones who just have a postiive or negative balance."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "The function is a predicate function that checks to see if `a.getMoney().balance\u003e\u003d0` because the function `updateFilteredPersonList()` takes in a predicate parameter. In our function we see the predicate check to see if the person\u0027s money balance is positive and if so, it will be returned."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "//end::posneg[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::undoredo[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the accounting book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the accounting book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the accounting book. The current state of the accounting book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the accounting book to the state before the `add` command executed."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the accounting book to the state after the command is executed)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire accounting book."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the accounting book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/TravelBanker-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::balancefeature[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Balance Feature"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "The balance feature is implemented by the `BalanceCommand` class, which resides in the `Logic` component."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "It extends the Command class and is not an undoable or re-doable command, similar to `list`. The balance command relies on"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "the incorporation of the [MONEY] field, which stores the amount that a specific contact owes to the user,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "or the amount the user owes to the said contact if the balance is negative."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "The following class diagram shows shows where where the BalanceCommand is implemented."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "image::BalanceCommand - Class Diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that cannot be undone such as BalanceCommand are implemented like this:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `balance` command works."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "image::BalanceCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user just launched the application. The TravelBanker will load his contacts and the amount of money owed by/to each"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "will be shown to the screen. The user simply types `balance` or `b`, which will be interpreted by the TravelBook Parser."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Once the command is parsed, it will return a new `BalanceCommand`, which `LogicManager` will call `command`. `LogicManager` will"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "then call the execute() function on command. This method calls on `getBalancefromTravelBanker` gets a `Persons` list through `model`,"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "and thus gets to manipulate the values in the `m/[MONEY]` field of the current accounting book. It then adds all of them"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "and displays to the feedback to the user by returning a `CommandResult` with the found data as argument."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes the execution of the `balance` command."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "image::BalanceCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Making balance not an undoable or re-doable command."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice)**: Make `balance` not an undoable command**."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* **Pros**: There was no need to make balance a re-doable or undoable command since it serves a purpose similar to `list`:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "it only displays information found in TravelBanker, but does not alter it. Thus, the user will not have any issues with this"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "command should he make a mistake: it does not write any data."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* ** Cons**: No significant disadvantage."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2: make `balance` an undoable command.**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* **Pros**: No serious advantage, as explained in Alternative 1. Since the command does not aim to modify data,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "this method is not applicable."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* **Cons**:  Extra layer of complexity that does not give any significant benefit"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How balance command result is displayed."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice)** : Pass the result as a string in the feedback to user."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* **Pros** : Easy to implement and serves the purpose perfectly."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* **Cons** : Value cannot be singled out to apply UI effects, such as colors."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 ** : Single out result to make it modifiable by UI."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* **Pros**: Allow for more pleasant user experience."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* **Cons**: More difficult to implement and not much value added."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "// end::balancefeature[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::itemfield[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add/Delete/Show Item Field"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "The implementation of the item field touches three components: Model, Logic, and Storage."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "For Model component, `Person` class was modified and added with exactly one `UniqueItemList`, where each `UniqueItemList` consists of multiple `Item`s. For each `Item`, it has two strings as private attributes, namely the `ItemName` ()"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "A partial class diagram of the models can be seen below:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "image::itemDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "The `isValidName` and `isValidValue` methods are used to make sure that the user input conforms to the regex for a name and a floating point number:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "In the Logic component, three new command, `ItemShowCommand` `ItemAddCommand` `ItemDeleteCommand`, have been added."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "`ItemAddCommand` and `ItemDeleteCommand` are undoable, because these two commands are implemented by replacing the old person in the `ModelManager` with a newly modified person."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "In ItemAddCommand, `editedPerson` is created from personToEdit with a newly added item."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "In ItemDeleteCommand, however, `editedPerson` is created from personToEdit by deleting a specific item."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Storage was also changed in the development of this feature, as new XML elements had to be stored and parsed using the xml storage system."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "The three types of new XML elements are `\u003citems\u003e` `\u003cname\u003e` and `\u003cvalue\u003e`, and they are organised as following:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "[source,xml]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eJohn Doe\u003c/name\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        ......"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cname\u003etaxi fare\u003c/name\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cvalue\u003e10.5\u003c/value\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cname\u003ehis treat in PizzaHut\u003c/name\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cvalue\u003e23.0\u003c/value\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "To conform to the required changes, the `XmlAdaptedPerson` class is modified. Additionally, a new class `XmlAdaptedItem` is created ."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "The new `XmlAdaptedPerson` class is as follows:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    private String balance;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    ......"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Here is the new `XmlAdaptedItem` class:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedItem {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    ......"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "// end::itemfield[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::sortfeature[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d sort Feature"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "The sort feature is implemented by the `sortCommand` class, which resides in the `Logic` component."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "When `sortCommand` is executed, it would call the `Model` component (`UniquePersonList`) to sort the person list. To specify the sorting order and the keyword to be sorted, two strings would be passed as parameters."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "In support of different keyword, Class `Name`, `Phone`, `Email`, `Address`, `Money` were add with a `compareTo` method for the creation of comparators."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "The sortCommand supports sorting of the filteredList (i.e. list that comes from FindCommand execution)."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "In the current implementation, the sorted result would not be store in the storage."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that cannot be undone such as sortCommand are implemented like this:"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "public class sortCommand extends Command {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... sort logic ..."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes the execution of the `sort` command."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "image::SortCommand_Activity_Diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "// end::sortfeature[]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::moneyfield[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add/Edit Money Field"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "The implementation of the money field spanned four components: Model, Logic, Storage and UI."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "In terms of the Model component, a new Money model was created and the Person and Addressbook models required modifications to integrate the new Money model. The Money model was written to be consistent with the existing Person attribute models like \"Email\" and \"Phone\"."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "A class diagram of the models can be seen below:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "image::MoneyClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "The most important part of the Money model is the constructor:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "public Money(String balance) {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(balance);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "    checkArgument(isValidMoney(balance), MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    this.balance \u003d Double.parseDouble(balance);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    this.value \u003d balance;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "The constructor was implemented using two properties: `Double balance` and `String value`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "This is because the money value is often used as a string for display and as a double for calculations and comparisons."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "The trade-off here was to either store it as just a Double or a String, and cast the value into the right type when needed, or store the value as both a Double and a String."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "The first option forgoes time performance to provide better space performance and keep one single source of truth for each Money object. The second option however provides better time performance, but falls short on space and source of truth data integrity."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Our team decided to take the second option as data integrity issues can be mitigated through comprehensive testing, and because time performance is more important than space complexity at this point time."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "The other notable parts of the Money model are the validation checking function `isValidMoney` and the `equals` function."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "The `isValidMoney` function is used to make sure that the user input conforms to the regex for a number:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "    return test.matches(MONEY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "The `equals` function is mostly used for testing, and provides a way to check if two Money objects have equal values."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "The function makes sure that the objects are of the same type, and share the same `value` property:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "public boolean equals(Object other) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Money // instanceof handles nulls"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 this.value.equals(((Money) other).value)); // state check"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "There were also small modifications to the AddressBook and Person models. These changes mainly have to do with adding Money as a property of Person, and making sure the getters and setters work appropriately for that property."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "In the context of the Logic component, the \"add\" and \"edit\" components had to be modified. In addition, some parser logic had to be modified in order to work with the new money parameter."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "To be more specific, one of the major changes here was the `parseMoney` function which is used to parse the input from the user into a Money object:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "public static Money parseMoney(String money) throws IllegalValueException {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(money);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "    String trimmedMoney \u003d money.trim();"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!Money.isValidMoney(trimmedMoney)) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "    return new Money(trimmedMoney);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "In this implmentation, if an invalid input is received for the money parameter, which is anything that isn\u0027t a Double, an IllegalValueExcpetion is thrown."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "This implementation was chosen as to stay consistent with the rest of the existing fields. In other words, this `parseMoney` function is comparable to the `parseEmail` or `parsePhone` functions, in order to maintain consistency in parser logic."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Storage was also changed in the development of this feature, as a new parameter had to be stored and parsed using the xml storage system."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "The logic for parsing the stored data is very similar to the parsing logic for user input:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "if (!Money.isValidMoney(this.balance)) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "    throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "final Money balance \u003d new Money(this.balance);"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "Then this money object is used to create the Person object:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "return new Person(name, phone, email, address, balance, tags);"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Again, this implementation was chosen to be consistent with the existing logic of parsing the stored xml."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "The changes in the UI were minor, and simply added the money field to the `PersonCard` UI component:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "[source,fxml]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"money\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$money\" /\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "// end::moneyfield[]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, accounting book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/TravelBankerParser.java[`TravelBankerParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/TravelBankerParser.java[`TravelBankerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the accounting book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the accounting book."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/TravelBanker.java[`TravelBanker`] API need to be updated."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/TravelBanker.java[`TravelBanker`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/TravelBanker.java[`TravelBanker`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/TravelBanker.java[`TravelBanker`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `TravelBanker#removeTag(Tag)`."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/TravelBanker.java[`TravelBanker`]. This may cause some tests to fail. See issue  https://github.com/se-edu/TravelBanker-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your accounting book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/TravelBankerSystemTest.java[`TravelBankerSystemTest#assertCommandBoxShowsDefaultStyle() and TravelBankerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the accounting book."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the accounting book is updated."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleTravelBankerChangedEvent(TravelBankerChangedEvent)`] to update the number of persons whenever there are new changes to the TravelBanker."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/TravelBankerSystemTest.java[`TravelBankerSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the accounting book to the cloud. However, the current implementation of the application constantly saves the accounting book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the accounting book storage."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupTravelBanker(ReadOnlyTravelBanker)`, so that the accounting book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/TravelBankerStorage.java[`TravelBankerStorage`] interface."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlTravelBankerStorage.java[`XmlTravelBankerStorage`] class."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/TravelBanker-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `TravelBanker`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/TravelBankerParser.java[`TravelBankerParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/TravelBankerParserTest.java[`TravelBankerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/TravelBankerParser.java[`TravelBankerParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/TravelBankerParserTest.java[`TravelBankerParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `TravelBanker.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonTravelBanker.xml`, `typicalPersonsTravelBanker.xml`, `validTravelBanker.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/TravelBanker-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::productScope[]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "// end::productScope[]"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::productScope[]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Articho28"
        },
        "content": "* has a need to manage finances with fellow contacts"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Articho28"
        },
        "content": "* has a need to keep track of personal balance"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Articho28"
        },
        "content": "* has a need to keep track of transactions between contacts"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "* travels with a group and lends money/borrows money"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need of finding nearby financial institutions to repay contacts."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Articho28"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Articho28"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "* manage your informal financial transactions accurately than relying on memory."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "* manage your finances in a more organized manner than relying on a text-editing app, spreadsheet, or memory."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "* update your cumulative total automatically, which removes the need of re-adding the numbers every time a new transaction is added,"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "as seen in traditional book-keeping methods."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "* find a nearby ATM as soon as a contact is loaded, which removes the need to switch apps when wanting to settle a debt."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "* list the contacts that owe you money or to which you owe money, thus removing the need to manually filter out the contacts you are looking for."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "* lists all the contacts according to specified tags, removing the need to identify amounts owed by groups of people manually."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "// end::productScope[]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Feature contribution"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::featureContribution[]"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "* *Artsiom Skliar*"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "** *Major Enhancement*: Incorporate map functionality to the TravelBanker. MapCommand shows the nearest ATM from the person\u0027s location."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "Also, incorporating balance and min commands, which calculates your overall balance as registered in TravelBanker."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "This value will tell the user if he owes more money than he\u0027s borrowed or vice-versa. This is essential to the product as"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "TravelBanker relies on the need of the user to keep track of his informal finances efficiently and accurately."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "The ability to see view your overall balance is thus necessary as it provides insight to the user on his general"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "financial situation. The min and max commands contribute to this goal by listing the largest amounts owed and lent. The"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "map functionality also shows the user how he can settle his debts quickly."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "** *Minor Enhancement*: created aliases for every command received by TravelBanker to increase its efficiency."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "This is important to the product as it aims to be quick and efficient. Shortcuts for every command (except exit to"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": " avoid accidents) allows for a quicker and smoother user experience, thus making book-keeping quick and easy. Incorporate"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": " a `searchtag` command to list only people carrying specific tags."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "// end::featureContribution[]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "* *Eric Zhou*"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "** *Major Enhancement*: incorporating various listing features which will can filter the list to list out people who owe you a negative amount or a positive amount."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "This is essential to the product as a user will be able to quickly see who owes them money or who they owe money to."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "The ability to quickly filter out the list important because in big lists, it might not be the easiest to see what each person owes. With the feature, it increases efficiency for large addressbooks."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "** *Minor Enhancement*: added negative value allowance for balance to allow people to see the total amount they owe or need to be paid."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "This is important to the product as people will not always just owe money, sometimes people might need to pay the user, this feature allows that to be accounted for."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "** *Minor Enhancement*: case insensitivty of commands."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "This aims to help add ease to the user because the user will not need to type commands in specific way so Add and add will both add a new person."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "* *Chen Chongsong*"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "** *Major Enhancement*: Implementing a new model called \"item\" field, which records all items related to a person in the contact list. An \"item\" has its name and its money value. For example, someone may owe the user an item called \"taxiFare\" and worth \"100\" dollars."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "ItemShowCommand, ItemAddCommand, ItemDeleteCommand are implemented, and the user is able to check items, add items and delete them. The storage XML format has been modified accordingly."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "This new feature is important because this allows the user to check reasons for owing money, in case the user forgets them."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "** *Minor Enhancement*: implementing a SortCommand to sort contact list according to balance, name, etc."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "If name sorted, the user would be able to search for certain person quickly and alphebatically. This is useful because sometimes the user cannot remember the exact names, and therefore, fail to search names with the FindCommand."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "If balance sorted, the user would be enabled to decide the order of returning money in the future. For example, the user can choose to firstly return money to \"small creditors\" (because the user owes little money to them, and he can pay them off easily)"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "* *Prian Kuhanandan*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "** *Major Enhancement*: Implementing the money field, and allowing for existing commands to use the field such as the add and edit commands."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "This is important because this allows for all the money related features that are essential to our use cases, such as the balance feature."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "** *Minor Enhancement*: Create a new command to identify the person that owes the user the most money."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "This is important to the product, because the user needs easy ways to interact with the money field that we have added. This is one minor way to use the field and will provide the user with a lot of value as it will help with locating his or her biggest debtor."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the accounting book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *`|user | redo or undo a command I just typed in|"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::userStories[]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user | add/update/settle an amount of money that a contact owes me |"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user | check my overall balance |"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user | see which contacts owe me money |"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user | see to which of my contacts do I owe money |"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | see which of my contacts owes me the most money. |"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | see to which of my contacts do I owe the most money. |"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "| `* *` |user | see a list of people with specific tags | have an overview of the money a group owes me"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "| `*` |user | see the address of a user|"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "// end::userStories[]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | see for which items/reasons do I owe a contact / a contact owes me |"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | add an item/reason under a specified person |"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | delete an item/reason from a specified person |"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::userStories[]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user | choose the currency in which I want to see my balance displayed |"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | convert my balance into a different currency |"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user | calculate the amount I am owed/I owe with an applied interest rate |"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *` |user | have a map functionality | find the nearest ATM to settle my accounts"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "// end::userStories[]"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user | sort the contact list according to my wishes |"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user | split a bill evenly among multiple people |"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user | remove certain tags from a person |"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Articho28"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `TravelBanker` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "2.  TravelBanker shows a list of persons"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "4.  TravelBanker deletes the person"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. TravelBanker shows an error message."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: To Split a Bill Among Multiple People"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to new a bill"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "2.  TravelBanker shows the new bill"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests selects who the bill will be splited among"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "4.  TravelBanker shows who the bill will be splited among in the contact details"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. Specified people does not exist."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. TravelBanker shows an error message."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: To See Who Owes Me Money"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to see people who owes the user Money"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "2.  TravelBanker shows the list of people"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. No people owe the user money."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. TravelBanker shows an message showing that the list is empty."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should respond within 3 seconds, even for more intensive procedures such as balance calculation."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should update its records immediately after the user makes an update."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should provide helpful and clear messages to the user when errors occur."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should preserve all data and user preferences when software updates are installed."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "*  ..."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "*  ..."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 1483,
      "Articho28": 7
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d TravelBanker- User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-T11-B4/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2103JAN18-T11-B4`      Since: `Jan 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "TravelBanker (TB) is for those who *prefer to use a desktop app for managing the money owed by your fellow travellers *. More importantly, TB is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TB can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `TravelBanker.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your accounting book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the accounting book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Except for `exit`, you can also use the first letter of each command to type faster (e.g. `l` for `list`)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` or `h`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add` or  `a`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the accounting book. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS m/BALANCE [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS m/BALANCE [t/TAG]...`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::balanceExplained[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "A positive balance means that the *contact* owes the *user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "A negative balance means the *user* owes the *contact*."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "// end::balanceExplained[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` m/23.78"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal m/0.0`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal m/-25.0`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list` or `l`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the accounting book. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `list` or `l`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit` or `e`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the accounting book. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [m/MONEY] [t/TAG]...`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [m/MONEY] [t/TAG]...`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Articho28"
        },
        "content": "* `edit 2 n/Betsy Crower t/` or `e 2 n/Betsy Crower t/`+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find` or `f`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete` or `d`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the accounting book. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `delete INDEX` or `d INDEX`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the accounting book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Articho28"
        },
        "content": "`d 1` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select` or `s`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the last person listing and address displayed. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `select INDEX` or `s INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person at the specified `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the accounting book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history` or `hi`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `history` or `hi`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` or `u`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the accounting book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the accounting book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Articho28"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Articho28"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` or `c`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the accounting book. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Articho28"
        },
        "content": "Format: `clear` or `c`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "TravelBanker data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::balance[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Checking overall balance: `balance` or `b` [Since v1.2]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Calculates your total balance. This value shows you the overall state of your finances: how much you owe minus"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": " how much you\u0027re owed. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `balance` or `b`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "A positive balance means the user *is owed* money while a negative balance means the user generally *owes* money."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "// end::balance[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::debt[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Seeing all the contacts that owe you money: `debt` or `de` [Since v1.2]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the contacts that owe you an amount."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `debt` or `de`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "// end::debt[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::lend[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Seeing all the contacts to which you owe money: `lend` or `le` [Since v1.2]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the contacts that owe you an amount."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `lend` or `le`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "// end::lend[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::removetag[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Remove Tags: `removetag` or `rt` [Since v1.2]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Remove Tags from a specific person in the TravelBanker. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `removetag INDEX [t/TAG]...` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `rt INDEX [t/TAG]...`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `removetag 1 t/owesMoney t/friends` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Remove the tags `owesMoney` and `friends` from the first person."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "// end::removetag[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Seeing which contact owes you the most: `maxlent` or `ml` [Since v1.2]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Lists the contact which owes you the most money. If two contacts owe the same amount,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "only one will be selected. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `maxlent` or `ml`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::min[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Seeing which contact owes you the least: `maxborrowed` or `mb`[Since v1.2]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the contact to which you owe the most money. A message appears if user does not have any debts. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the same amount is owed to two contacts, only one will be selected. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `maxborrowed` or `mb`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "// end::min[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sorting all persons: `sort` or  `so` [Since v1.2]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts all persons in ascendingly or descendingly, ordering by the specified keywords. +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort KEYWORD_PREFIX/ORDER` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `so KEYWORD_PREFIX/ORDER`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* ORDER can only be asc or desc."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* KERWORD_PREFIX can be n/ p/ e/ a/ t/ m/"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* When KEYWORD_PREFIX is specified as n/ p/ e/ or a/, corresponding filed will be sorted alphabetically."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* When KEYWORD_PREFIX is specified as t/, people will be sorted according to the number of tags."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* When KEYWORD_PREFIX is specified as m/, people will be sorted according to the value of money filed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort n/asc`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* `so m/desc`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::split[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Splitting a bill: `split` or  `sp` [Since v1.3]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Splits a bill among multiple people, specified by their indices. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `split INDEX1 [INDEX2...] m/MONEY` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sp INDEX1 [INDEX2...] m/MONEY`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `split 1 2 m/200`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `sp 1 2 3 m/400.00`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "// end::split[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::wipe[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clear up everyone\u0027s balance: `wipe` or `w` [Since v1.3]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Wipes everyone\u0027s balances to 0.0 +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `wipe` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `w`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "// end::wipe[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Searching for the nearest ATM : `map` or `mp` [Since v1.3]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Displays a search for the nearest ATM in the browser panel. The map will launch by default upon"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "opening the app. If the browser panel displays something different, simply type `map` to view the"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "search once more."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `map` or `mp`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "This feature relies on internet connectivity. Please make sure you have a working internet connection"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "to ensure proper connectivity."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Settling up your balance with a contact: `settle` or `stl`[Since v1.3]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the balance of the specified contact to 0. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `settle INDEX`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::item[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Showing items related to a person : `itemshow` or `is` [Since v1.4]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Show all items related to a person (specified by INDEX). +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `itemshow INDEX` or `is INDEX`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "`itemshow 2` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Shows items related to the 2nd person in the accounting book."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "`itemshow 1` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Shows item related to the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a New Item : `itemadd` or `ia` [Since v1.4]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Attaching a new item to a specified person. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `itemadd INDEX n/ITEM_NAME m/MONEY` or `ia INDEX n/ITEM_NAME m/MONEY`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* To view the newly added item, please use the `itemshow` command!"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* `itemadd 2 n/taxiFare m/10.0`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete an Existing Item : `itemdelete` or `id` [Since v1.5rc]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Deleting an item from a specified person. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `itemdelete PERSON_INDEX ITEM_INDEX` or `id PERSON_INDEX ITEM_INDEX`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* The index of person refers to the one shown in the most recent listing."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* The index of item refers to the one shown in the `itemshow` result."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* The indices *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* `itemdelete 1 2`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* This deletes the second item from the first person in the contact list."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "// end::item[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::settle[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Settling up your balance with a contact: `settle` or `stl`[Since v1.3]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the balance of the specified contact to 0. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `settle INDEX`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "// end::settle[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::remind[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Remind a contact to pay their balance: `remind` or `rm`[Since v1.4]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Opens the default email client with a generated email to the contact with the balance in the message."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remind INDEX`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "// end::remind[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::selectAddress[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View a contact\u0027s address on the map with `select`, `maxborrowed` or `maxlent` [Since v1.4]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "Searches for the contact\u0027s address in the map displayed once that contact is selected. To show the ATM map"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "once more, refer to `map` command."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `select INDEX`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `maxborrowed`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `maxlent`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "This feature relies on internet connectivity. Please make sure you have a working internet connection"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "to ensure proper functionality."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "// end::selectAddress[]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::convert[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converts your balance in a desired currency: `convert` or `cv` [Since v1.4]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Converts an entries certain balance in a currency of your choice. Not a real time conversion but a good approximation"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Code adapted and list of supported currencies are avalaible at: https://github.com/Ritaja/java-exchange-rates/blob/master/README.md"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `convert` INDEX FROM_CURRENCY TO_CURRENCY or `cv` INDEX FROM_CURRENCY TO_CURRENCY"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `convert 2 USD JPY`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `convert 1 SGD USD`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "image::convert_image.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "// end::convert[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::guiColorTag[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d All similar tags now have a unique color [Since v1.5rc]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "All similar tags found in TravelBanker now have a color specific to it. Tags can be used to associate"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "currencies to amounts owed by contacts."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "// end::guiColorTag[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::searchTag[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List of all contacts with a specific tag [Since v1.5rc]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "User can have a list of all contacts that contain the specified tags. This enables various filtering abilities (e.g."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "display only contacts that are friends. Display only contacts which owe you in SGD.) A contact must contain"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "all the selected tags to be picked."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `searchtag t/friends`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `st t/colleagues t/friends`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "// end::searchTag[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::interest[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applies an interest rate to your balance: `interest FACTOR` or `i FACTOR` [Coming in v2.0]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Displays your balance with an applied interest rate."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `interest FACTOR` or `i FACTOR`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "// end::interest[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::transaction[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Report a transaction and automatically update a contact\u0027s balance accordingly: `transaction` or `t` [Since v1.5rc]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the contacts balance with the correct new balance after the transaction."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "For TRANSACTION_AMOUNT, a positive number represents money received from the contact and a negative number represents"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "money paid to the contact."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `transaction INDEX TRANSACTION_AMOUNT`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "// end::transaction[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::trip[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Shows on which trip a balance was established from user and contact : `trip [DESTINATION]` or `t` [Coming in v2.0]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Each contact will have a [DESTINATION] field to keep track of where a transaction between the"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "user and the contact took place."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `trip [DESTINATION]`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "// end::trip[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::colorTag[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Change the color of a specific tag in the address book [Coming in V2.0]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "The user can select the color he wants a specific tag to be."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `colortag c/COLOR t/TAGS` or `ct c/COLOR t/TAGS`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "// end::colorTag[]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous accounting book folder."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* *Balance* : `balance`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* *Map*: `map`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::removetag[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* *RemoveTag* : `removetag INDEX [t/TAG]...`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "// end::removetag[]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* *SearchTag* : `searchtag t/TAG`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `searchtag t/classmates t/friends`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* *Sort* : `sort KEYWORD_PREFIX/ORDER`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* *Split* : `split INDEX1 [INDEX2...] m/MONEY`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* *ItemShow* : `itemshow INDEX`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* *ItemAdd* : `itemadd INDEX n/ITEM_NAME m/MONEY`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* *ItemDelete* : `itemdelete PERSON_INDEX ITEM_INDEX`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* *MaxLent* : `maxlent` or `ml`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* *MaxBorrowed* : `maxborrowed` or `mb`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* *Currency* : `convert c/`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `currency INDEX TO FROM"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 541,
      "Articho28": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowMapRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * An event requesting to view a map showing the nearest ATM."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class ShowMapRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Articho28": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEY + \"MONEY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEY + \"10 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BalanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Handles the balance command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class BalanceCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"balance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"b\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Shown balance.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Displays your overall balance\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private static double calculatedBalance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private static DecimalFormat twoDecimalPlaces \u003d new DecimalFormat(\"0.00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static DecimalFormat getFormatTwoDecimalPlaces() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return twoDecimalPlaces;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static double getCalculatedBalance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return calculatedBalance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        calculatedBalance \u003d getBalanceFromTravelBanker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + \"Your balance is \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + twoDecimalPlaces.format(calculatedBalance) + \".\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public double getBalanceFromTravelBanker() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        double accumulator \u003d 0.00;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            double currentPersonBalance \u003d person.getMoney().balance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            accumulator \u003d accumulator + currentPersonBalance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return accumulator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CurrencyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "software-1234"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.api.CurrencyConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.api.CurrencyConverterBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.api.CurrencyNotSupportedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.endpoint.EndpointException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.service.ServiceException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.storage.StorageException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.util.Currency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.util.Strategy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class CurrencyCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"convert\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"cv\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \": Converts the balance of the person identified by the index number into a new \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \"currency chosen by the user. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \"[Current Currency Symbol]  \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \"[New Currency Symbol]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" SGD\" + \" USD\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_CURRENCY_NOT_SUPPORTED \u003d \"The currency you have provided is not supported.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is your balance in the new currency\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private String fromCurrency;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private String toCurrency;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Person convertedPerson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Double convertedPersonBalance \u003d 0.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private BigDecimal newAmount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private CurrencyConverter converter \u003d new CurrencyConverterBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            .strategy(Strategy.YAHOO_FINANCE_FILESTORE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            .buildConverter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public CurrencyCommand(Index index, String fromCurrency, String toCurrency) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        this.fromCurrency \u003d fromCurrency;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        this.toCurrency \u003d toCurrency;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        converter.setRefreshRateSeconds(86400);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        if (index.getZeroBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                double currentPersonBalance \u003d person.getMoney().balance;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                convertedPersonBalance \u003d convertedPersonBalance + currentPersonBalance;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            convertedPerson \u003d lastShownList.get(index.getZeroBased() - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            convertedPersonBalance \u003d convertedPerson.getMoney().balance;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            newAmount \u003d converter.convertCurrency(new BigDecimal(convertedPersonBalance),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            Currency.get(fromCurrency), Currency.get(toCurrency));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (CurrencyNotSupportedException cnse) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new CommandException(\"Currency not supported\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (JSONException jsone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new AssertionError(\"JSON Exception\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (StorageException se) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new AssertionError(\"Storage Exception\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (EndpointException ee) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new AssertionError(\"Endpoint Exception\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (ServiceException se) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new AssertionError(\"Service Exception\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new CommandException(\"Invalid currency\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            return new CommandResult(\"Your total balance in \" + toCurrency + \" is: \" + newAmount);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            return new CommandResult(convertedPerson.getName() + \"\u0027s balance in \" + toCurrency + \" is: \" + newAmount);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "software-1234"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "software-1234": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"BALANCE] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MONEY + \"43.00\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Money updatedMoney \u003d editPersonDescriptor.getMoney().orElse(personToEdit.getMoney());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedPhone,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedEmail,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedAddress,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedMoney,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getItems());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Money money;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setMoney(toCopy.money);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.money, this.tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author pkuhanan"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        public void setMoney(Money money) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            this.money \u003d money;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        public Optional\u003cMoney\u003e getMoney() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return Optional.ofNullable(money);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getMoney().equals(e.getMoney())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 9,
      "-": 253,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"h\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"hi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ItemAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Attach a new item to a specified person"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemAddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemadd\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"ia\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Attaching a new item to a specified person. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_NAME + \"ITEM_NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_MONEY + \"MONEY\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_NAME + \"taxiFare \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_MONEY + \"30\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_ADD_ITEM_SUCCESS \u003d \"Item Added for Person %1$s.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"To view all items, use \\\"itemshow\\\" command!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGUMENT \u003d \"The Argument is Invalid!\" + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + Item.MESSAGE_ITEMNAME_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + Item.MESSAGE_ITEMVALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Item item;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param index of person in the filtered person list to whom a new item will be attached"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemAddCommand(Index index, String itemName, String itemValue) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.item \u003d new Item(itemName, itemValue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target person cannot be duplicate\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_ITEM_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        editedPerson \u003d getEditedPerson(personToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code person}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * but with a updated item list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person getEditedPerson(Person person) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert person !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // references the original objects"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Name name \u003d person.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Phone phone \u003d person.getPhone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Email email \u003d person.getEmail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Address address \u003d person.getAddress();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Money money \u003d person.getMoney();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d person.getTags();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cItem\u003e items \u003d getAppendedItemList(person.getItems());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // returns a new Person based mainly on references to original information"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Person(name, phone, email, address, money, tags, items);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Create and returns an updated Item List"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * The new item would be appended to the end of the original Item List"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ArrayList\u003cItem\u003e getAppendedItemList(ArrayList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert items !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cItem\u003e appendedItemList \u003d new ArrayList\u003c\u003e(items);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        appendedItemList.add(this.item);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return appendedItemList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof ItemAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((ItemAddCommand) other).targetIndex)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.item.equals(((ItemAddCommand) other).item)); // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ItemDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Delete an item from a specified person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemDeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemdelete\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"id\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deleting an item from a specified person.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: PERSON_INDEX ITEM_INDEX\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"PERSON_INDEX and ITEM_INDEX should be POSITIVE integers!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"This example command deletes the second item from the first person.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_ADD_ITEM_SUCCESS \u003d \"Items Deleted for Person %1$s.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGUMENT \u003d \"The Argument is Invalid!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Index indexPerson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Index indexItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param indexPerson The index of person in the filtered person list whose item the user wants to delete"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param indexItem The index of item the user wants to delete"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemDeleteCommand(Index indexPerson, Index indexItem) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(indexPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(indexItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.indexPerson \u003d indexPerson;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.indexItem \u003d indexItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target person cannot be duplicate\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_ITEM_SUCCESS, indexPerson.getOneBased()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (indexPerson.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        personToEdit \u003d lastShownList.get(indexPerson.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            editedPerson \u003d getEditedPerson(personToEdit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(ive.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code person}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * but with an updated item list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person getEditedPerson(Person person) throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert person !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // references the original objects"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Name name \u003d person.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Phone phone \u003d person.getPhone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Email email \u003d person.getEmail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Address address \u003d person.getAddress();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Money money \u003d person.getMoney();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d person.getTags();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (indexItem.getZeroBased() \u003e\u003d person.getItems().size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_INVALID_ITEM_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cItem\u003e items \u003d getItemRemovedItemList(person.getItems());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // returns a new Person based mainly on references to original information, but with an updated item list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Person(name, phone, email, address, money, tags, items);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Create and returns an updated Item List"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * where the target Item will be removed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ArrayList\u003cItem\u003e getItemRemovedItemList(ArrayList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert items !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cItem\u003e itemRemovedItemList \u003d new ArrayList\u003c\u003e(items);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        itemRemovedItemList.remove(indexItem.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return itemRemovedItemList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof ItemDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.indexPerson.equals(((ItemDeleteCommand) other).indexPerson)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.indexItem.equals(((ItemDeleteCommand) other).indexItem)); // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ItemShowCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Show all items related to a specified person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * The person is identified using it\u0027s last displayed index from the TravleBanker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemShowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemshow\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"is\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \": Show all items related to a person (specified by INDEX).\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_SHOW_ITEM_SUCCESS \u003d \"Items Showed for Person: %d.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Money Due to Unknown Items: %.2f\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemShowCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        UniqueItemList items \u003d targetPerson.getUniqueItemList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Double reasonUnknownAmount \u003d targetPerson.getReasonUnknownAmount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(getResultString(items, reasonUnknownAmount));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private String getResultString(UniqueItemList items, Double reasonUnknownAmount) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return String.format(MESSAGE_SHOW_ITEM_SUCCESS, targetIndex.getOneBased(), reasonUnknownAmount)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                + items.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof ItemShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((ItemShowCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"l\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPositiveBalanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "software-1234"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "software-1234"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "software-1234"
        },
        "content": " * Lists all persons with positive balances in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "software-1234"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class ListPositiveBalanceCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lend\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"le\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons who owe you money\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model.updateFilteredPersonList(isPositiveBalance());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public Predicate\u003cPerson\u003e isPositiveBalance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return a -\u003e a.getMoney().balance \u003e 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "software-1234": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowMapRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Shows a map and searchs for the nearest ATM."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class MapCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"map\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"mp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Map Shown\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        EventsCenter.getInstance().post(new ShowMapRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Articho28": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MaxCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Finds the person that owes you the most money."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class MaxCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"maxlent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"ml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The contact who owes you the most money is: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person that owes the most money. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            + \"If two contacts owe the same amount, only one will be selected.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Double highestDebt \u003d 0.0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            Person person \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            if (person.getMoney().balance \u003e highestDebt) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                highestDebt \u003d person.getMoney().balance;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + lastShownList.get(index.getZeroBased()).getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MinCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Finds the person to which you owe the most money"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class MinCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"maxborrowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"mb\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOUND \u003d \"The contact to which you owe the most money is: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_RESULT \u003d \"Good news! You don\u0027t owe any money.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person to which you owe the most money \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private CommandResult result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public CommandResult getResult() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void setResult(CommandResult result) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        double lowestDebt \u003d 0.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            Person person \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            if (person.getMoney().balance \u003c lowestDebt) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                lowestDebt \u003d person.getMoney().balance;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            if (lowestDebt \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                result \u003d new CommandResult(MESSAGE_SUCCESS_NO_RESULT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                result \u003d new CommandResult(MESSAGE_SUCCESS_FOUND + lastShownList.get(index.getZeroBased()).getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Helps the user send a reminder by email to the contact"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"rm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Generated email for contact: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \" does not owe you any money\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person that owes the most money \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @param index of the person in the filtered person list to remind"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public RemindCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        if (person.getMoney().balance \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                Desktop desktop;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                if (Desktop.isDesktopSupported()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                        \u0026\u0026 (desktop \u003d Desktop.getDesktop()).isSupported(Desktop.Action.MAIL)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    String uri \u003d \"mailto:\" + person.getEmail()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                            + \"?subject\u003dReminder:%20Please%20pay%20me%20back\u0026body\u003dPlease%20pay%20me%20back:%20$\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                            + person.getMoney();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    URI mailto \u003d new URI(uri);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    desktop.mail(mailto);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    throw new AssertionError(\"No email client configured\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.getName() + \"\u003c\" + person.getEmail() + \"\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                throw new AssertionError(\"Problem sending email\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new CommandResult(person.getName() + MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class RemoveTagCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removetag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"rt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the specific tags of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_REMOVE_TAG_SUCCESS \u003d \"Remove Tags for Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_EXIST \u003d \"Your Input Contains Non-existent Tag(s)!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public RemoveTagCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_TAG_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(MESSAGE_TAG_NOT_EXIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Remove all tags within {@code editPersonDescriptor} from the original tag list of personToEdit"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static Person createEditedPerson("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            Person personToEdit, EditPersonDescriptor toBeRemovedTagsDescriptor) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Address updatedAddress \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Money updatedMoney \u003d personToEdit.getMoney();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e toBeRemovedTags \u003d toBeRemovedTagsDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        checkArgument(allTagsExistOriginally(toBeRemovedTags, originalTags), MESSAGE_TAG_NOT_EXIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d getUpdatedTags(toBeRemovedTags, originalTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedMoney, updatedTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static Set\u003cTag\u003e getUpdatedTags(Set\u003cTag\u003e toBeRemovedTags, Set\u003cTag\u003e originalTags) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (Tag t: originalTags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            if (!toBeRemovedTags.contains(t)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                updatedTags.add(t);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return updatedTags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * make sure all tags originally exist in the person info"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param toBeRemovedTags"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param originalTags"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static boolean allTagsExistOriginally(Set\u003cTag\u003e toBeRemovedTags, Set\u003cTag\u003e originalTags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (Tag tag: toBeRemovedTags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            if (!originalTags.contains(tag)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!(other instanceof RemoveTagCommand)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand e \u003d (RemoveTagCommand) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Lists all the people that contain specified tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class SearchTagCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchtag\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"st\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": finds all the people having the specified tags. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            + \"Person must have all the provided tags to be selected. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            + PREFIX_TAG + \"TAG...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Found Persons with tags: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No results found with the tag: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private final Set\u003cTag\u003e tagsToFind;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * This returns a SearchTagCommand that is ready to be executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param tags  that need to be colored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public SearchTagCommand(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        this.tagsToFind \u003d tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public Set\u003cTag\u003e getTagsToFind() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return tagsToFind;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * This command lists all the persons which match the search criteria provided by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model.updateFilteredPersonList(personHasTags(tagsToFind));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        int result \u003d model.getFilteredPersonList().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        String tagsFormatted \u003d formatTagsFeedback(tagsToFind);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        if (result \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + tagsFormatted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + getMessageForPersonListShownSummary(result));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    + tagsFormatted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * This function returns person Predicate that indicates if a given has the tags we are"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * looking for."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static Predicate\u003cPerson\u003e personHasTags(Set\u003cTag\u003e tagsToCheck) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return person -\u003e person.getTags().containsAll(tagsToCheck);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Formats the tags to a string to display clearly to user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param tagsToFormat"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static String formatTagsFeedback(Set\u003cTag\u003e tagsToFormat) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        String tagsFormatted \u003d tagsToFormat.toString()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                .replace(\"[\", \" \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                .replace(\"]\", \" \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                .replace(\"[,\", \" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return tagsFormatted;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Articho28": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Sort all persons in address book in order."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Keywords will be given by user through arguments."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Both ascending and descending order is supported."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"so\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all persons in ascendingly or descendingly, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"ordering by the specified keywords.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: KEYWORD_PREFIX/ORDER ...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" n/desc\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \" m/asc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String SORT_ORDER_ASCENDING \u003d \"asc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String SORT_ORDER_DESCENDING \u003d \"desc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public final String sortKey;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public final String sortOrder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public SortCommand(String key, String order) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.sortKey \u003d key;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.sortOrder \u003d order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        model.sortUniquePersonList(sortKey, sortOrder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.sortKey.equals(((SortCommand) other).sortKey)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.sortOrder.equals(((SortCommand) other).sortOrder)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SplitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.lang.Math.round;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Split a bill evenly among selected people."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SplitCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"split\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"sp\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Split a bill evenly among specified people. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Parameters: INDEX1 [INDEX2...] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_MONEY + \"MONEY\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example1: \" + COMMAND_WORD + \" 1 2 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_MONEY + \"200\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + \"Example2: \" + COMMAND_SHORTCUT + \" 1 2 3 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            + PREFIX_MONEY + \"400.00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_SPLIT_BILL_SUCCESS \u003d \"Bill Split Successfully Among Selected People!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INDEX \u003d \"Duplicate Indices Found in Parameters!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final ArrayList\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ArrayList\u003cPerson\u003e peopleToEdit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ArrayList\u003cPerson\u003e editedPeople;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final double bill;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param indices of people in the filtered person list to settle the bill"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public SplitCommand(ArrayList\u003cIndex\u003e indices, double bill) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        peopleToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        editedPeople \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.bill \u003d bill;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            for (int i \u003d 0; i \u003c indices.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                model.updatePerson(peopleToEdit.get(i), editedPeople.get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target people cannot be duplicate\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new AssertionError(\"The target people cannot be missing\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new CommandResult(MESSAGE_SPLIT_BILL_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!CollectionUtil.elementsAreUnique(indices.stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .map(Index-\u003eIndex.getZeroBased())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .collect(Collectors.toList()))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            Person person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            peopleToEdit.add(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            editedPeople.add(getSettledPerson(person));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * but with a updated balance"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Person getSettledPerson(Person personToEdit) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Name name \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Phone phone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Email email \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Address address \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Money money \u003d getSettledMoney(personToEdit.getMoney());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Person(name, phone, email, address, money, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Create and returns an updated Money Info"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * The updated Money would be rounded to 2 decimal places"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Money getSettledMoney(Money moneyToEdit) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert moneyToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        double updatedBalance \u003d moneyToEdit.toDouble() + bill / indices.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        updatedBalance \u003d round(updatedBalance * 100.00) / 100.00;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Money(Double.toString(updatedBalance));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!(other instanceof SplitCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        SplitCommand o \u003d (SplitCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return bill \u003d\u003d o.bill"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 indices.equals(o.indices);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TransactionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Updates the balance according to the reported transaction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class TransactionCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transaction\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"t\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the balance according to the transaction. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            + \"Positive means money received from the contact and negative means money paid to the contact \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) TRANSACTION_AMOUNT (must be an double) \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_PERSON_SUCCESS \u003d \"Balance updated for: \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private final Double amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private String newBalance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @param index of the person in the filtered person list to settle"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @param amount of money paid in the transaction"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public TransactionCommand(Index index, Double amount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new AssertionError(\"The target person cannot be duplicate\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return new CommandResult(MESSAGE_TRANSACTION_PERSON_SUCCESS + editedPerson.getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        newBalance \u003d Double.toString(personToEdit.getMoney().balance - amount);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        editedPerson \u003d getPersonAfterTransaction(personToEdit, newBalance);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * but with a 0 balance"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private static Person getPersonAfterTransaction(Person personToEdit, String newBalance) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Name name \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Phone phone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Email email \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Address address \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Money money \u003d new Money(newBalance);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return new Person(name, phone, email, address, money, tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "Articho28": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WipeBalancesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "software-1234"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "software-1234"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "software-1234"
        },
        "content": " * Handles the balance command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "software-1234"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class WipeBalancesCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"wipe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \"w\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Wiped all balances\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Wipes all balances\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Money cleared \u003d new Money(\"0.0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        Person oldPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            for (Person p : model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                oldPerson \u003d p;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                p.setMoney(cleared);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                p.clearItems();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                model.updatePerson(oldPerson, p);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "software-1234": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.BalanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ItemAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ItemDeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ItemShowCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListNegativeBalanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListPositiveBalanceCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MapCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MaxCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MinCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchTagCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SettleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.TransactionCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.WipeBalancesCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case AddCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case EditCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case SelectCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case DeleteCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case ClearCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case CurrencyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CurrencyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case CurrencyCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CurrencyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case WipeBalancesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new WipeBalancesCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case WipeBalancesCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new WipeBalancesCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case FindCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case ListCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListPositiveBalanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListPositiveBalanceCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListPositiveBalanceCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListPositiveBalanceCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListNegativeBalanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListNegativeBalanceCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListNegativeBalanceCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListNegativeBalanceCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case HistoryCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case HelpCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case UndoCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case RedoCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author Articho28"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case BalanceCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new BalanceCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case BalanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new BalanceCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author pkuhanan"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case MaxCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new MaxCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case MaxCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new MaxCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            //@@author Articho28"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case MinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new MinCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case MinCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new MinCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author pkuhanan"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case SettleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new SettleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case SettleCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new SettleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author chenchongsong"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case RemoveTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new RemoveTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case RemoveTagCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new RemoveTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case SplitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new SplitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case SplitCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new SplitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case SortCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemShowCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemAddCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        case ItemDeleteCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author Articho28"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case MapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new MapCommand();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case MapCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new MapCommand();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author pkuhanan"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new RemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case RemindCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new RemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case TransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new TransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        case TransactionCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new TransactionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author Articho28"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case SearchTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new SearchTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        case SearchTagCommand.COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new SearchTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 37,
      "pkuhanan": 26,
      "-": 141,
      "Articho28": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CurrencyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "software-1234"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import com.ritaja.xchangerate.util.Currency;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "software-1234"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class CurrencyCommandParser implements Parser\u003cCurrencyCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CurrencyCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * and returns an CurrencyCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public CurrencyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        String fromCurrency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        String toCurrency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        Index currencyIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            String[] currencyKeywords \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            if (Integer.parseInt(currencyKeywords[0]) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                currencyIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                currencyIndex \u003d Index.fromZeroBased(Integer.parseInt(currencyKeywords[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            if (currencyIndex.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            fromCurrency \u003d currencyKeywords[1].toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            toCurrency \u003d currencyKeywords[2].toUpperCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            //@@author Articho28"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            Currency fromFormattedCurrency \u003d Currency.get(fromCurrency);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            Currency toFormattedCurrency \u003d Currency.get(toCurrency);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            if (fromFormattedCurrency \u003d\u003d null || toFormattedCurrency \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                throw new ParseException(CurrencyCommand.MESSAGE_CURRENCY_NOT_SUPPORTED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return new CurrencyCommand(currencyIndex, fromCurrency, toCurrency);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrencyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrencyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrencyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aiobe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrencyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "software-1234": 43,
      "Articho28": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new ItemAddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemAddCommandParser implements Parser\u003cItemAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemAddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns an ItemAddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MONEY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MONEY)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemAddCommand(index,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    argMultimap.getValue(PREFIX_NAME).get(), argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(ItemAddCommand.MESSAGE_INVALID_ARGUMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new ItemDeleteCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * {@code indexPerson} represents the index of the person whose item the user want to delete."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * {@code indexItem} represents the index of the item that the user want to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemDeleteCommandParser implements Parser\u003cItemDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Index indexPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Index indexItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemDeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns an ItemDeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            parsePersonItemIndices(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemDeleteCommand(indexPerson, indexItem);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of two indices into indexPerson and indexItem."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param args A string of two indices separated by a whitespace"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private void parsePersonItemIndices(String args) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String[] indices \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (indices.length !\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indexPerson \u003d ParserUtil.parseIndex(indices[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indexItem \u003d ParserUtil.parseIndex(indices[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemShowCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemShowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new ItemShowCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemShowCommandParser implements Parser\u003cItemShowCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ItemShowCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns an ItemShowCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ItemShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new ItemShowCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SortCommand.SORT_ORDER_ASCENDING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SortCommand.SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGS \u003d \"Format of Parameter is not correct.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses {@code oneBasedIndices} into an ArrayList of {@code Index} and returns it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static ArrayList\u003cIndex\u003e parseIndices(String oneBasedIndices) throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String[] splittedIndices \u003d oneBasedIndices.trim().split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (String indexString : splittedIndices) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(indexString)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            indices.add(Index.fromOneBased(Integer.parseInt(indexString)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses {@code args} into an {@code sortKey} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws IllegalValueException if the specified SortKey is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static String parseSortKey(String args) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String[] splittedArgs \u003d args.trim().split(\"/\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String sortKey \u003d splittedArgs[0] + \"/\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (splittedArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ARGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!sortKey.equals(PREFIX_NAME.getPrefix())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 !sortKey.equals(PREFIX_PHONE.getPrefix())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 !sortKey.equals(PREFIX_EMAIL.getPrefix())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 !sortKey.equals(PREFIX_ADDRESS.getPrefix())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 !sortKey.equals(PREFIX_TAG.getPrefix())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 !sortKey.equals(PREFIX_MONEY.getPrefix())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ARGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return sortKey;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses {@code args} into an {@code sortOrder} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws IllegalValueException if the specified SortOrder is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static String parseSortOrder(String args) throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String[] splittedArgs \u003d args.trim().split(\"/\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String sortKey \u003d splittedArgs[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (splittedArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ARGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if ((!sortKey.equals(SORT_ORDER_ASCENDING) \u0026\u0026 !sortKey.equals(SORT_ORDER_DESCENDING))) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ARGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return sortKey;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Parses a {@code String money} into an {@code Money}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @throws IllegalValueException if the given {@code money} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static Money parseMoney(String money) throws IllegalValueException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        String trimmedMoney \u003d money.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        if (!Money.isValidMoney(trimmedMoney) || !Money.isNumberLowEnough(money)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return new Money(trimmedMoney);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e money} into an {@code Optional\u003cmoney\u003e} if {@code money} is present."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static Optional\u003cMoney\u003e parseMoney(Optional\u003cString\u003e money) throws IllegalValueException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return money.isPresent() ? Optional.of(parseMoney(money.get())) : Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 57,
      "pkuhanan": 25,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Parses input arguments and creates a new RemindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class RemindCommandParser implements Parser\u003cRemindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * and returns a RemindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public RemindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new RemindCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new RemoveTagCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns an RemoveTagCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public RemoveTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            parseTagsForRemove(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new RemoveTagCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForRemove(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.commands.SearchTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Parses a SearchTagCommand. Verifies that tags are properly formatted before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class SearchTagCommandParser implements Parser\u003cSearchTagCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_NO_TAGS \u003d \"Please insert tags in the tag field: t/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ColorCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * and returns an RemoveTagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public SearchTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Set\u003cTag\u003e tagsToFind;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            tagsToFind \u003d parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            if (tagsToFind.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND_NO_TAGS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return new SearchTagCommand(tagsToFind);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            String sortKey \u003d ParserUtil.parseSortKey(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            String sortOrder \u003d ParserUtil.parseSortOrder(args); // either \"asc\" or \"desc\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return new SortCommand(sortKey, sortOrder);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SplitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Parses input arguments and creates a new SplitCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SplitCommandParser implements Parser\u003cSplitCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SplitCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * and returns a SplitCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public SplitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MONEY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            indices \u003d ParserUtil.parseIndices(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        double bill;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            Optional\u003cString\u003e money \u003d argMultimap.getValue(PREFIX_MONEY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            bill \u003d Double.parseDouble(money.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            if (bill \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                throw new Exception(\"Negative Value Detected\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new ParseException(\"A correct POSITIVE number(money) needs to be provided for the Bill!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new SplitCommand(indices, bill);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TransactionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static seedu.address.model.money.Money.MONEY_VALIDATION_REGEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.commands.TransactionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Parses input arguments and creates a new TransactionCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class TransactionCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * and returns a TransactionCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public TransactionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            String[] currencyKeywords \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            Index index \u003d Index.fromOneBased(Integer.parseInt(currencyKeywords[0]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            String amount \u003d currencyKeywords[1].toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(currencyKeywords[0]) || !amount.matches(MONEY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            return new TransactionCommand(index, Double.parseDouble(amount));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getName(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getPhone(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getEmail(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getAddress(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getMoney(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                correctTagReferences,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                person.getItems());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void sortPersons(String sortKey, String sortOrder) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        persons.sortPersons(sortKey, sortOrder);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 5,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Sorts the person list by a given keyword {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * The person list would be sorted ascendingly or descendingly, depending on {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    void sortUniquePersonList(String sortKey, String sortOrder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void sortUniquePersonList(String sortKey, String sortOrder) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        addressBook.sortPersons(sortKey, sortOrder);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 6,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Represents a Item in the TravelBanker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidItemName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_ITEMNAME_CONSTRAINTS \u003d \"ItemNames should be alphanumeric with whitespaces or _\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String MESSAGE_ITEMVALUE_CONSTRAINTS \u003d \"ItemValues can be integers or floating point numbers!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String ITEM_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}_\\\\s]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String ITEM_VALUE_VALIDATION_REGEX \u003d \"-?\\\\d+(\\\\.\\\\d+)?(E-?\\\\d+)?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private final String itemValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Constructs a {@code Item}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param itemName A valid item name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Item(String itemName, String itemValue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(itemValue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        checkArgument(isValidItemName(itemName), MESSAGE_ITEMNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        checkArgument(isValidItemValue(itemValue), MESSAGE_ITEMVALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.itemValue \u003d itemValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns true if a given string is a valid item name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static boolean isValidItemName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return test.matches(ITEM_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns true if a given string is a valid item value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static boolean isValidItemValue(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return test.matches(ITEM_VALUE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof Item // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.itemName.equals(((Item) other).itemName)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.itemValue.equals(((Item) other).itemValue)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return itemName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return \"ItemName  [ \" + itemName + \" ]    ||    ItemValue [ \" + itemValue + \" ]\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public String getItemValue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return itemValue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * A list of items that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Supports minimal set of list operations for the app\u0027s features."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class UniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ArrayList\u003cItem\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Constructs empty ItemList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public UniqueItemList() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Creates a UniqueItemList using given items."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public UniqueItemList(ArrayList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        internalList.addAll(items);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns all items in this list as a ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * This ArrayList is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ArrayList\u003cItem\u003e toArrayList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns all items in this list as a String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        builder.append(\"Items: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            builder.append(\"\\nItem No.\" + Integer.toString(i + 1) + \"    ||    \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            builder.append(internalList.get(i).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Replaces the Items in this list with those in the argument Item list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void setItems(ArrayList\u003cItem\u003e newItemList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireAllNonNull(newItemList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        internalList \u003d new ArrayList\u003c\u003e(newItemList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Ensures every item in the argument list exists in this object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void mergeFrom(UniqueItemList from) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        final ArrayList\u003cItem\u003e alreadyInside \u003d this.toArrayList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .filter(item -\u003e !alreadyInside.contains(item))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .forEach(internalList::add);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns true if the list contains an equivalent Item as the given argument."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Adds a Item to the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws DuplicateItemException if the Item to add is a duplicate of an existing Item in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void add(Item toAdd) throws DuplicateItemException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns true if the element in this list is equal to the elements in {@code other}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * The elements do not have to be in the same order."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equalsOrderInsensitive(UniqueItemList other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(other.internalList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * returns the sum of all items in the internalList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public double getValueSum() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        double sum \u003d 0.0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (Item item: internalList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            sum +\u003d Double.parseDouble(item.getItemValue());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static class DuplicateItemException extends DuplicateDataException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        protected DuplicateItemException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/model/money/Money.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "//@@author pkuhanan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "package seedu.address.model.money;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Represents a Person\u0027s Money Balance in the TravelBanker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMoney(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "public class Money {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MESSAGE_MONEY_CONSTRAINTS \u003d \"Money values should be numbers and a maximum \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            + \"of 16 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    //@@author software-1234"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX \u003d \"-?\\\\d+(\\\\.\\\\d+)?(E-?\\\\d+)?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public final double balance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * Constructs a {@code Money}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * @param balance A valid money balance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public Money(String balance) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        requireNonNull(balance);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        checkArgument(isValidMoney(balance), MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        this.balance \u003d Double.parseDouble(balance);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        this.value \u003d balance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public Double toDouble() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return balance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     * Returns true if a given string is a valid money balance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "software-1234"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author Articho28"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Limits the input for money to 16 digits. This is when we start the lose precision for balance command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static boolean isNumberLowEnough(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        char[] testArray \u003d test.toCharArray();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        int size \u003d testArray.length;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        if (size \u003e 16) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Returns true if the user need to pay the contact certain amount of money"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @return true/false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public boolean isNeedPaidMoney() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return balance \u003c 0.0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Returns true if the user need to received certain amount of money from the contact"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * @return true/false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public boolean isNeedReceivedMoney() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return balance \u003e 0.0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                || (other instanceof Money // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "                \u0026\u0026 this.value.equals(((Money) other).value)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Money other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return toDouble().compareTo(other.toDouble());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "software-1234": 33,
      "pkuhanan": 38,
      "Articho28": 15,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SortCommand.SORT_ORDER_DESCENDING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Money money;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueItemList items;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Money balance, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.money \u003d balance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.items \u003d new UniqueItemList(new ArrayList\u003c\u003e()); // initialize as empty set"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param items must be provided"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Money balance,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                  Set\u003cTag\u003e tags, ArrayList\u003cItem\u003eitems) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, items);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.money \u003d balance;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.items \u003d new UniqueItemList(items);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMoney(Money money) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns the amount of money due to unknown reasons/items"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Double getReasonUnknownAmount() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return money.toDouble() - items.getValueSum();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public ArrayList\u003cItem\u003e getItems() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return items.toArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public UniqueItemList getUniqueItemList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void setItems(ArrayList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void clearItems() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.items.setItems(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getMoney().equals(this.getMoney());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, money, tags, items);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Balance: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getMoney())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Create comparator for sorting person list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param sortKey"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param sortOrder either \"asc\" or \"desc\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @return comparator"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static Comparator\u003cPerson\u003e createComparator(String sortKey, String sortOrder) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Comparator\u003cPerson\u003e comparator;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (sortKey.equals(PREFIX_NAME.getPrefix())) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getName().compareTo(person2.getName());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else if (sortKey.equals(PREFIX_PHONE.getPrefix())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getPhone().compareTo(person2.getPhone());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else if (sortKey.equals(PREFIX_EMAIL.getPrefix())) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getEmail().compareTo(person2.getEmail());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else if (sortKey.equals(PREFIX_ADDRESS.getPrefix())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getAddress().compareTo(person2.getAddress());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else if (sortKey.equals(PREFIX_MONEY.getPrefix())) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getMoney().compareTo(person2.getMoney());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else if (sortKey.equals(PREFIX_TAG.getPrefix())) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +Integer.compare(person1.getTags().size(), person2.getTags().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            // sort name by default"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d (person1, person2) -\u003e +person1.getName().toString()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                    .compareToIgnoreCase(person2.getName().toString());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (sortOrder.equals(SORT_ORDER_DESCENDING)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            comparator \u003d comparator.reversed();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 85,
      "pkuhanan": 5,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Person toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return personFoundAndDeleted;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniquePersonList replacement \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Person person : persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Sorts {@code internalList} by keyword ascendingly or descendingly"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void sortPersons(String sortKey, String sortOrder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Comparator\u003cPerson\u003e comparator \u003d Person.createComparator(sortKey, sortOrder);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        internalList.sort(comparator);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 9,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * JAXB-friendly adapted version of the Item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class XmlAdaptedItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Constructs an XmlAdaptedItem."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public XmlAdaptedItem() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Constructs a {@code XmlAdaptedItem} with the given {@code itemName}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public XmlAdaptedItem(String itemName, String itemValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.name \u003d itemName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.value \u003d itemValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Converts a given item into this class for JAXB use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public XmlAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        name \u003d source.getItemName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        value \u003d source.getItemValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Converts this jaxb-friendly adapted item object into the model\u0027s Item object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!Item.isValidItemName(name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(Item.MESSAGE_ITEMNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!Item.isValidItemValue(value)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            throw new IllegalValueException(Item.MESSAGE_ITEMVALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Item(name, value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        if (!(other instanceof XmlAdaptedItem)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return name.equals(((XmlAdaptedItem) other).name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private String balance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private List\u003cXmlAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, String balance,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.balance \u003d balance;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        balance \u003d source.getMoney().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Item item : source.getItems()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            items.add(new XmlAdaptedItem(item));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author chenchongsong"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        final List\u003cItem\u003e personItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        for (XmlAdaptedItem item : items) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "            personItems.add(item.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author pkuhanan"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        if (!Money.isValidMoney(this.balance)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        final Money balance \u003d new Money(this.balance);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author chenchongsong"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        final ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e(personItems);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return new Person(name, phone, email, address, balance, tags, items);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(balance, otherPerson.balance)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 14,
      "pkuhanan": 10,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowMapRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ATM_SEARCH_PAGE_URL \u003d \"https://www.google.com.sg/maps/search/atm+near+me/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_SEARCH_PAGE_URL \u003d \"https://www.google.com.sg/maps/search/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadAtmSearchPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author Articho28"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void loadAtmSearchPage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        loadPage(ATM_SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private void loadPersonAddress(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        loadPage (ADDRESS_SEARCH_PAGE_URL + person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonAddress(event.getNewSelection().person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author Articho28"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private void handleShowMapRequestEvent(ShowMapRequestEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        loadAtmSearchPage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "Articho28": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] TAG_COLOR \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    {\"red\", \"yellow\", \"orange\", \"white\", \"blue\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private Label money;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        money.setText(\"Balance: \" + person.getMoney().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "content": "    //@@author Aritcho28-reused"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the color for a specific tag."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the tag colors for a person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "content": "    //@@author"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "pkuhanan": 4,
      "-": 91
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "      \u003c!-- @@author pkuhanan --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "      \u003cLabel fx:id\u003d\"money\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$money\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "      \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private static final String VALID_BALANCE \u003d \"10\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 3,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BalanceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class BalanceCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private BalanceCommand balanceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private double balance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        balanceCommand \u003d new BalanceCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        balanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        balance \u003d balanceCommand.getBalanceFromTravelBanker();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void executes_getsOverallBalanceSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertCommandSuccess(balanceCommand, model,  BalanceCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \"\\n\" + \"Your balance is \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + BalanceCommand.getFormatTwoDecimalPlaces().format(balance)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \".\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String VALID_MONEY_AMY \u003d \"10\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String VALID_MONEY_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MONEY_DESC_AMY \u003d \" \" + PREFIX_MONEY + VALID_MONEY_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public static final String MONEY_DESC_BOB \u003d \" \" + PREFIX_MONEY + VALID_MONEY_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String VALID_BILL \u003d \" \" + PREFIX_MONEY + \"100.00\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String INVALID_BILL \u003d \" \" + PREFIX_MONEY + \"100k\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMoney(VALID_MONEY_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withMoney(VALID_MONEY_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 4,
      "pkuhanan": 8,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListBalancesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "software-1234"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "software-1234"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class ListBalancesCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public void executes_updatesFilteredListAccordingly() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model.getFilteredPersonList().get(0).setMoney(new Money(\"100\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        ListPositiveBalanceCommand listPositiveBalanceCommand \u003d new ListPositiveBalanceCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listPositiveBalanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listPositiveBalanceCommand.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            assertEquals(model.getAddressBook().getPersonList().get(i), model.getFilteredPersonList().get(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model.getAddressBook().getPersonList().get(0).setMoney(new Money(\"-100\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model.getAddressBook().getPersonList().get(1).setMoney(new Money(\"-150\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model.getAddressBook().getPersonList().get(3).setMoney(new Money(\"-200\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        ListNegativeBalanceCommand listNegativeBalanceCommand \u003d new ListNegativeBalanceCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listNegativeBalanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listNegativeBalanceCommand.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        assertEquals(model.getAddressBook().getPersonList().get(0), model.getFilteredPersonList().get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        assertEquals(model.getAddressBook().getPersonList().get(1), model.getFilteredPersonList().get(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        assertEquals(model.getAddressBook().getPersonList().get(3), model.getFilteredPersonList().get(2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public void noPositiveOrNegativeAmounts() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        ListNegativeBalanceCommand listNegativeBalanceCommand \u003d new ListNegativeBalanceCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listNegativeBalanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listNegativeBalanceCommand.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        assertEquals(0, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            model.getAddressBook().getPersonList().get(i).setMoney(new Money(\"-100\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        ListPositiveBalanceCommand listPositiveBalanceCommand \u003d new ListPositiveBalanceCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listPositiveBalanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        listPositiveBalanceCommand.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        assertEquals(0, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "software-1234"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "software-1234": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.ui.GuiUnitTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class MapCommandTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private MapCommand mapCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        mapCommand \u003d new MapCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        mapCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void executes_mapCommandRecognized() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertCommandSuccess(mapCommand, model, MapCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test public void executes_displaysMap() throws MalformedURLException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        CommandResult commandResult \u003d mapCommand.execute();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new URL(BrowserPanel.ATM_SEARCH_PAGE_URL), browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MinCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static org.testng.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Tests the output of the MinCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class MinCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModelNoResultsFound;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModelResultsFound;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private int indexOfLowestBalance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private MinCommand minCommandNoResultsFound;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private MinCommand minCommandResultsFound;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Person actualPersonSelected;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Person expectedPersonSelected;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelNoResultsFound \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelResultsFound \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        indexOfLowestBalance \u003d getIndexOfPersonWithLowestBalance(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommandNoResultsFound \u003d new MinCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommandNoResultsFound.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommandResultsFound \u003d new MinCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommandResultsFound.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Checks that it does nothing if all balances are positive."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void executeFindsNoResults() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        if (indexOfLowestBalance \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            assertCommandSuccess(minCommandNoResultsFound, model,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                    MinCommand.MESSAGE_SUCCESS_NO_RESULT, expectedModelNoResultsFound);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Finds the same person and checks if their balance is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws DuplicatePersonException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws PersonNotFoundException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void executeFindsSamePerson() throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        insertNegativeBalance(model, DANIEL, new Money(\"-10\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        insertNegativeBalance(expectedModelResultsFound, DANIEL, new Money(\"-10\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        indexOfLowestBalance \u003d getIndexOfPersonWithLowestBalance(expectedModelResultsFound.getAddressBook());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedPersonSelected \u003d expectedModelResultsFound.getFilteredPersonList().get(indexOfLowestBalance);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommandResultsFound.execute();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        actualPersonSelected \u003d model.getFilteredPersonList().get(indexOfLowestBalance);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertExecutionSuccess(expectedPersonSelected, actualPersonSelected);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(actualPersonSelected.getMoney().value \u003d\u003d expectedPersonSelected.getMoney().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@ author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void executes_updatedBalanceAccordingly() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model.getFilteredPersonList().get(0).setMoney(new Money(\"-100\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        MinCommand minCommand \u003d new MinCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        minCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        CommandResult commandResult \u003d minCommand.execute();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(commandResult.feedbackToUser,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                MinCommand.MESSAGE_SUCCESS_FOUND + model.getFilteredPersonList().get(0).getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author Articho28"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Gets the index number of the person with the lowest balance. Returns -1 if all balances are non-negative."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param addressBook"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public int getIndexOfPersonWithLowestBalance(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        List\u003cPerson\u003e persons \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        double lowestBalance \u003d 0.0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            double currentBalance \u003d p.getMoney().balance;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            if (currentBalance \u003c lowestBalance) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                index \u003d persons.indexOf(p);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                lowestBalance \u003d currentBalance;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        if (lowestBalance \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            index \u003d -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Inserts a person with a negative balance instead"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param modelToChange"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param toReplace"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @param money"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws PersonNotFoundException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws DuplicatePersonException"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void insertNegativeBalance(Model modelToChange, Person toReplace, Money money)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            throws PersonNotFoundException, DuplicatePersonException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Person edited \u003d new Person(toReplace.getName(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                toReplace.getPhone(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                toReplace.getEmail(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                toReplace.getAddress(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                money,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                toReplace.getTags(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                toReplace.getItems());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        modelToChange.updatePerson(toReplace, edited);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Checks if selected people are the same in both models."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    static void assertExecutionSuccess(Person expectedSelection, Person actualSelection) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(expectedSelection.equals(actualSelection));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.commands.RemoveTagCommand.createEditedPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Contains integration test (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class RemoveTagCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToEdit).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person tagRemovedPerson \u003d new Person("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                personToEdit.getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                personToEdit.getPhone(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                personToEdit.getEmail(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                personToEdit.getAddress(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                personToEdit.getMoney(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_REMOVE_TAG_SUCCESS, tagRemovedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        expectedModel.updatePerson(personToEdit, tagRemovedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // lastPerson contains original info"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person tagRemovedPerson \u003d personInList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withName(lastPerson.getName().toString())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withPhone(lastPerson.getPhone().toString())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withEmail(lastPerson.getEmail().toString())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withAddress(lastPerson.getAddress().toString())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withMoney(lastPerson.getMoney().toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withoutTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withTags(lastPerson.getTags()).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d prepareCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_REMOVE_TAG_SUCCESS, tagRemovedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        expectedModel.updatePerson(lastPerson, tagRemovedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandFailure(removeTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Remove Tags from filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandFailure(removeTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToEdit).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // descriptor contains all tags to be removed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person tagRemovedPerson \u003d createEditedPerson(personToEdit, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // remove tags -\u003e first person tags removed"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        removeTagCommand.execute();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        undoRedoStack.push(removeTagCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // redo -\u003e same first person\u0027s tag removed again"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        expectedModel.updatePerson(personToEdit, tagRemovedPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToEdit).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        final RemoveTagCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        commandWithSameValues.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(standardCommand.equals(new RemoveTagCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(standardCommand.equals(new RemoveTagCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private RemoveTagCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(index, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return removeTagCommand;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class SearchTagCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModelSingleInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Model expectedModelMultipleInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private SearchTagCommand searchTagCommandSingleTagInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private SearchTagCommand searchTagCommandMultipleTagsInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Set\u003cTag\u003e multipleTagsAsInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private Set\u003cTag\u003e singleTagAsInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        singleTagAsInput \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        singleTagAsInput.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsAsInput \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsAsInput.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsAsInput.add(new Tag(\"classmates\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsAsInput.add(new Tag(\"colleagues\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelSingleInput \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelSingleInput.updateFilteredPersonList(SearchTagCommand.personHasTags(singleTagAsInput));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelMultipleInput \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        expectedModelMultipleInput.updateFilteredPersonList(SearchTagCommand.personHasTags(multipleTagsAsInput));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        searchTagCommandSingleTagInput \u003d new SearchTagCommand(singleTagAsInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        searchTagCommandMultipleTagsInput \u003d new SearchTagCommand((multipleTagsAsInput));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        searchTagCommandSingleTagInput.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        searchTagCommandMultipleTagsInput.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void showsAllContactWithFriendsTag() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        int result \u003d expectedModelSingleInput.getFilteredPersonList().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertCommandSuccess(searchTagCommandSingleTagInput, model, SearchTagCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + SearchTagCommand.formatTagsFeedback(singleTagAsInput)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + Command.getMessageForPersonListShownSummary(result), expectedModelSingleInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void showsNoContactsWithMultipleTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        int result \u003d expectedModelMultipleInput.getFilteredPersonList().size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertCommandSuccess(searchTagCommandMultipleTagsInput, model, SearchTagCommand.MESSAGE_FAILURE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + SearchTagCommand.formatTagsFeedback(multipleTagsAsInput), expectedModelMultipleInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SplitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SplitCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void executes_splitBalance() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        double expectedBalance1 \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased()).getMoney().toDouble() + 50.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        double expectedBalance2 \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                .get(INDEX_SECOND_PERSON.getZeroBased()).getMoney().toDouble() + 50.0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        SplitCommand splitCommand \u003d new SplitCommand(indices, 100.0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        splitCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        splitCommand.execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertEquals(expectedBalance1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getMoney().toDouble(), 0.001);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertEquals(expectedBalance2,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()).getMoney().toDouble(), 0.001);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/WipeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "software-1234"
        },
        "content": "//@@author software-1234"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "software-1234"
        },
        "content": "public class WipeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private WipeBalancesCommand wipeBalancesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    private double balance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public void setUp() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        wipeBalancesCommand \u003d new WipeBalancesCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        wipeBalancesCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        wipeBalancesCommand.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    public void executes_getsWipeSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getFilteredPersonList().size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "software-1234"
        },
        "content": "            assertEquals(0.0, model.getFilteredPersonList().get(i).getMoney().balance, 0.001);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "software-1234"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "software-1234"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "software-1234"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "software-1234"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "software-1234": 27,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_addWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_SHORTCUT + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_clearWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SHORTCUT) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SHORTCUT + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_deleteWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                DeleteCommand.COMMAND_SHORTCUT + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_editWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_SHORTCUT + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_findWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                FindCommand.COMMAND_SHORTCUT + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_helpWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_SHORTCUT) instanceof HelpCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_SHORTCUT + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Articho28"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_historyWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SHORTCUT) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SHORTCUT + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_listWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SHORTCUT) instanceof ListCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SHORTCUT + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_selectWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                SelectCommand.COMMAND_SHORTCUT + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommandWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_SHORTCUT) instanceof RedoCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommandWithShortcut() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_SHORTCUT) instanceof UndoCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "Articho28": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ItemAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemAddCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String VALID_ITEM_NAME \u003d \"Taxi Fare\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String VALID_ITEM_VALUE \u003d \"10.23\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String INVALID_ITEM_NAME \u003d \"Taxi*\u0026(Fare)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String INVALID_ITEM_VALUE \u003d \"10k\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ItemAddCommandParser parser \u003d new ItemAddCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgs_returnsItemAddCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_NAME + VALID_ITEM_NAME + \" \" + PREFIX_MONEY + VALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new ItemAddCommand(INDEX_FIRST_PERSON, VALID_ITEM_NAME, VALID_ITEM_VALUE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // 0 as targetIndex"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_NAME + VALID_ITEM_NAME + \" \" + PREFIX_MONEY + VALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // no prefix \"n/\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 \" + VALID_ITEM_NAME + \" \" + PREFIX_MONEY + VALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // no prefix \"m/\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_ITEM_NAME + \" \" + VALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // invalid item name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + INVALID_ITEM_NAME + \" \" + PREFIX_MONEY + VALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                ItemAddCommand.MESSAGE_INVALID_ARGUMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // invalid item value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_ITEM_NAME + \" \" + PREFIX_MONEY + INVALID_ITEM_VALUE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                ItemAddCommand.MESSAGE_INVALID_ARGUMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ItemDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemDeleteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ItemDeleteCommandParser parser \u003d new ItemDeleteCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgs_returnsItemDeleteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, \"1 1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new ItemDeleteCommand(INDEX_FIRST_PERSON, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 1 1\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"0 1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1 0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ItemShowCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.ItemShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemShowCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private ItemShowCommandParser parser \u003d new ItemShowCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgs_returnsItemShowCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ItemShowCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ItemShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class RemoveTagCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String TAG_NAME_1 \u003d \"friends\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final String TAG_NAME_2 \u003d \"owesMoney\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgsSingleTag_returnsRemoveTagCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e tagsToRemoved \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        tagsToRemoved.add(new Tag(TAG_NAME_1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        editPersonDescriptor.setTags(tagsToRemoved);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_TAG + TAG_NAME_1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new RemoveTagCommand(INDEX_FIRST_PERSON, editPersonDescriptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgsMultipleTags_returnsRemoveTagCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Set\u003cTag\u003e tagsToRemoved \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        tagsToRemoved.add(new Tag(TAG_NAME_1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        tagsToRemoved.add(new Tag(TAG_NAME_2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        editPersonDescriptor.setTags(tagsToRemoved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_TAG + TAG_NAME_1 + \" \" + PREFIX_TAG + TAG_NAME_2,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new RemoveTagCommand(INDEX_FIRST_PERSON, editPersonDescriptor));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"t/friends\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // 0 index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"0 t/friends\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Articho28"
        },
        "content": "//@@author Articho28"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Articho28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static org.testng.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.commands.SearchTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Articho28"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Articho28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Articho28"
        },
        "content": " * Tests that the SeachTagCommandParser manipulates the input properly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Articho28"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Articho28"
        },
        "content": "public class SearchTagCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String TAG_NAME_1 \u003d \"friends\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public static final String TAG_NAME_2 \u003d \"colleagues\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    private SearchTagCommandParser searchTagCommandParser \u003d new SearchTagCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Test for single input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void validArgsSingleTagInputIsEqual() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Set\u003cTag\u003e tagsToFind \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        tagsToFind.add(new Tag(TAG_NAME_1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        SearchTagCommand searchTagCommand \u003d searchTagCommandParser.parse( \" \" + PREFIX_TAG + TAG_NAME_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(searchTagCommand.getTagsToFind(), tagsToFind);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Tests for multiple input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void validArgsMultipleTagsAreEqual() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        Set\u003cTag\u003e multipleTagsToFind \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsToFind.add(new Tag(TAG_NAME_1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        multipleTagsToFind.add(new Tag(TAG_NAME_2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        SearchTagCommand searchTagCommand \u003d searchTagCommandParser.parse(\" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + PREFIX_TAG + TAG_NAME_1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                + PREFIX_TAG + TAG_NAME_2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(searchTagCommand.getTagsToFind(), multipleTagsToFind);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     * Throws exception when no tags are provided."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Articho28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void emptyTagsArgs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertParseFailure(searchTagCommandParser, \"a\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                String.format(SearchTagCommandParser.MESSAGE_INVALID_COMMAND_NO_TAGS, SearchTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Articho28": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_ADDRESS + SortCommand.SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_ADDRESS.toString(), SortCommand.SORT_ORDER_ASCENDING));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_PHONE + SortCommand.SORT_ORDER_DESCENDING,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_PHONE.toString(), SortCommand.SORT_ORDER_DESCENDING));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_EMAIL + SortCommand.SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_EMAIL.toString(), SortCommand.SORT_ORDER_ASCENDING));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_NAME + SortCommand.SORT_ORDER_DESCENDING,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_NAME.toString(), SortCommand.SORT_ORDER_DESCENDING));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_MONEY + SortCommand.SORT_ORDER_ASCENDING,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_MONEY.toString(), SortCommand.SORT_ORDER_ASCENDING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, PREFIX_TAG + SortCommand.SORT_ORDER_DESCENDING,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SortCommand(PREFIX_TAG.toString(), SortCommand.SORT_ORDER_DESCENDING));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // duplicate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"n/asc e/asc\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // typo"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"e/ascc\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // typo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, \"tt/desc\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SplitCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.logic.commands.SplitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class SplitCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_INDICES_1 \u003d \"1 2 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_INDICES_2 \u003d \"1 1 1 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String INVALID_INDEX_1 \u003d \"a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String INVALID_INDEX_2 \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_BILL_1 \u003d PREFIX_MONEY + \"100.00\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_BILL_2 \u003d PREFIX_MONEY + \"0.12\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private SplitCommandParser parser \u003d new SplitCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgsSingleIndex_returnsSplitCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX + \" \" + VALID_BILL_1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SplitCommand(indices, 100.00));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_validArgsMultipleIndex_returnsSplitCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, VALID_INDICES_1 + \" \" + VALID_BILL_2,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SplitCommand(indices, 0.12));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // In this case, the first person would take 3/4 of that bill"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // and the second person would take 1/4 of that bill"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        indices.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseSuccess(parser, VALID_INDICES_2 + \" \" + VALID_BILL_2,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                new SplitCommand(indices, 0.12));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, INVALID_INDEX_1 + \" \" + VALID_BILL_1,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertParseFailure(parser, INVALID_INDEX_2 + \" \" + VALID_BILL_2,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SplitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "//@@author chenchongsong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_ITEM_NAME_1 \u003d \"Taxi Fare Split\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_ITEM_NAME_2 \u003d \"Taxi_Fare_Split\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_ITEM_NAME_3 \u003d \"Taxi  Fare  Split\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String VALID_ITEM_NAME_4 \u003d \"Taxi__Fare__Split\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String INVALID_ITEM_NAME \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    private static final String INVALID_ITEM_VALUE_1 \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Item(null, null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void constructor_invalidItemName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Item(INVALID_ITEM_NAME, INVALID_ITEM_VALUE_1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void isValidItemName() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Item.isValidItemName(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemName(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemName(\"item*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(\"someitemname\")); // alphabets only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(\"some item name 123456\")); // alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(\"Some Item Name\")); // with capital letters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(VALID_ITEM_NAME_1)); // separated by space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(VALID_ITEM_NAME_2)); // separated by _"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(VALID_ITEM_NAME_3)); // separated by two spaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemName(VALID_ITEM_NAME_4)); // separated by __"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public void isValidItemValue() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Item.isValidItemValue(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // valid item value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemValue(\"0\")); // numbers only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemValue(\"123456\")); // multiple digits"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemValue(\"10.2345\")); // with multiple decimal places"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemValue(\"12345678978978987978987987987987\")); // long digits"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertTrue(Item.isValidItemValue(\"123456.123E8\")); // scientific representation of floating point numbers"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        // invalid item value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemValue(\"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemValue(\"10.\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemValue(\"123E8E6\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        assertFalse(Item.isValidItemValue(\"10k\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    private static final String VALID_BALANCE \u003d BENSON.getMoney().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_BALANCE, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_BALANCE, invalidTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pkuhanan": 3,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setMoney(person.getMoney());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Sets the {@code Money} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public EditPersonDescriptorBuilder withMoney(String money) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        descriptor.setMoney(new Money(money));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Copy a Tag Set {@code toCopy} and set the copy into the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(Set\u003cTag\u003e toCopy) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        descriptor.setTags(toCopy);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 10,
      "pkuhanan": 9,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BALANCE \u003d \"10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Money balance;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        balance \u003d new Money(DEFAULT_BALANCE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        balance \u003d personToCopy.getMoney();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     * Set an empty set {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public PersonBuilder withoutTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author pkuhanan"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     * Sets the {@code Money} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    public PersonBuilder withMoney(String balance) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        this.balance \u003d new Money(balance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pkuhanan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, balance, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 9,
      "pkuhanan": 9,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author chenchongsong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenchongsong"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenchongsong": 5,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(BOB, 0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    //@@author Articho28"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        URL expectedDefaultPageUrl \u003d new URL(BrowserPanel.ATM_SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.ADDRESS_SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Articho28"
        },
        "content": "                +  BOB.getAddress().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Articho28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Articho28"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Articho28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Articho28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "Articho28": 16
    }
  }
]
